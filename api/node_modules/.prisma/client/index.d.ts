
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Team
 * 
 */
export type Team = {
  TeamID: number
  Key: string
  City: string
  Name: string
  stadium: string
  Conference: string
  Division: string
  inner_color: string
  outer_color: string
  WikipediaLogoUrl: string
  Wins: number
  Losses: number
}

/**
 * Model Game
 * 
 */
export type Game = {
  GameID: number
  Season: number
  SeasonType: number
  Status: string
  Channel: string
  Day: Date
  nba_day: string
  DateTime: Date
  AwayTeamID: number
  HomeTeamID: number
  stadium: string
  city: string
  AwayTeamScore: number | null
  HomeTeamScore: number | null
  Quarter: string | null
  TimeRemainingMinutes: string | null
  TimeRemainingSeconds: string | null
  Quarters: Prisma.JsonValue | null
  CrewChiefID: number | null
  UmpireID: number | null
  RefereeID: number | null
}

/**
 * Model TeamStatlines
 * 
 */
export type TeamStatlines = {
  StatID: number
  TeamID: number
  Season: number
  Name: string
  Team: string
  Wins: number
  Losses: number
  GameID: number
  OpponentID: number
  Opponent: string
  HomeOrAway: string
  IsGameOver: boolean
  FieldGoalsMade: number
  FieldGoalsAttempted: number
  FieldGoalsPercentage: Prisma.Decimal
  EffectiveFieldGoalsPercentage: Prisma.Decimal
  TwoPointersMade: number
  TwoPointersAttempted: number
  TwoPointersPercentage: Prisma.Decimal
  ThreePointersMade: number
  ThreePointersAttempted: number
  ThreePointersPercentage: Prisma.Decimal
  FreeThrowsMade: number
  FreeThrowsAttempted: number
  FreeThrowsPercentage: Prisma.Decimal
  OffensiveRebounds: number
  DefensiveRebounds: number
  Rebounds: number
  Assists: number
  Steals: number
  BlockedShots: number
  Turnovers: number
  PersonalFouls: number
  Points: number
  TrueShootingPercentage: Prisma.Decimal
  FantasyPointsFanDuel: Prisma.Decimal
  FantasyPointsDraftKings: Prisma.Decimal
  FantasyPointsYahoo: Prisma.Decimal
}

/**
 * Model Player
 * 
 */
export type Player = {
  PlayerID: number
  TeamID: number
  Jersey: number
  PositionCategory: string
  Position: string
  FirstName: string
  LastName: string
  s_name: string
  Height: number
  Weight: number
  BirthDate: string
  BirthCity: string
  BirthState: string
  BirthCountry: string
  HighSchool: string
  College: string
  PhotoUrl: string
  SportRadarPlayerID: string
  RotoworldPlayerID: number
  RotoWirePlayerID: number
  FantasyAlarmPlayerID: number
  InjuryStatus: string | null
  InjuryBodyPart: string | null
  InjuryStartDate: string | null
  InjuryNotes: string | null
  FanDuelPlayerID: number
  DraftKingsPlayerID: number
  YahooPlayerID: number
  FanDuelName: string
  DraftKingsName: string
  YahooName: string
  DepthChartPosition: string
  DepthChartOrder: number
  UsaTodayPlayerID: number
  UsaTodayHeadshotUrl: string
  UsaTodayHeadshotNoBackgroundUrl: string
  UsaTodayHeadshotUpdated: string
  UsaTodayHeadshotNoBackgroundUpdated: string
  NbaDotComPlayerID: number
}

/**
 * Model Statline
 * 
 */
export type Statline = {
  StatID: number
  TeamID: number
  PlayerID: number
  Name: string
  Position: string
  Started: number
  InjuryStatus: string | null
  InjuryBodyPart: string | null
  InjuryStartDate: string | null
  InjuryNotes: string | null
  GameID: number
  OpponentID: number
  HomeOrAway: string
  FantasyPoints: Prisma.Decimal
  Minutes: number
  Seconds: number
  FieldGoalsMade: number
  FieldGoalsAttempted: number
  FieldGoalsPercentage: Prisma.Decimal
  EffectiveFieldGoalsPercentage: Prisma.Decimal
  TwoPointersMade: number
  TwoPointersAttempted: number
  TwoPointersPercentage: Prisma.Decimal
  ThreePointersMade: number
  ThreePointersAttempted: number
  ThreePointersPercentage: Prisma.Decimal
  FreeThrowsMade: number
  FreeThrowsAttempted: number
  FreeThrowsPercentage: Prisma.Decimal
  OffensiveRebounds: number
  DefensiveRebounds: number
  Rebounds: number
  OffensiveReboundsPercentage: Prisma.Decimal
  DefensiveReboundsPercentage: Prisma.Decimal
  TotalReboundsPercentage: Prisma.Decimal
  Assists: number
  Steals: number
  BlockedShots: number
  Turnovers: number
  PersonalFouls: number
  Points: number
  TrueShootingPercentage: Prisma.Decimal
  PlayerEfficiencyRating: Prisma.Decimal
  AssistsPercentage: Prisma.Decimal
  StealsPercentage: Prisma.Decimal
  BlocksPercentage: Prisma.Decimal
  TurnOversPercentage: Prisma.Decimal
  UsageRatePercentage: Prisma.Decimal
  FantasyPointsFanDuel: Prisma.Decimal
  FantasyPointsDraftKings: Prisma.Decimal
  FantasyPointsYahoo: Prisma.Decimal
  PlusMinus: number
  DoubleDoubles: number
  TripleDoubles: number
  FantasyPointsFantasyDraft: Prisma.Decimal
}

/**
 * Model Referee
 * 
 */
export type Referee = {
  RefereeID: number
  Name: string
  Number: number
}

/**
 * Model SeasonAverages
 * 
 */
export type SeasonAverages = {
  PlayerID: number
  FantasyPoints: Prisma.Decimal
  Minutes: number
  FieldGoalsMade: Prisma.Decimal
  FieldGoalsAttempted: Prisma.Decimal
  FieldGoalsPercentage: Prisma.Decimal
  TwoPointersMade: Prisma.Decimal
  TwoPointersAttempted: Prisma.Decimal
  TwoPointersPercentage: Prisma.Decimal
  ThreePointersMade: Prisma.Decimal
  ThreePointersAttempted: Prisma.Decimal
  ThreePointersPercentage: Prisma.Decimal
  FreeThrowsMade: Prisma.Decimal
  FreeThrowsAttempted: Prisma.Decimal
  FreeThrowsPercentage: Prisma.Decimal
  OffensiveRebounds: Prisma.Decimal
  DefensiveRebounds: Prisma.Decimal
  Rebounds: Prisma.Decimal
  Assists: Prisma.Decimal
  Steals: Prisma.Decimal
  BlockedShots: Prisma.Decimal
  Turnovers: Prisma.Decimal
  PersonalFouls: Prisma.Decimal
  Points: Prisma.Decimal
  FantasyPointsFanDuel: Prisma.Decimal
  FantasyPointsDraftKings: Prisma.Decimal
  FantasyPointsYahoo: Prisma.Decimal
  PlusMinus: Prisma.Decimal
}

/**
 * Model LastFiveGameAverages
 * 
 */
export type LastFiveGameAverages = {
  PlayerID: number
  FantasyPoints: Prisma.Decimal
  Minutes: number
  FieldGoalsMade: Prisma.Decimal
  FieldGoalsAttempted: Prisma.Decimal
  FieldGoalsPercentage: Prisma.Decimal
  TwoPointersMade: Prisma.Decimal
  TwoPointersAttempted: Prisma.Decimal
  TwoPointersPercentage: Prisma.Decimal
  ThreePointersMade: Prisma.Decimal
  ThreePointersAttempted: Prisma.Decimal
  ThreePointersPercentage: Prisma.Decimal
  FreeThrowsMade: Prisma.Decimal
  FreeThrowsAttempted: Prisma.Decimal
  FreeThrowsPercentage: Prisma.Decimal
  OffensiveRebounds: Prisma.Decimal
  DefensiveRebounds: Prisma.Decimal
  Rebounds: Prisma.Decimal
  Assists: Prisma.Decimal
  Steals: Prisma.Decimal
  BlockedShots: Prisma.Decimal
  Turnovers: Prisma.Decimal
  PersonalFouls: Prisma.Decimal
  Points: Prisma.Decimal
  FantasyPointsFanDuel: Prisma.Decimal
  FantasyPointsDraftKings: Prisma.Decimal
  FantasyPointsYahoo: Prisma.Decimal
  PlusMinus: Prisma.Decimal
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Teams
 * const teams = await prisma.team.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Teams
   * const teams = await prisma.team.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<GlobalReject>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<GlobalReject>;

  /**
   * `prisma.teamStatlines`: Exposes CRUD operations for the **TeamStatlines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamStatlines
    * const teamStatlines = await prisma.teamStatlines.findMany()
    * ```
    */
  get teamStatlines(): Prisma.TeamStatlinesDelegate<GlobalReject>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<GlobalReject>;

  /**
   * `prisma.statline`: Exposes CRUD operations for the **Statline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statlines
    * const statlines = await prisma.statline.findMany()
    * ```
    */
  get statline(): Prisma.StatlineDelegate<GlobalReject>;

  /**
   * `prisma.referee`: Exposes CRUD operations for the **Referee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referees
    * const referees = await prisma.referee.findMany()
    * ```
    */
  get referee(): Prisma.RefereeDelegate<GlobalReject>;

  /**
   * `prisma.seasonAverages`: Exposes CRUD operations for the **SeasonAverages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeasonAverages
    * const seasonAverages = await prisma.seasonAverages.findMany()
    * ```
    */
  get seasonAverages(): Prisma.SeasonAveragesDelegate<GlobalReject>;

  /**
   * `prisma.lastFiveGameAverages`: Exposes CRUD operations for the **LastFiveGameAverages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LastFiveGameAverages
    * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findMany()
    * ```
    */
  get lastFiveGameAverages(): Prisma.LastFiveGameAveragesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Team: 'Team',
    Game: 'Game',
    TeamStatlines: 'TeamStatlines',
    Player: 'Player',
    Statline: 'Statline',
    Referee: 'Referee',
    SeasonAverages: 'SeasonAverages',
    LastFiveGameAverages: 'LastFiveGameAverages'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TeamCountOutputType
   */


  export type TeamCountOutputType = {
    home_games: number
    away_games: number
    team_game_statlines: number
    opponent_team_game_statlines: number
    players: number
    statlines: number
    opponent_team_statlines: number
  }

  export type TeamCountOutputTypeSelect = {
    home_games?: boolean
    away_games?: boolean
    team_game_statlines?: boolean
    opponent_team_game_statlines?: boolean
    players?: boolean
    statlines?: boolean
    opponent_team_statlines?: boolean
  }

  export type TeamCountOutputTypeGetPayload<S extends boolean | null | undefined | TeamCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TeamCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TeamCountOutputTypeArgs)
    ? TeamCountOutputType 
    : S extends { select: any } & (TeamCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TeamCountOutputType ? TeamCountOutputType[P] : never
  } 
      : TeamCountOutputType




  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     * 
    **/
    select?: TeamCountOutputTypeSelect | null
  }



  /**
   * Count Type GameCountOutputType
   */


  export type GameCountOutputType = {
    team_statlines: number
    statlines: number
  }

  export type GameCountOutputTypeSelect = {
    team_statlines?: boolean
    statlines?: boolean
  }

  export type GameCountOutputTypeGetPayload<S extends boolean | null | undefined | GameCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GameCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GameCountOutputTypeArgs)
    ? GameCountOutputType 
    : S extends { select: any } & (GameCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GameCountOutputType ? GameCountOutputType[P] : never
  } 
      : GameCountOutputType




  // Custom InputTypes

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     * 
    **/
    select?: GameCountOutputTypeSelect | null
  }



  /**
   * Count Type PlayerCountOutputType
   */


  export type PlayerCountOutputType = {
    statlines: number
  }

  export type PlayerCountOutputTypeSelect = {
    statlines?: boolean
  }

  export type PlayerCountOutputTypeGetPayload<S extends boolean | null | undefined | PlayerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PlayerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PlayerCountOutputTypeArgs)
    ? PlayerCountOutputType 
    : S extends { select: any } & (PlayerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PlayerCountOutputType ? PlayerCountOutputType[P] : never
  } 
      : PlayerCountOutputType




  // Custom InputTypes

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     * 
    **/
    select?: PlayerCountOutputTypeSelect | null
  }



  /**
   * Count Type RefereeCountOutputType
   */


  export type RefereeCountOutputType = {
    referee_games: number
    umpire_games: number
    crewchief_games: number
  }

  export type RefereeCountOutputTypeSelect = {
    referee_games?: boolean
    umpire_games?: boolean
    crewchief_games?: boolean
  }

  export type RefereeCountOutputTypeGetPayload<S extends boolean | null | undefined | RefereeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RefereeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RefereeCountOutputTypeArgs)
    ? RefereeCountOutputType 
    : S extends { select: any } & (RefereeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RefereeCountOutputType ? RefereeCountOutputType[P] : never
  } 
      : RefereeCountOutputType




  // Custom InputTypes

  /**
   * RefereeCountOutputType without action
   */
  export type RefereeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RefereeCountOutputType
     * 
    **/
    select?: RefereeCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Team
   */


  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    TeamID: number | null
    Wins: number | null
    Losses: number | null
  }

  export type TeamSumAggregateOutputType = {
    TeamID: number | null
    Wins: number | null
    Losses: number | null
  }

  export type TeamMinAggregateOutputType = {
    TeamID: number | null
    Key: string | null
    City: string | null
    Name: string | null
    stadium: string | null
    Conference: string | null
    Division: string | null
    inner_color: string | null
    outer_color: string | null
    WikipediaLogoUrl: string | null
    Wins: number | null
    Losses: number | null
  }

  export type TeamMaxAggregateOutputType = {
    TeamID: number | null
    Key: string | null
    City: string | null
    Name: string | null
    stadium: string | null
    Conference: string | null
    Division: string | null
    inner_color: string | null
    outer_color: string | null
    WikipediaLogoUrl: string | null
    Wins: number | null
    Losses: number | null
  }

  export type TeamCountAggregateOutputType = {
    TeamID: number
    Key: number
    City: number
    Name: number
    stadium: number
    Conference: number
    Division: number
    inner_color: number
    outer_color: number
    WikipediaLogoUrl: number
    Wins: number
    Losses: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    TeamID?: true
    Wins?: true
    Losses?: true
  }

  export type TeamSumAggregateInputType = {
    TeamID?: true
    Wins?: true
    Losses?: true
  }

  export type TeamMinAggregateInputType = {
    TeamID?: true
    Key?: true
    City?: true
    Name?: true
    stadium?: true
    Conference?: true
    Division?: true
    inner_color?: true
    outer_color?: true
    WikipediaLogoUrl?: true
    Wins?: true
    Losses?: true
  }

  export type TeamMaxAggregateInputType = {
    TeamID?: true
    Key?: true
    City?: true
    Name?: true
    stadium?: true
    Conference?: true
    Division?: true
    inner_color?: true
    outer_color?: true
    WikipediaLogoUrl?: true
    Wins?: true
    Losses?: true
  }

  export type TeamCountAggregateInputType = {
    TeamID?: true
    Key?: true
    City?: true
    Name?: true
    stadium?: true
    Conference?: true
    Division?: true
    inner_color?: true
    outer_color?: true
    WikipediaLogoUrl?: true
    Wins?: true
    Losses?: true
    _all?: true
  }

  export type TeamAggregateArgs = {
    /**
     * Filter which Team to aggregate.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs = {
    where?: TeamWhereInput
    orderBy?: Enumerable<TeamOrderByWithAggregationInput>
    by: Array<TeamScalarFieldEnum>
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }


  export type TeamGroupByOutputType = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect = {
    TeamID?: boolean
    Key?: boolean
    City?: boolean
    Name?: boolean
    stadium?: boolean
    Conference?: boolean
    Division?: boolean
    inner_color?: boolean
    outer_color?: boolean
    WikipediaLogoUrl?: boolean
    Wins?: boolean
    Losses?: boolean
    home_games?: boolean | TeamHome_gamesArgs
    away_games?: boolean | TeamAway_gamesArgs
    team_game_statlines?: boolean | TeamTeam_game_statlinesArgs
    opponent_team_game_statlines?: boolean | TeamOpponent_team_game_statlinesArgs
    players?: boolean | TeamPlayersArgs
    statlines?: boolean | TeamStatlinesArgs
    opponent_team_statlines?: boolean | TeamOpponent_team_statlinesArgs
    _count?: boolean | TeamCountOutputTypeArgs
  }


  export type TeamInclude = {
    home_games?: boolean | TeamHome_gamesArgs
    away_games?: boolean | TeamAway_gamesArgs
    team_game_statlines?: boolean | TeamTeam_game_statlinesArgs
    opponent_team_game_statlines?: boolean | TeamOpponent_team_game_statlinesArgs
    players?: boolean | TeamPlayersArgs
    statlines?: boolean | TeamStatlinesArgs
    opponent_team_statlines?: boolean | TeamOpponent_team_statlinesArgs
    _count?: boolean | TeamCountOutputTypeArgs
  } 

  export type TeamGetPayload<S extends boolean | null | undefined | TeamArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Team :
    S extends undefined ? never :
    S extends { include: any } & (TeamArgs | TeamFindManyArgs)
    ? Team  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'home_games' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'away_games' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'team_game_statlines' ? Array < TeamStatlinesGetPayload<S['include'][P]>>  :
        P extends 'opponent_team_game_statlines' ? Array < TeamStatlinesGetPayload<S['include'][P]>>  :
        P extends 'players' ? Array < PlayerGetPayload<S['include'][P]>>  :
        P extends 'statlines' ? Array < StatlineGetPayload<S['include'][P]>>  :
        P extends 'opponent_team_statlines' ? Array < StatlineGetPayload<S['include'][P]>>  :
        P extends '_count' ? TeamCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TeamArgs | TeamFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'home_games' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'away_games' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'team_game_statlines' ? Array < TeamStatlinesGetPayload<S['select'][P]>>  :
        P extends 'opponent_team_game_statlines' ? Array < TeamStatlinesGetPayload<S['select'][P]>>  :
        P extends 'players' ? Array < PlayerGetPayload<S['select'][P]>>  :
        P extends 'statlines' ? Array < StatlineGetPayload<S['select'][P]>>  :
        P extends 'opponent_team_statlines' ? Array < StatlineGetPayload<S['select'][P]>>  :
        P extends '_count' ? TeamCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Team ? Team[P] : never
  } 
      : Team


  type TeamCountArgs = Merge<
    Omit<TeamFindManyArgs, 'select' | 'include'> & {
      select?: TeamCountAggregateInputType | true
    }
  >

  export interface TeamDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Team'> extends True ? Prisma__TeamClient<TeamGetPayload<T>> : Prisma__TeamClient<TeamGetPayload<T> | null, null>

    /**
     * Find one Team that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TeamFindUniqueOrThrowArgs>
    ): Prisma__TeamClient<TeamGetPayload<T>>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Team'> extends True ? Prisma__TeamClient<TeamGetPayload<T>> : Prisma__TeamClient<TeamGetPayload<T> | null, null>

    /**
     * Find the first Team that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TeamFindFirstOrThrowArgs>
    ): Prisma__TeamClient<TeamGetPayload<T>>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `TeamID`
     * const teamWithTeamIDOnly = await prisma.team.findMany({ select: { TeamID: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs>(
      args?: SelectSubset<T, TeamFindManyArgs>
    ): PrismaPromise<Array<TeamGetPayload<T>>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs>(
      args: SelectSubset<T, TeamCreateArgs>
    ): Prisma__TeamClient<TeamGetPayload<T>>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs>(
      args?: SelectSubset<T, TeamCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs>(
      args: SelectSubset<T, TeamDeleteArgs>
    ): Prisma__TeamClient<TeamGetPayload<T>>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs>(
      args: SelectSubset<T, TeamUpdateArgs>
    ): Prisma__TeamClient<TeamGetPayload<T>>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs>(
      args?: SelectSubset<T, TeamDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs>(
      args: SelectSubset<T, TeamUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs>(
      args: SelectSubset<T, TeamUpsertArgs>
    ): Prisma__TeamClient<TeamGetPayload<T>>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    home_games<T extends TeamHome_gamesArgs= {}>(args?: Subset<T, TeamHome_gamesArgs>): PrismaPromise<Array<GameGetPayload<T>>| Null>;

    away_games<T extends TeamAway_gamesArgs= {}>(args?: Subset<T, TeamAway_gamesArgs>): PrismaPromise<Array<GameGetPayload<T>>| Null>;

    team_game_statlines<T extends TeamTeam_game_statlinesArgs= {}>(args?: Subset<T, TeamTeam_game_statlinesArgs>): PrismaPromise<Array<TeamStatlinesGetPayload<T>>| Null>;

    opponent_team_game_statlines<T extends TeamOpponent_team_game_statlinesArgs= {}>(args?: Subset<T, TeamOpponent_team_game_statlinesArgs>): PrismaPromise<Array<TeamStatlinesGetPayload<T>>| Null>;

    players<T extends TeamPlayersArgs= {}>(args?: Subset<T, TeamPlayersArgs>): PrismaPromise<Array<PlayerGetPayload<T>>| Null>;

    statlines<T extends TeamStatlinesArgs= {}>(args?: Subset<T, TeamStatlinesArgs>): PrismaPromise<Array<StatlineGetPayload<T>>| Null>;

    opponent_team_statlines<T extends TeamOpponent_team_statlinesArgs= {}>(args?: Subset<T, TeamOpponent_team_statlinesArgs>): PrismaPromise<Array<StatlineGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Team base type for findUnique actions
   */
  export type TeamFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUnique
   */
  export interface TeamFindUniqueArgs extends TeamFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team base type for findFirst actions
   */
  export type TeamFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     * 
    **/
    distinct?: Enumerable<TeamScalarFieldEnum>
  }

  /**
   * Team findFirst
   */
  export interface TeamFindFirstArgs extends TeamFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     * 
    **/
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Teams to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team create
   */
  export type TeamCreateArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The data needed to create a Team.
     * 
    **/
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs = {
    /**
     * The data used to create many Teams.
     * 
    **/
    data: Enumerable<TeamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The data needed to update a Team.
     * 
    **/
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs = {
    /**
     * The data used to update Teams.
     * 
    **/
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     * 
    **/
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The filter to search for the Team to update in case it exists.
     * 
    **/
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     * 
    **/
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter which Team to delete.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs = {
    /**
     * Filter which Teams to delete
     * 
    **/
    where?: TeamWhereInput
  }


  /**
   * Team.home_games
   */
  export type TeamHome_gamesArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Team.away_games
   */
  export type TeamAway_gamesArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Team.team_game_statlines
   */
  export type TeamTeam_game_statlinesArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    where?: TeamStatlinesWhereInput
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    cursor?: TeamStatlinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TeamStatlinesScalarFieldEnum>
  }


  /**
   * Team.opponent_team_game_statlines
   */
  export type TeamOpponent_team_game_statlinesArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    where?: TeamStatlinesWhereInput
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    cursor?: TeamStatlinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TeamStatlinesScalarFieldEnum>
  }


  /**
   * Team.players
   */
  export type TeamPlayersArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    where?: PlayerWhereInput
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Team.statlines
   */
  export type TeamStatlinesArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    where?: StatlineWhereInput
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    cursor?: StatlineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }


  /**
   * Team.opponent_team_statlines
   */
  export type TeamOpponent_team_statlinesArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    where?: StatlineWhereInput
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    cursor?: StatlineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }


  /**
   * Team without action
   */
  export type TeamArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
  }



  /**
   * Model Game
   */


  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    GameID: number | null
    Season: number | null
    SeasonType: number | null
    AwayTeamID: number | null
    HomeTeamID: number | null
    AwayTeamScore: number | null
    HomeTeamScore: number | null
    CrewChiefID: number | null
    UmpireID: number | null
    RefereeID: number | null
  }

  export type GameSumAggregateOutputType = {
    GameID: number | null
    Season: number | null
    SeasonType: number | null
    AwayTeamID: number | null
    HomeTeamID: number | null
    AwayTeamScore: number | null
    HomeTeamScore: number | null
    CrewChiefID: number | null
    UmpireID: number | null
    RefereeID: number | null
  }

  export type GameMinAggregateOutputType = {
    GameID: number | null
    Season: number | null
    SeasonType: number | null
    Status: string | null
    Channel: string | null
    Day: Date | null
    nba_day: string | null
    DateTime: Date | null
    AwayTeamID: number | null
    HomeTeamID: number | null
    stadium: string | null
    city: string | null
    AwayTeamScore: number | null
    HomeTeamScore: number | null
    Quarter: string | null
    TimeRemainingMinutes: string | null
    TimeRemainingSeconds: string | null
    CrewChiefID: number | null
    UmpireID: number | null
    RefereeID: number | null
  }

  export type GameMaxAggregateOutputType = {
    GameID: number | null
    Season: number | null
    SeasonType: number | null
    Status: string | null
    Channel: string | null
    Day: Date | null
    nba_day: string | null
    DateTime: Date | null
    AwayTeamID: number | null
    HomeTeamID: number | null
    stadium: string | null
    city: string | null
    AwayTeamScore: number | null
    HomeTeamScore: number | null
    Quarter: string | null
    TimeRemainingMinutes: string | null
    TimeRemainingSeconds: string | null
    CrewChiefID: number | null
    UmpireID: number | null
    RefereeID: number | null
  }

  export type GameCountAggregateOutputType = {
    GameID: number
    Season: number
    SeasonType: number
    Status: number
    Channel: number
    Day: number
    nba_day: number
    DateTime: number
    AwayTeamID: number
    HomeTeamID: number
    stadium: number
    city: number
    AwayTeamScore: number
    HomeTeamScore: number
    Quarter: number
    TimeRemainingMinutes: number
    TimeRemainingSeconds: number
    Quarters: number
    CrewChiefID: number
    UmpireID: number
    RefereeID: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    GameID?: true
    Season?: true
    SeasonType?: true
    AwayTeamID?: true
    HomeTeamID?: true
    AwayTeamScore?: true
    HomeTeamScore?: true
    CrewChiefID?: true
    UmpireID?: true
    RefereeID?: true
  }

  export type GameSumAggregateInputType = {
    GameID?: true
    Season?: true
    SeasonType?: true
    AwayTeamID?: true
    HomeTeamID?: true
    AwayTeamScore?: true
    HomeTeamScore?: true
    CrewChiefID?: true
    UmpireID?: true
    RefereeID?: true
  }

  export type GameMinAggregateInputType = {
    GameID?: true
    Season?: true
    SeasonType?: true
    Status?: true
    Channel?: true
    Day?: true
    nba_day?: true
    DateTime?: true
    AwayTeamID?: true
    HomeTeamID?: true
    stadium?: true
    city?: true
    AwayTeamScore?: true
    HomeTeamScore?: true
    Quarter?: true
    TimeRemainingMinutes?: true
    TimeRemainingSeconds?: true
    CrewChiefID?: true
    UmpireID?: true
    RefereeID?: true
  }

  export type GameMaxAggregateInputType = {
    GameID?: true
    Season?: true
    SeasonType?: true
    Status?: true
    Channel?: true
    Day?: true
    nba_day?: true
    DateTime?: true
    AwayTeamID?: true
    HomeTeamID?: true
    stadium?: true
    city?: true
    AwayTeamScore?: true
    HomeTeamScore?: true
    Quarter?: true
    TimeRemainingMinutes?: true
    TimeRemainingSeconds?: true
    CrewChiefID?: true
    UmpireID?: true
    RefereeID?: true
  }

  export type GameCountAggregateInputType = {
    GameID?: true
    Season?: true
    SeasonType?: true
    Status?: true
    Channel?: true
    Day?: true
    nba_day?: true
    DateTime?: true
    AwayTeamID?: true
    HomeTeamID?: true
    stadium?: true
    city?: true
    AwayTeamScore?: true
    HomeTeamScore?: true
    Quarter?: true
    TimeRemainingMinutes?: true
    TimeRemainingSeconds?: true
    Quarters?: true
    CrewChiefID?: true
    UmpireID?: true
    RefereeID?: true
    _all?: true
  }

  export type GameAggregateArgs = {
    /**
     * Filter which Game to aggregate.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs = {
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithAggregationInput>
    by: Array<GameScalarFieldEnum>
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }


  export type GameGroupByOutputType = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date
    nba_day: string
    DateTime: Date
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore: number | null
    HomeTeamScore: number | null
    Quarter: string | null
    TimeRemainingMinutes: string | null
    TimeRemainingSeconds: string | null
    Quarters: JsonValue | null
    CrewChiefID: number | null
    UmpireID: number | null
    RefereeID: number | null
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect = {
    GameID?: boolean
    Season?: boolean
    SeasonType?: boolean
    Status?: boolean
    Channel?: boolean
    Day?: boolean
    nba_day?: boolean
    DateTime?: boolean
    AwayTeamID?: boolean
    HomeTeamID?: boolean
    away_team?: boolean | TeamArgs
    home_team?: boolean | TeamArgs
    stadium?: boolean
    city?: boolean
    AwayTeamScore?: boolean
    HomeTeamScore?: boolean
    Quarter?: boolean
    TimeRemainingMinutes?: boolean
    TimeRemainingSeconds?: boolean
    Quarters?: boolean
    CrewChiefID?: boolean
    crewchief?: boolean | RefereeArgs
    UmpireID?: boolean
    umpire?: boolean | RefereeArgs
    RefereeID?: boolean
    referee?: boolean | RefereeArgs
    team_statlines?: boolean | GameTeam_statlinesArgs
    statlines?: boolean | GameStatlinesArgs
    _count?: boolean | GameCountOutputTypeArgs
  }


  export type GameInclude = {
    away_team?: boolean | TeamArgs
    home_team?: boolean | TeamArgs
    crewchief?: boolean | RefereeArgs
    umpire?: boolean | RefereeArgs
    referee?: boolean | RefereeArgs
    team_statlines?: boolean | GameTeam_statlinesArgs
    statlines?: boolean | GameStatlinesArgs
    _count?: boolean | GameCountOutputTypeArgs
  } 

  export type GameGetPayload<S extends boolean | null | undefined | GameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Game :
    S extends undefined ? never :
    S extends { include: any } & (GameArgs | GameFindManyArgs)
    ? Game  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'away_team' ? TeamGetPayload<S['include'][P]> :
        P extends 'home_team' ? TeamGetPayload<S['include'][P]> :
        P extends 'crewchief' ? RefereeGetPayload<S['include'][P]> | null :
        P extends 'umpire' ? RefereeGetPayload<S['include'][P]> | null :
        P extends 'referee' ? RefereeGetPayload<S['include'][P]> | null :
        P extends 'team_statlines' ? Array < TeamStatlinesGetPayload<S['include'][P]>>  :
        P extends 'statlines' ? Array < StatlineGetPayload<S['include'][P]>>  :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GameArgs | GameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'away_team' ? TeamGetPayload<S['select'][P]> :
        P extends 'home_team' ? TeamGetPayload<S['select'][P]> :
        P extends 'crewchief' ? RefereeGetPayload<S['select'][P]> | null :
        P extends 'umpire' ? RefereeGetPayload<S['select'][P]> | null :
        P extends 'referee' ? RefereeGetPayload<S['select'][P]> | null :
        P extends 'team_statlines' ? Array < TeamStatlinesGetPayload<S['select'][P]>>  :
        P extends 'statlines' ? Array < StatlineGetPayload<S['select'][P]>>  :
        P extends '_count' ? GameCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Game ? Game[P] : never
  } 
      : Game


  type GameCountArgs = Merge<
    Omit<GameFindManyArgs, 'select' | 'include'> & {
      select?: GameCountAggregateInputType | true
    }
  >

  export interface GameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameFindUniqueOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find the first Game that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameFindFirstOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `GameID`
     * const gameWithGameIDOnly = await prisma.game.findMany({ select: { GameID: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs>(
      args?: SelectSubset<T, GameFindManyArgs>
    ): PrismaPromise<Array<GameGetPayload<T>>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs>(
      args: SelectSubset<T, GameCreateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs>(
      args?: SelectSubset<T, GameCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs>(
      args: SelectSubset<T, GameDeleteArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs>(
      args: SelectSubset<T, GameUpdateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs>(
      args?: SelectSubset<T, GameDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs>(
      args: SelectSubset<T, GameUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs>(
      args: SelectSubset<T, GameUpsertArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    away_team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    home_team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    crewchief<T extends RefereeArgs= {}>(args?: Subset<T, RefereeArgs>): Prisma__RefereeClient<RefereeGetPayload<T> | Null>;

    umpire<T extends RefereeArgs= {}>(args?: Subset<T, RefereeArgs>): Prisma__RefereeClient<RefereeGetPayload<T> | Null>;

    referee<T extends RefereeArgs= {}>(args?: Subset<T, RefereeArgs>): Prisma__RefereeClient<RefereeGetPayload<T> | Null>;

    team_statlines<T extends GameTeam_statlinesArgs= {}>(args?: Subset<T, GameTeam_statlinesArgs>): PrismaPromise<Array<TeamStatlinesGetPayload<T>>| Null>;

    statlines<T extends GameStatlinesArgs= {}>(args?: Subset<T, GameStatlinesArgs>): PrismaPromise<Array<StatlineGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Game base type for findUnique actions
   */
  export type GameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     * 
    **/
    where: GameWhereUniqueInput
  }

  /**
   * Game findUnique
   */
  export interface GameFindUniqueArgs extends GameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     * 
    **/
    where: GameWhereUniqueInput
  }


  /**
   * Game base type for findFirst actions
   */
  export type GameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     * 
    **/
    distinct?: Enumerable<GameScalarFieldEnum>
  }

  /**
   * Game findFirst
   */
  export interface GameFindFirstArgs extends GameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter, which Game to fetch.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     * 
    **/
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter, which Games to fetch.
     * 
    **/
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     * 
    **/
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     * 
    **/
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game create
   */
  export type GameCreateArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * The data needed to create a Game.
     * 
    **/
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs = {
    /**
     * The data used to create many Games.
     * 
    **/
    data: Enumerable<GameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * The data needed to update a Game.
     * 
    **/
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     * 
    **/
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs = {
    /**
     * The data used to update Games.
     * 
    **/
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     * 
    **/
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * The filter to search for the Game to update in case it exists.
     * 
    **/
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     * 
    **/
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    /**
     * Filter which Game to delete.
     * 
    **/
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs = {
    /**
     * Filter which Games to delete
     * 
    **/
    where?: GameWhereInput
  }


  /**
   * Game.team_statlines
   */
  export type GameTeam_statlinesArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    where?: TeamStatlinesWhereInput
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    cursor?: TeamStatlinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TeamStatlinesScalarFieldEnum>
  }


  /**
   * Game.statlines
   */
  export type GameStatlinesArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    where?: StatlineWhereInput
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    cursor?: StatlineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }


  /**
   * Game without action
   */
  export type GameArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
  }



  /**
   * Model TeamStatlines
   */


  export type AggregateTeamStatlines = {
    _count: TeamStatlinesCountAggregateOutputType | null
    _avg: TeamStatlinesAvgAggregateOutputType | null
    _sum: TeamStatlinesSumAggregateOutputType | null
    _min: TeamStatlinesMinAggregateOutputType | null
    _max: TeamStatlinesMaxAggregateOutputType | null
  }

  export type TeamStatlinesAvgAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    Season: number | null
    Wins: number | null
    Losses: number | null
    GameID: number | null
    OpponentID: number | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
  }

  export type TeamStatlinesSumAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    Season: number | null
    Wins: number | null
    Losses: number | null
    GameID: number | null
    OpponentID: number | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
  }

  export type TeamStatlinesMinAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    Season: number | null
    Name: string | null
    Team: string | null
    Wins: number | null
    Losses: number | null
    GameID: number | null
    OpponentID: number | null
    Opponent: string | null
    HomeOrAway: string | null
    IsGameOver: boolean | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
  }

  export type TeamStatlinesMaxAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    Season: number | null
    Name: string | null
    Team: string | null
    Wins: number | null
    Losses: number | null
    GameID: number | null
    OpponentID: number | null
    Opponent: string | null
    HomeOrAway: string | null
    IsGameOver: boolean | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
  }

  export type TeamStatlinesCountAggregateOutputType = {
    StatID: number
    TeamID: number
    Season: number
    Name: number
    Team: number
    Wins: number
    Losses: number
    GameID: number
    OpponentID: number
    Opponent: number
    HomeOrAway: number
    IsGameOver: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: number
    EffectiveFieldGoalsPercentage: number
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: number
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: number
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: number
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: number
    FantasyPointsFanDuel: number
    FantasyPointsDraftKings: number
    FantasyPointsYahoo: number
    _all: number
  }


  export type TeamStatlinesAvgAggregateInputType = {
    StatID?: true
    TeamID?: true
    Season?: true
    Wins?: true
    Losses?: true
    GameID?: true
    OpponentID?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
  }

  export type TeamStatlinesSumAggregateInputType = {
    StatID?: true
    TeamID?: true
    Season?: true
    Wins?: true
    Losses?: true
    GameID?: true
    OpponentID?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
  }

  export type TeamStatlinesMinAggregateInputType = {
    StatID?: true
    TeamID?: true
    Season?: true
    Name?: true
    Team?: true
    Wins?: true
    Losses?: true
    GameID?: true
    OpponentID?: true
    Opponent?: true
    HomeOrAway?: true
    IsGameOver?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
  }

  export type TeamStatlinesMaxAggregateInputType = {
    StatID?: true
    TeamID?: true
    Season?: true
    Name?: true
    Team?: true
    Wins?: true
    Losses?: true
    GameID?: true
    OpponentID?: true
    Opponent?: true
    HomeOrAway?: true
    IsGameOver?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
  }

  export type TeamStatlinesCountAggregateInputType = {
    StatID?: true
    TeamID?: true
    Season?: true
    Name?: true
    Team?: true
    Wins?: true
    Losses?: true
    GameID?: true
    OpponentID?: true
    Opponent?: true
    HomeOrAway?: true
    IsGameOver?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    _all?: true
  }

  export type TeamStatlinesAggregateArgs = {
    /**
     * Filter which TeamStatlines to aggregate.
     * 
    **/
    where?: TeamStatlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStatlines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeamStatlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStatlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStatlines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamStatlines
    **/
    _count?: true | TeamStatlinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamStatlinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamStatlinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamStatlinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamStatlinesMaxAggregateInputType
  }

  export type GetTeamStatlinesAggregateType<T extends TeamStatlinesAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamStatlines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamStatlines[P]>
      : GetScalarType<T[P], AggregateTeamStatlines[P]>
  }




  export type TeamStatlinesGroupByArgs = {
    where?: TeamStatlinesWhereInput
    orderBy?: Enumerable<TeamStatlinesOrderByWithAggregationInput>
    by: Array<TeamStatlinesScalarFieldEnum>
    having?: TeamStatlinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamStatlinesCountAggregateInputType | true
    _avg?: TeamStatlinesAvgAggregateInputType
    _sum?: TeamStatlinesSumAggregateInputType
    _min?: TeamStatlinesMinAggregateInputType
    _max?: TeamStatlinesMaxAggregateInputType
  }


  export type TeamStatlinesGroupByOutputType = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal
    EffectiveFieldGoalsPercentage: Decimal
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal
    FantasyPointsFanDuel: Decimal
    FantasyPointsDraftKings: Decimal
    FantasyPointsYahoo: Decimal
    _count: TeamStatlinesCountAggregateOutputType | null
    _avg: TeamStatlinesAvgAggregateOutputType | null
    _sum: TeamStatlinesSumAggregateOutputType | null
    _min: TeamStatlinesMinAggregateOutputType | null
    _max: TeamStatlinesMaxAggregateOutputType | null
  }

  type GetTeamStatlinesGroupByPayload<T extends TeamStatlinesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeamStatlinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamStatlinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamStatlinesGroupByOutputType[P]>
            : GetScalarType<T[P], TeamStatlinesGroupByOutputType[P]>
        }
      >
    >


  export type TeamStatlinesSelect = {
    StatID?: boolean
    TeamID?: boolean
    team?: boolean | TeamArgs
    Season?: boolean
    Name?: boolean
    Team?: boolean
    Wins?: boolean
    Losses?: boolean
    GameID?: boolean
    game?: boolean | GameArgs
    OpponentID?: boolean
    opponent_team?: boolean | TeamArgs
    Opponent?: boolean
    HomeOrAway?: boolean
    IsGameOver?: boolean
    FieldGoalsMade?: boolean
    FieldGoalsAttempted?: boolean
    FieldGoalsPercentage?: boolean
    EffectiveFieldGoalsPercentage?: boolean
    TwoPointersMade?: boolean
    TwoPointersAttempted?: boolean
    TwoPointersPercentage?: boolean
    ThreePointersMade?: boolean
    ThreePointersAttempted?: boolean
    ThreePointersPercentage?: boolean
    FreeThrowsMade?: boolean
    FreeThrowsAttempted?: boolean
    FreeThrowsPercentage?: boolean
    OffensiveRebounds?: boolean
    DefensiveRebounds?: boolean
    Rebounds?: boolean
    Assists?: boolean
    Steals?: boolean
    BlockedShots?: boolean
    Turnovers?: boolean
    PersonalFouls?: boolean
    Points?: boolean
    TrueShootingPercentage?: boolean
    FantasyPointsFanDuel?: boolean
    FantasyPointsDraftKings?: boolean
    FantasyPointsYahoo?: boolean
  }


  export type TeamStatlinesInclude = {
    team?: boolean | TeamArgs
    game?: boolean | GameArgs
    opponent_team?: boolean | TeamArgs
  } 

  export type TeamStatlinesGetPayload<S extends boolean | null | undefined | TeamStatlinesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TeamStatlines :
    S extends undefined ? never :
    S extends { include: any } & (TeamStatlinesArgs | TeamStatlinesFindManyArgs)
    ? TeamStatlines  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'team' ? TeamGetPayload<S['include'][P]> :
        P extends 'game' ? GameGetPayload<S['include'][P]> :
        P extends 'opponent_team' ? TeamGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TeamStatlinesArgs | TeamStatlinesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'team' ? TeamGetPayload<S['select'][P]> :
        P extends 'game' ? GameGetPayload<S['select'][P]> :
        P extends 'opponent_team' ? TeamGetPayload<S['select'][P]> :  P extends keyof TeamStatlines ? TeamStatlines[P] : never
  } 
      : TeamStatlines


  type TeamStatlinesCountArgs = Merge<
    Omit<TeamStatlinesFindManyArgs, 'select' | 'include'> & {
      select?: TeamStatlinesCountAggregateInputType | true
    }
  >

  export interface TeamStatlinesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one TeamStatlines that matches the filter.
     * @param {TeamStatlinesFindUniqueArgs} args - Arguments to find a TeamStatlines
     * @example
     * // Get one TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamStatlinesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamStatlinesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TeamStatlines'> extends True ? Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>> : Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T> | null, null>

    /**
     * Find one TeamStatlines that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeamStatlinesFindUniqueOrThrowArgs} args - Arguments to find a TeamStatlines
     * @example
     * // Get one TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamStatlinesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TeamStatlinesFindUniqueOrThrowArgs>
    ): Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>>

    /**
     * Find the first TeamStatlines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesFindFirstArgs} args - Arguments to find a TeamStatlines
     * @example
     * // Get one TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamStatlinesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamStatlinesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TeamStatlines'> extends True ? Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>> : Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T> | null, null>

    /**
     * Find the first TeamStatlines that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesFindFirstOrThrowArgs} args - Arguments to find a TeamStatlines
     * @example
     * // Get one TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamStatlinesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TeamStatlinesFindFirstOrThrowArgs>
    ): Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>>

    /**
     * Find zero or more TeamStatlines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.findMany()
     * 
     * // Get first 10 TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.findMany({ take: 10 })
     * 
     * // Only select the `StatID`
     * const teamStatlinesWithStatIDOnly = await prisma.teamStatlines.findMany({ select: { StatID: true } })
     * 
    **/
    findMany<T extends TeamStatlinesFindManyArgs>(
      args?: SelectSubset<T, TeamStatlinesFindManyArgs>
    ): PrismaPromise<Array<TeamStatlinesGetPayload<T>>>

    /**
     * Create a TeamStatlines.
     * @param {TeamStatlinesCreateArgs} args - Arguments to create a TeamStatlines.
     * @example
     * // Create one TeamStatlines
     * const TeamStatlines = await prisma.teamStatlines.create({
     *   data: {
     *     // ... data to create a TeamStatlines
     *   }
     * })
     * 
    **/
    create<T extends TeamStatlinesCreateArgs>(
      args: SelectSubset<T, TeamStatlinesCreateArgs>
    ): Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>>

    /**
     * Create many TeamStatlines.
     *     @param {TeamStatlinesCreateManyArgs} args - Arguments to create many TeamStatlines.
     *     @example
     *     // Create many TeamStatlines
     *     const teamStatlines = await prisma.teamStatlines.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamStatlinesCreateManyArgs>(
      args?: SelectSubset<T, TeamStatlinesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TeamStatlines.
     * @param {TeamStatlinesDeleteArgs} args - Arguments to delete one TeamStatlines.
     * @example
     * // Delete one TeamStatlines
     * const TeamStatlines = await prisma.teamStatlines.delete({
     *   where: {
     *     // ... filter to delete one TeamStatlines
     *   }
     * })
     * 
    **/
    delete<T extends TeamStatlinesDeleteArgs>(
      args: SelectSubset<T, TeamStatlinesDeleteArgs>
    ): Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>>

    /**
     * Update one TeamStatlines.
     * @param {TeamStatlinesUpdateArgs} args - Arguments to update one TeamStatlines.
     * @example
     * // Update one TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamStatlinesUpdateArgs>(
      args: SelectSubset<T, TeamStatlinesUpdateArgs>
    ): Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>>

    /**
     * Delete zero or more TeamStatlines.
     * @param {TeamStatlinesDeleteManyArgs} args - Arguments to filter TeamStatlines to delete.
     * @example
     * // Delete a few TeamStatlines
     * const { count } = await prisma.teamStatlines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamStatlinesDeleteManyArgs>(
      args?: SelectSubset<T, TeamStatlinesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamStatlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamStatlinesUpdateManyArgs>(
      args: SelectSubset<T, TeamStatlinesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamStatlines.
     * @param {TeamStatlinesUpsertArgs} args - Arguments to update or create a TeamStatlines.
     * @example
     * // Update or create a TeamStatlines
     * const teamStatlines = await prisma.teamStatlines.upsert({
     *   create: {
     *     // ... data to create a TeamStatlines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamStatlines we want to update
     *   }
     * })
    **/
    upsert<T extends TeamStatlinesUpsertArgs>(
      args: SelectSubset<T, TeamStatlinesUpsertArgs>
    ): Prisma__TeamStatlinesClient<TeamStatlinesGetPayload<T>>

    /**
     * Count the number of TeamStatlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesCountArgs} args - Arguments to filter TeamStatlines to count.
     * @example
     * // Count the number of TeamStatlines
     * const count = await prisma.teamStatlines.count({
     *   where: {
     *     // ... the filter for the TeamStatlines we want to count
     *   }
     * })
    **/
    count<T extends TeamStatlinesCountArgs>(
      args?: Subset<T, TeamStatlinesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamStatlinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamStatlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamStatlinesAggregateArgs>(args: Subset<T, TeamStatlinesAggregateArgs>): PrismaPromise<GetTeamStatlinesAggregateType<T>>

    /**
     * Group by TeamStatlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatlinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamStatlinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamStatlinesGroupByArgs['orderBy'] }
        : { orderBy?: TeamStatlinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamStatlinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamStatlinesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamStatlines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamStatlinesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    game<T extends GameArgs= {}>(args?: Subset<T, GameArgs>): Prisma__GameClient<GameGetPayload<T> | Null>;

    opponent_team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TeamStatlines base type for findUnique actions
   */
  export type TeamStatlinesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * Filter, which TeamStatlines to fetch.
     * 
    **/
    where: TeamStatlinesWhereUniqueInput
  }

  /**
   * TeamStatlines findUnique
   */
  export interface TeamStatlinesFindUniqueArgs extends TeamStatlinesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TeamStatlines findUniqueOrThrow
   */
  export type TeamStatlinesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * Filter, which TeamStatlines to fetch.
     * 
    **/
    where: TeamStatlinesWhereUniqueInput
  }


  /**
   * TeamStatlines base type for findFirst actions
   */
  export type TeamStatlinesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * Filter, which TeamStatlines to fetch.
     * 
    **/
    where?: TeamStatlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStatlines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamStatlines.
     * 
    **/
    cursor?: TeamStatlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStatlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStatlines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamStatlines.
     * 
    **/
    distinct?: Enumerable<TeamStatlinesScalarFieldEnum>
  }

  /**
   * TeamStatlines findFirst
   */
  export interface TeamStatlinesFindFirstArgs extends TeamStatlinesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TeamStatlines findFirstOrThrow
   */
  export type TeamStatlinesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * Filter, which TeamStatlines to fetch.
     * 
    **/
    where?: TeamStatlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStatlines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamStatlines.
     * 
    **/
    cursor?: TeamStatlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStatlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStatlines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamStatlines.
     * 
    **/
    distinct?: Enumerable<TeamStatlinesScalarFieldEnum>
  }


  /**
   * TeamStatlines findMany
   */
  export type TeamStatlinesFindManyArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * Filter, which TeamStatlines to fetch.
     * 
    **/
    where?: TeamStatlinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStatlines to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamStatlinesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamStatlines.
     * 
    **/
    cursor?: TeamStatlinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStatlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStatlines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeamStatlinesScalarFieldEnum>
  }


  /**
   * TeamStatlines create
   */
  export type TeamStatlinesCreateArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * The data needed to create a TeamStatlines.
     * 
    **/
    data: XOR<TeamStatlinesCreateInput, TeamStatlinesUncheckedCreateInput>
  }


  /**
   * TeamStatlines createMany
   */
  export type TeamStatlinesCreateManyArgs = {
    /**
     * The data used to create many TeamStatlines.
     * 
    **/
    data: Enumerable<TeamStatlinesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TeamStatlines update
   */
  export type TeamStatlinesUpdateArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * The data needed to update a TeamStatlines.
     * 
    **/
    data: XOR<TeamStatlinesUpdateInput, TeamStatlinesUncheckedUpdateInput>
    /**
     * Choose, which TeamStatlines to update.
     * 
    **/
    where: TeamStatlinesWhereUniqueInput
  }


  /**
   * TeamStatlines updateMany
   */
  export type TeamStatlinesUpdateManyArgs = {
    /**
     * The data used to update TeamStatlines.
     * 
    **/
    data: XOR<TeamStatlinesUpdateManyMutationInput, TeamStatlinesUncheckedUpdateManyInput>
    /**
     * Filter which TeamStatlines to update
     * 
    **/
    where?: TeamStatlinesWhereInput
  }


  /**
   * TeamStatlines upsert
   */
  export type TeamStatlinesUpsertArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * The filter to search for the TeamStatlines to update in case it exists.
     * 
    **/
    where: TeamStatlinesWhereUniqueInput
    /**
     * In case the TeamStatlines found by the `where` argument doesn't exist, create a new TeamStatlines with this data.
     * 
    **/
    create: XOR<TeamStatlinesCreateInput, TeamStatlinesUncheckedCreateInput>
    /**
     * In case the TeamStatlines was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeamStatlinesUpdateInput, TeamStatlinesUncheckedUpdateInput>
  }


  /**
   * TeamStatlines delete
   */
  export type TeamStatlinesDeleteArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
    /**
     * Filter which TeamStatlines to delete.
     * 
    **/
    where: TeamStatlinesWhereUniqueInput
  }


  /**
   * TeamStatlines deleteMany
   */
  export type TeamStatlinesDeleteManyArgs = {
    /**
     * Filter which TeamStatlines to delete
     * 
    **/
    where?: TeamStatlinesWhereInput
  }


  /**
   * TeamStatlines without action
   */
  export type TeamStatlinesArgs = {
    /**
     * Select specific fields to fetch from the TeamStatlines
     * 
    **/
    select?: TeamStatlinesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamStatlinesInclude | null
  }



  /**
   * Model Player
   */


  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    PlayerID: number | null
    TeamID: number | null
    Jersey: number | null
    Height: number | null
    Weight: number | null
    RotoworldPlayerID: number | null
    RotoWirePlayerID: number | null
    FantasyAlarmPlayerID: number | null
    FanDuelPlayerID: number | null
    DraftKingsPlayerID: number | null
    YahooPlayerID: number | null
    DepthChartOrder: number | null
    UsaTodayPlayerID: number | null
    NbaDotComPlayerID: number | null
  }

  export type PlayerSumAggregateOutputType = {
    PlayerID: number | null
    TeamID: number | null
    Jersey: number | null
    Height: number | null
    Weight: number | null
    RotoworldPlayerID: number | null
    RotoWirePlayerID: number | null
    FantasyAlarmPlayerID: number | null
    FanDuelPlayerID: number | null
    DraftKingsPlayerID: number | null
    YahooPlayerID: number | null
    DepthChartOrder: number | null
    UsaTodayPlayerID: number | null
    NbaDotComPlayerID: number | null
  }

  export type PlayerMinAggregateOutputType = {
    PlayerID: number | null
    TeamID: number | null
    Jersey: number | null
    PositionCategory: string | null
    Position: string | null
    FirstName: string | null
    LastName: string | null
    s_name: string | null
    Height: number | null
    Weight: number | null
    BirthDate: string | null
    BirthCity: string | null
    BirthState: string | null
    BirthCountry: string | null
    HighSchool: string | null
    College: string | null
    PhotoUrl: string | null
    SportRadarPlayerID: string | null
    RotoworldPlayerID: number | null
    RotoWirePlayerID: number | null
    FantasyAlarmPlayerID: number | null
    InjuryStatus: string | null
    InjuryBodyPart: string | null
    InjuryStartDate: string | null
    InjuryNotes: string | null
    FanDuelPlayerID: number | null
    DraftKingsPlayerID: number | null
    YahooPlayerID: number | null
    FanDuelName: string | null
    DraftKingsName: string | null
    YahooName: string | null
    DepthChartPosition: string | null
    DepthChartOrder: number | null
    UsaTodayPlayerID: number | null
    UsaTodayHeadshotUrl: string | null
    UsaTodayHeadshotNoBackgroundUrl: string | null
    UsaTodayHeadshotUpdated: string | null
    UsaTodayHeadshotNoBackgroundUpdated: string | null
    NbaDotComPlayerID: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    PlayerID: number | null
    TeamID: number | null
    Jersey: number | null
    PositionCategory: string | null
    Position: string | null
    FirstName: string | null
    LastName: string | null
    s_name: string | null
    Height: number | null
    Weight: number | null
    BirthDate: string | null
    BirthCity: string | null
    BirthState: string | null
    BirthCountry: string | null
    HighSchool: string | null
    College: string | null
    PhotoUrl: string | null
    SportRadarPlayerID: string | null
    RotoworldPlayerID: number | null
    RotoWirePlayerID: number | null
    FantasyAlarmPlayerID: number | null
    InjuryStatus: string | null
    InjuryBodyPart: string | null
    InjuryStartDate: string | null
    InjuryNotes: string | null
    FanDuelPlayerID: number | null
    DraftKingsPlayerID: number | null
    YahooPlayerID: number | null
    FanDuelName: string | null
    DraftKingsName: string | null
    YahooName: string | null
    DepthChartPosition: string | null
    DepthChartOrder: number | null
    UsaTodayPlayerID: number | null
    UsaTodayHeadshotUrl: string | null
    UsaTodayHeadshotNoBackgroundUrl: string | null
    UsaTodayHeadshotUpdated: string | null
    UsaTodayHeadshotNoBackgroundUpdated: string | null
    NbaDotComPlayerID: number | null
  }

  export type PlayerCountAggregateOutputType = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: number
    Position: number
    FirstName: number
    LastName: number
    s_name: number
    Height: number
    Weight: number
    BirthDate: number
    BirthCity: number
    BirthState: number
    BirthCountry: number
    HighSchool: number
    College: number
    PhotoUrl: number
    SportRadarPlayerID: number
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus: number
    InjuryBodyPart: number
    InjuryStartDate: number
    InjuryNotes: number
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: number
    DraftKingsName: number
    YahooName: number
    DepthChartPosition: number
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: number
    UsaTodayHeadshotNoBackgroundUrl: number
    UsaTodayHeadshotUpdated: number
    UsaTodayHeadshotNoBackgroundUpdated: number
    NbaDotComPlayerID: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    PlayerID?: true
    TeamID?: true
    Jersey?: true
    Height?: true
    Weight?: true
    RotoworldPlayerID?: true
    RotoWirePlayerID?: true
    FantasyAlarmPlayerID?: true
    FanDuelPlayerID?: true
    DraftKingsPlayerID?: true
    YahooPlayerID?: true
    DepthChartOrder?: true
    UsaTodayPlayerID?: true
    NbaDotComPlayerID?: true
  }

  export type PlayerSumAggregateInputType = {
    PlayerID?: true
    TeamID?: true
    Jersey?: true
    Height?: true
    Weight?: true
    RotoworldPlayerID?: true
    RotoWirePlayerID?: true
    FantasyAlarmPlayerID?: true
    FanDuelPlayerID?: true
    DraftKingsPlayerID?: true
    YahooPlayerID?: true
    DepthChartOrder?: true
    UsaTodayPlayerID?: true
    NbaDotComPlayerID?: true
  }

  export type PlayerMinAggregateInputType = {
    PlayerID?: true
    TeamID?: true
    Jersey?: true
    PositionCategory?: true
    Position?: true
    FirstName?: true
    LastName?: true
    s_name?: true
    Height?: true
    Weight?: true
    BirthDate?: true
    BirthCity?: true
    BirthState?: true
    BirthCountry?: true
    HighSchool?: true
    College?: true
    PhotoUrl?: true
    SportRadarPlayerID?: true
    RotoworldPlayerID?: true
    RotoWirePlayerID?: true
    FantasyAlarmPlayerID?: true
    InjuryStatus?: true
    InjuryBodyPart?: true
    InjuryStartDate?: true
    InjuryNotes?: true
    FanDuelPlayerID?: true
    DraftKingsPlayerID?: true
    YahooPlayerID?: true
    FanDuelName?: true
    DraftKingsName?: true
    YahooName?: true
    DepthChartPosition?: true
    DepthChartOrder?: true
    UsaTodayPlayerID?: true
    UsaTodayHeadshotUrl?: true
    UsaTodayHeadshotNoBackgroundUrl?: true
    UsaTodayHeadshotUpdated?: true
    UsaTodayHeadshotNoBackgroundUpdated?: true
    NbaDotComPlayerID?: true
  }

  export type PlayerMaxAggregateInputType = {
    PlayerID?: true
    TeamID?: true
    Jersey?: true
    PositionCategory?: true
    Position?: true
    FirstName?: true
    LastName?: true
    s_name?: true
    Height?: true
    Weight?: true
    BirthDate?: true
    BirthCity?: true
    BirthState?: true
    BirthCountry?: true
    HighSchool?: true
    College?: true
    PhotoUrl?: true
    SportRadarPlayerID?: true
    RotoworldPlayerID?: true
    RotoWirePlayerID?: true
    FantasyAlarmPlayerID?: true
    InjuryStatus?: true
    InjuryBodyPart?: true
    InjuryStartDate?: true
    InjuryNotes?: true
    FanDuelPlayerID?: true
    DraftKingsPlayerID?: true
    YahooPlayerID?: true
    FanDuelName?: true
    DraftKingsName?: true
    YahooName?: true
    DepthChartPosition?: true
    DepthChartOrder?: true
    UsaTodayPlayerID?: true
    UsaTodayHeadshotUrl?: true
    UsaTodayHeadshotNoBackgroundUrl?: true
    UsaTodayHeadshotUpdated?: true
    UsaTodayHeadshotNoBackgroundUpdated?: true
    NbaDotComPlayerID?: true
  }

  export type PlayerCountAggregateInputType = {
    PlayerID?: true
    TeamID?: true
    Jersey?: true
    PositionCategory?: true
    Position?: true
    FirstName?: true
    LastName?: true
    s_name?: true
    Height?: true
    Weight?: true
    BirthDate?: true
    BirthCity?: true
    BirthState?: true
    BirthCountry?: true
    HighSchool?: true
    College?: true
    PhotoUrl?: true
    SportRadarPlayerID?: true
    RotoworldPlayerID?: true
    RotoWirePlayerID?: true
    FantasyAlarmPlayerID?: true
    InjuryStatus?: true
    InjuryBodyPart?: true
    InjuryStartDate?: true
    InjuryNotes?: true
    FanDuelPlayerID?: true
    DraftKingsPlayerID?: true
    YahooPlayerID?: true
    FanDuelName?: true
    DraftKingsName?: true
    YahooName?: true
    DepthChartPosition?: true
    DepthChartOrder?: true
    UsaTodayPlayerID?: true
    UsaTodayHeadshotUrl?: true
    UsaTodayHeadshotNoBackgroundUrl?: true
    UsaTodayHeadshotUpdated?: true
    UsaTodayHeadshotNoBackgroundUpdated?: true
    NbaDotComPlayerID?: true
    _all?: true
  }

  export type PlayerAggregateArgs = {
    /**
     * Filter which Player to aggregate.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs = {
    where?: PlayerWhereInput
    orderBy?: Enumerable<PlayerOrderByWithAggregationInput>
    by: Array<PlayerScalarFieldEnum>
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }


  export type PlayerGroupByOutputType = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus: string | null
    InjuryBodyPart: string | null
    InjuryStartDate: string | null
    InjuryNotes: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect = {
    PlayerID?: boolean
    TeamID?: boolean
    team?: boolean | TeamArgs
    Jersey?: boolean
    PositionCategory?: boolean
    Position?: boolean
    FirstName?: boolean
    LastName?: boolean
    s_name?: boolean
    Height?: boolean
    Weight?: boolean
    BirthDate?: boolean
    BirthCity?: boolean
    BirthState?: boolean
    BirthCountry?: boolean
    HighSchool?: boolean
    College?: boolean
    PhotoUrl?: boolean
    SportRadarPlayerID?: boolean
    RotoworldPlayerID?: boolean
    RotoWirePlayerID?: boolean
    FantasyAlarmPlayerID?: boolean
    InjuryStatus?: boolean
    InjuryBodyPart?: boolean
    InjuryStartDate?: boolean
    InjuryNotes?: boolean
    FanDuelPlayerID?: boolean
    DraftKingsPlayerID?: boolean
    YahooPlayerID?: boolean
    FanDuelName?: boolean
    DraftKingsName?: boolean
    YahooName?: boolean
    DepthChartPosition?: boolean
    DepthChartOrder?: boolean
    UsaTodayPlayerID?: boolean
    UsaTodayHeadshotUrl?: boolean
    UsaTodayHeadshotNoBackgroundUrl?: boolean
    UsaTodayHeadshotUpdated?: boolean
    UsaTodayHeadshotNoBackgroundUpdated?: boolean
    NbaDotComPlayerID?: boolean
    season_averages?: boolean | SeasonAveragesArgs
    last_five_averages?: boolean | LastFiveGameAveragesArgs
    statlines?: boolean | PlayerStatlinesArgs
    _count?: boolean | PlayerCountOutputTypeArgs
  }


  export type PlayerInclude = {
    team?: boolean | TeamArgs
    season_averages?: boolean | SeasonAveragesArgs
    last_five_averages?: boolean | LastFiveGameAveragesArgs
    statlines?: boolean | PlayerStatlinesArgs
    _count?: boolean | PlayerCountOutputTypeArgs
  } 

  export type PlayerGetPayload<S extends boolean | null | undefined | PlayerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Player :
    S extends undefined ? never :
    S extends { include: any } & (PlayerArgs | PlayerFindManyArgs)
    ? Player  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'team' ? TeamGetPayload<S['include'][P]> :
        P extends 'season_averages' ? SeasonAveragesGetPayload<S['include'][P]> | null :
        P extends 'last_five_averages' ? LastFiveGameAveragesGetPayload<S['include'][P]> | null :
        P extends 'statlines' ? Array < StatlineGetPayload<S['include'][P]>>  :
        P extends '_count' ? PlayerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PlayerArgs | PlayerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'team' ? TeamGetPayload<S['select'][P]> :
        P extends 'season_averages' ? SeasonAveragesGetPayload<S['select'][P]> | null :
        P extends 'last_five_averages' ? LastFiveGameAveragesGetPayload<S['select'][P]> | null :
        P extends 'statlines' ? Array < StatlineGetPayload<S['select'][P]>>  :
        P extends '_count' ? PlayerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Player ? Player[P] : never
  } 
      : Player


  type PlayerCountArgs = Merge<
    Omit<PlayerFindManyArgs, 'select' | 'include'> & {
      select?: PlayerCountAggregateInputType | true
    }
  >

  export interface PlayerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlayerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Player'> extends True ? Prisma__PlayerClient<PlayerGetPayload<T>> : Prisma__PlayerClient<PlayerGetPayload<T> | null, null>

    /**
     * Find one Player that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PlayerFindUniqueOrThrowArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlayerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Player'> extends True ? Prisma__PlayerClient<PlayerGetPayload<T>> : Prisma__PlayerClient<PlayerGetPayload<T> | null, null>

    /**
     * Find the first Player that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PlayerFindFirstOrThrowArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `PlayerID`
     * const playerWithPlayerIDOnly = await prisma.player.findMany({ select: { PlayerID: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs>(
      args?: SelectSubset<T, PlayerFindManyArgs>
    ): PrismaPromise<Array<PlayerGetPayload<T>>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs>(
      args: SelectSubset<T, PlayerCreateArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Create many Players.
     *     @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     *     @example
     *     // Create many Players
     *     const player = await prisma.player.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlayerCreateManyArgs>(
      args?: SelectSubset<T, PlayerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs>(
      args: SelectSubset<T, PlayerDeleteArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs>(
      args: SelectSubset<T, PlayerUpdateArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs>(
      args?: SelectSubset<T, PlayerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs>(
      args: SelectSubset<T, PlayerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs>(
      args: SelectSubset<T, PlayerUpsertArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlayerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    season_averages<T extends SeasonAveragesArgs= {}>(args?: Subset<T, SeasonAveragesArgs>): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T> | Null>;

    last_five_averages<T extends LastFiveGameAveragesArgs= {}>(args?: Subset<T, LastFiveGameAveragesArgs>): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T> | Null>;

    statlines<T extends PlayerStatlinesArgs= {}>(args?: Subset<T, PlayerStatlinesArgs>): PrismaPromise<Array<StatlineGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Player base type for findUnique actions
   */
  export type PlayerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUnique
   */
  export interface PlayerFindUniqueArgs extends PlayerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player base type for findFirst actions
   */
  export type PlayerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     * 
    **/
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }

  /**
   * Player findFirst
   */
  export interface PlayerFindFirstArgs extends PlayerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     * 
    **/
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player findMany
   */
  export type PlayerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Players to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player create
   */
  export type PlayerCreateArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The data needed to create a Player.
     * 
    **/
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }


  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs = {
    /**
     * The data used to create many Players.
     * 
    **/
    data: Enumerable<PlayerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Player update
   */
  export type PlayerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The data needed to update a Player.
     * 
    **/
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs = {
    /**
     * The data used to update Players.
     * 
    **/
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     * 
    **/
    where?: PlayerWhereInput
  }


  /**
   * Player upsert
   */
  export type PlayerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The filter to search for the Player to update in case it exists.
     * 
    **/
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     * 
    **/
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }


  /**
   * Player delete
   */
  export type PlayerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter which Player to delete.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs = {
    /**
     * Filter which Players to delete
     * 
    **/
    where?: PlayerWhereInput
  }


  /**
   * Player.statlines
   */
  export type PlayerStatlinesArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    where?: StatlineWhereInput
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    cursor?: StatlineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }


  /**
   * Player without action
   */
  export type PlayerArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
  }



  /**
   * Model Statline
   */


  export type AggregateStatline = {
    _count: StatlineCountAggregateOutputType | null
    _avg: StatlineAvgAggregateOutputType | null
    _sum: StatlineSumAggregateOutputType | null
    _min: StatlineMinAggregateOutputType | null
    _max: StatlineMaxAggregateOutputType | null
  }

  export type StatlineAvgAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    PlayerID: number | null
    Started: number | null
    GameID: number | null
    OpponentID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    Seconds: number | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    OffensiveReboundsPercentage: Decimal | null
    DefensiveReboundsPercentage: Decimal | null
    TotalReboundsPercentage: Decimal | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    PlayerEfficiencyRating: Decimal | null
    AssistsPercentage: Decimal | null
    StealsPercentage: Decimal | null
    BlocksPercentage: Decimal | null
    TurnOversPercentage: Decimal | null
    UsageRatePercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: number | null
    DoubleDoubles: number | null
    TripleDoubles: number | null
    FantasyPointsFantasyDraft: Decimal | null
  }

  export type StatlineSumAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    PlayerID: number | null
    Started: number | null
    GameID: number | null
    OpponentID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    Seconds: number | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    OffensiveReboundsPercentage: Decimal | null
    DefensiveReboundsPercentage: Decimal | null
    TotalReboundsPercentage: Decimal | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    PlayerEfficiencyRating: Decimal | null
    AssistsPercentage: Decimal | null
    StealsPercentage: Decimal | null
    BlocksPercentage: Decimal | null
    TurnOversPercentage: Decimal | null
    UsageRatePercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: number | null
    DoubleDoubles: number | null
    TripleDoubles: number | null
    FantasyPointsFantasyDraft: Decimal | null
  }

  export type StatlineMinAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    PlayerID: number | null
    Name: string | null
    Position: string | null
    Started: number | null
    InjuryStatus: string | null
    InjuryBodyPart: string | null
    InjuryStartDate: string | null
    InjuryNotes: string | null
    GameID: number | null
    OpponentID: number | null
    HomeOrAway: string | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    Seconds: number | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    OffensiveReboundsPercentage: Decimal | null
    DefensiveReboundsPercentage: Decimal | null
    TotalReboundsPercentage: Decimal | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    PlayerEfficiencyRating: Decimal | null
    AssistsPercentage: Decimal | null
    StealsPercentage: Decimal | null
    BlocksPercentage: Decimal | null
    TurnOversPercentage: Decimal | null
    UsageRatePercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: number | null
    DoubleDoubles: number | null
    TripleDoubles: number | null
    FantasyPointsFantasyDraft: Decimal | null
  }

  export type StatlineMaxAggregateOutputType = {
    StatID: number | null
    TeamID: number | null
    PlayerID: number | null
    Name: string | null
    Position: string | null
    Started: number | null
    InjuryStatus: string | null
    InjuryBodyPart: string | null
    InjuryStartDate: string | null
    InjuryNotes: string | null
    GameID: number | null
    OpponentID: number | null
    HomeOrAway: string | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    Seconds: number | null
    FieldGoalsMade: number | null
    FieldGoalsAttempted: number | null
    FieldGoalsPercentage: Decimal | null
    EffectiveFieldGoalsPercentage: Decimal | null
    TwoPointersMade: number | null
    TwoPointersAttempted: number | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: number | null
    ThreePointersAttempted: number | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: number | null
    FreeThrowsAttempted: number | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: number | null
    DefensiveRebounds: number | null
    Rebounds: number | null
    OffensiveReboundsPercentage: Decimal | null
    DefensiveReboundsPercentage: Decimal | null
    TotalReboundsPercentage: Decimal | null
    Assists: number | null
    Steals: number | null
    BlockedShots: number | null
    Turnovers: number | null
    PersonalFouls: number | null
    Points: number | null
    TrueShootingPercentage: Decimal | null
    PlayerEfficiencyRating: Decimal | null
    AssistsPercentage: Decimal | null
    StealsPercentage: Decimal | null
    BlocksPercentage: Decimal | null
    TurnOversPercentage: Decimal | null
    UsageRatePercentage: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: number | null
    DoubleDoubles: number | null
    TripleDoubles: number | null
    FantasyPointsFantasyDraft: Decimal | null
  }

  export type StatlineCountAggregateOutputType = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: number
    Position: number
    Started: number
    InjuryStatus: number
    InjuryBodyPart: number
    InjuryStartDate: number
    InjuryNotes: number
    GameID: number
    OpponentID: number
    HomeOrAway: number
    FantasyPoints: number
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: number
    EffectiveFieldGoalsPercentage: number
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: number
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: number
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: number
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: number
    DefensiveReboundsPercentage: number
    TotalReboundsPercentage: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: number
    PlayerEfficiencyRating: number
    AssistsPercentage: number
    StealsPercentage: number
    BlocksPercentage: number
    TurnOversPercentage: number
    UsageRatePercentage: number
    FantasyPointsFanDuel: number
    FantasyPointsDraftKings: number
    FantasyPointsYahoo: number
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: number
    _all: number
  }


  export type StatlineAvgAggregateInputType = {
    StatID?: true
    TeamID?: true
    PlayerID?: true
    Started?: true
    GameID?: true
    OpponentID?: true
    FantasyPoints?: true
    Minutes?: true
    Seconds?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    OffensiveReboundsPercentage?: true
    DefensiveReboundsPercentage?: true
    TotalReboundsPercentage?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    PlayerEfficiencyRating?: true
    AssistsPercentage?: true
    StealsPercentage?: true
    BlocksPercentage?: true
    TurnOversPercentage?: true
    UsageRatePercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    DoubleDoubles?: true
    TripleDoubles?: true
    FantasyPointsFantasyDraft?: true
  }

  export type StatlineSumAggregateInputType = {
    StatID?: true
    TeamID?: true
    PlayerID?: true
    Started?: true
    GameID?: true
    OpponentID?: true
    FantasyPoints?: true
    Minutes?: true
    Seconds?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    OffensiveReboundsPercentage?: true
    DefensiveReboundsPercentage?: true
    TotalReboundsPercentage?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    PlayerEfficiencyRating?: true
    AssistsPercentage?: true
    StealsPercentage?: true
    BlocksPercentage?: true
    TurnOversPercentage?: true
    UsageRatePercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    DoubleDoubles?: true
    TripleDoubles?: true
    FantasyPointsFantasyDraft?: true
  }

  export type StatlineMinAggregateInputType = {
    StatID?: true
    TeamID?: true
    PlayerID?: true
    Name?: true
    Position?: true
    Started?: true
    InjuryStatus?: true
    InjuryBodyPart?: true
    InjuryStartDate?: true
    InjuryNotes?: true
    GameID?: true
    OpponentID?: true
    HomeOrAway?: true
    FantasyPoints?: true
    Minutes?: true
    Seconds?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    OffensiveReboundsPercentage?: true
    DefensiveReboundsPercentage?: true
    TotalReboundsPercentage?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    PlayerEfficiencyRating?: true
    AssistsPercentage?: true
    StealsPercentage?: true
    BlocksPercentage?: true
    TurnOversPercentage?: true
    UsageRatePercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    DoubleDoubles?: true
    TripleDoubles?: true
    FantasyPointsFantasyDraft?: true
  }

  export type StatlineMaxAggregateInputType = {
    StatID?: true
    TeamID?: true
    PlayerID?: true
    Name?: true
    Position?: true
    Started?: true
    InjuryStatus?: true
    InjuryBodyPart?: true
    InjuryStartDate?: true
    InjuryNotes?: true
    GameID?: true
    OpponentID?: true
    HomeOrAway?: true
    FantasyPoints?: true
    Minutes?: true
    Seconds?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    OffensiveReboundsPercentage?: true
    DefensiveReboundsPercentage?: true
    TotalReboundsPercentage?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    PlayerEfficiencyRating?: true
    AssistsPercentage?: true
    StealsPercentage?: true
    BlocksPercentage?: true
    TurnOversPercentage?: true
    UsageRatePercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    DoubleDoubles?: true
    TripleDoubles?: true
    FantasyPointsFantasyDraft?: true
  }

  export type StatlineCountAggregateInputType = {
    StatID?: true
    TeamID?: true
    PlayerID?: true
    Name?: true
    Position?: true
    Started?: true
    InjuryStatus?: true
    InjuryBodyPart?: true
    InjuryStartDate?: true
    InjuryNotes?: true
    GameID?: true
    OpponentID?: true
    HomeOrAway?: true
    FantasyPoints?: true
    Minutes?: true
    Seconds?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    EffectiveFieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    OffensiveReboundsPercentage?: true
    DefensiveReboundsPercentage?: true
    TotalReboundsPercentage?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    TrueShootingPercentage?: true
    PlayerEfficiencyRating?: true
    AssistsPercentage?: true
    StealsPercentage?: true
    BlocksPercentage?: true
    TurnOversPercentage?: true
    UsageRatePercentage?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    DoubleDoubles?: true
    TripleDoubles?: true
    FantasyPointsFantasyDraft?: true
    _all?: true
  }

  export type StatlineAggregateArgs = {
    /**
     * Filter which Statline to aggregate.
     * 
    **/
    where?: StatlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statlines to fetch.
     * 
    **/
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statlines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statlines
    **/
    _count?: true | StatlineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatlineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatlineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatlineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatlineMaxAggregateInputType
  }

  export type GetStatlineAggregateType<T extends StatlineAggregateArgs> = {
        [P in keyof T & keyof AggregateStatline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatline[P]>
      : GetScalarType<T[P], AggregateStatline[P]>
  }




  export type StatlineGroupByArgs = {
    where?: StatlineWhereInput
    orderBy?: Enumerable<StatlineOrderByWithAggregationInput>
    by: Array<StatlineScalarFieldEnum>
    having?: StatlineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatlineCountAggregateInputType | true
    _avg?: StatlineAvgAggregateInputType
    _sum?: StatlineSumAggregateInputType
    _min?: StatlineMinAggregateInputType
    _max?: StatlineMaxAggregateInputType
  }


  export type StatlineGroupByOutputType = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus: string | null
    InjuryBodyPart: string | null
    InjuryStartDate: string | null
    InjuryNotes: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal
    EffectiveFieldGoalsPercentage: Decimal
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal
    DefensiveReboundsPercentage: Decimal
    TotalReboundsPercentage: Decimal
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal
    PlayerEfficiencyRating: Decimal
    AssistsPercentage: Decimal
    StealsPercentage: Decimal
    BlocksPercentage: Decimal
    TurnOversPercentage: Decimal
    UsageRatePercentage: Decimal
    FantasyPointsFanDuel: Decimal
    FantasyPointsDraftKings: Decimal
    FantasyPointsYahoo: Decimal
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal
    _count: StatlineCountAggregateOutputType | null
    _avg: StatlineAvgAggregateOutputType | null
    _sum: StatlineSumAggregateOutputType | null
    _min: StatlineMinAggregateOutputType | null
    _max: StatlineMaxAggregateOutputType | null
  }

  type GetStatlineGroupByPayload<T extends StatlineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatlineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatlineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatlineGroupByOutputType[P]>
            : GetScalarType<T[P], StatlineGroupByOutputType[P]>
        }
      >
    >


  export type StatlineSelect = {
    StatID?: boolean
    TeamID?: boolean
    team?: boolean | TeamArgs
    PlayerID?: boolean
    player?: boolean | PlayerArgs
    Name?: boolean
    Position?: boolean
    Started?: boolean
    InjuryStatus?: boolean
    InjuryBodyPart?: boolean
    InjuryStartDate?: boolean
    InjuryNotes?: boolean
    GameID?: boolean
    game?: boolean | GameArgs
    OpponentID?: boolean
    opponent_team?: boolean | TeamArgs
    HomeOrAway?: boolean
    FantasyPoints?: boolean
    Minutes?: boolean
    Seconds?: boolean
    FieldGoalsMade?: boolean
    FieldGoalsAttempted?: boolean
    FieldGoalsPercentage?: boolean
    EffectiveFieldGoalsPercentage?: boolean
    TwoPointersMade?: boolean
    TwoPointersAttempted?: boolean
    TwoPointersPercentage?: boolean
    ThreePointersMade?: boolean
    ThreePointersAttempted?: boolean
    ThreePointersPercentage?: boolean
    FreeThrowsMade?: boolean
    FreeThrowsAttempted?: boolean
    FreeThrowsPercentage?: boolean
    OffensiveRebounds?: boolean
    DefensiveRebounds?: boolean
    Rebounds?: boolean
    OffensiveReboundsPercentage?: boolean
    DefensiveReboundsPercentage?: boolean
    TotalReboundsPercentage?: boolean
    Assists?: boolean
    Steals?: boolean
    BlockedShots?: boolean
    Turnovers?: boolean
    PersonalFouls?: boolean
    Points?: boolean
    TrueShootingPercentage?: boolean
    PlayerEfficiencyRating?: boolean
    AssistsPercentage?: boolean
    StealsPercentage?: boolean
    BlocksPercentage?: boolean
    TurnOversPercentage?: boolean
    UsageRatePercentage?: boolean
    FantasyPointsFanDuel?: boolean
    FantasyPointsDraftKings?: boolean
    FantasyPointsYahoo?: boolean
    PlusMinus?: boolean
    DoubleDoubles?: boolean
    TripleDoubles?: boolean
    FantasyPointsFantasyDraft?: boolean
  }


  export type StatlineInclude = {
    team?: boolean | TeamArgs
    player?: boolean | PlayerArgs
    game?: boolean | GameArgs
    opponent_team?: boolean | TeamArgs
  } 

  export type StatlineGetPayload<S extends boolean | null | undefined | StatlineArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Statline :
    S extends undefined ? never :
    S extends { include: any } & (StatlineArgs | StatlineFindManyArgs)
    ? Statline  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'team' ? TeamGetPayload<S['include'][P]> :
        P extends 'player' ? PlayerGetPayload<S['include'][P]> :
        P extends 'game' ? GameGetPayload<S['include'][P]> :
        P extends 'opponent_team' ? TeamGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (StatlineArgs | StatlineFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'team' ? TeamGetPayload<S['select'][P]> :
        P extends 'player' ? PlayerGetPayload<S['select'][P]> :
        P extends 'game' ? GameGetPayload<S['select'][P]> :
        P extends 'opponent_team' ? TeamGetPayload<S['select'][P]> :  P extends keyof Statline ? Statline[P] : never
  } 
      : Statline


  type StatlineCountArgs = Merge<
    Omit<StatlineFindManyArgs, 'select' | 'include'> & {
      select?: StatlineCountAggregateInputType | true
    }
  >

  export interface StatlineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Statline that matches the filter.
     * @param {StatlineFindUniqueArgs} args - Arguments to find a Statline
     * @example
     * // Get one Statline
     * const statline = await prisma.statline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatlineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatlineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Statline'> extends True ? Prisma__StatlineClient<StatlineGetPayload<T>> : Prisma__StatlineClient<StatlineGetPayload<T> | null, null>

    /**
     * Find one Statline that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatlineFindUniqueOrThrowArgs} args - Arguments to find a Statline
     * @example
     * // Get one Statline
     * const statline = await prisma.statline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatlineFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StatlineFindUniqueOrThrowArgs>
    ): Prisma__StatlineClient<StatlineGetPayload<T>>

    /**
     * Find the first Statline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineFindFirstArgs} args - Arguments to find a Statline
     * @example
     * // Get one Statline
     * const statline = await prisma.statline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatlineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatlineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Statline'> extends True ? Prisma__StatlineClient<StatlineGetPayload<T>> : Prisma__StatlineClient<StatlineGetPayload<T> | null, null>

    /**
     * Find the first Statline that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineFindFirstOrThrowArgs} args - Arguments to find a Statline
     * @example
     * // Get one Statline
     * const statline = await prisma.statline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatlineFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StatlineFindFirstOrThrowArgs>
    ): Prisma__StatlineClient<StatlineGetPayload<T>>

    /**
     * Find zero or more Statlines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statlines
     * const statlines = await prisma.statline.findMany()
     * 
     * // Get first 10 Statlines
     * const statlines = await prisma.statline.findMany({ take: 10 })
     * 
     * // Only select the `StatID`
     * const statlineWithStatIDOnly = await prisma.statline.findMany({ select: { StatID: true } })
     * 
    **/
    findMany<T extends StatlineFindManyArgs>(
      args?: SelectSubset<T, StatlineFindManyArgs>
    ): PrismaPromise<Array<StatlineGetPayload<T>>>

    /**
     * Create a Statline.
     * @param {StatlineCreateArgs} args - Arguments to create a Statline.
     * @example
     * // Create one Statline
     * const Statline = await prisma.statline.create({
     *   data: {
     *     // ... data to create a Statline
     *   }
     * })
     * 
    **/
    create<T extends StatlineCreateArgs>(
      args: SelectSubset<T, StatlineCreateArgs>
    ): Prisma__StatlineClient<StatlineGetPayload<T>>

    /**
     * Create many Statlines.
     *     @param {StatlineCreateManyArgs} args - Arguments to create many Statlines.
     *     @example
     *     // Create many Statlines
     *     const statline = await prisma.statline.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatlineCreateManyArgs>(
      args?: SelectSubset<T, StatlineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Statline.
     * @param {StatlineDeleteArgs} args - Arguments to delete one Statline.
     * @example
     * // Delete one Statline
     * const Statline = await prisma.statline.delete({
     *   where: {
     *     // ... filter to delete one Statline
     *   }
     * })
     * 
    **/
    delete<T extends StatlineDeleteArgs>(
      args: SelectSubset<T, StatlineDeleteArgs>
    ): Prisma__StatlineClient<StatlineGetPayload<T>>

    /**
     * Update one Statline.
     * @param {StatlineUpdateArgs} args - Arguments to update one Statline.
     * @example
     * // Update one Statline
     * const statline = await prisma.statline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatlineUpdateArgs>(
      args: SelectSubset<T, StatlineUpdateArgs>
    ): Prisma__StatlineClient<StatlineGetPayload<T>>

    /**
     * Delete zero or more Statlines.
     * @param {StatlineDeleteManyArgs} args - Arguments to filter Statlines to delete.
     * @example
     * // Delete a few Statlines
     * const { count } = await prisma.statline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatlineDeleteManyArgs>(
      args?: SelectSubset<T, StatlineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statlines
     * const statline = await prisma.statline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatlineUpdateManyArgs>(
      args: SelectSubset<T, StatlineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Statline.
     * @param {StatlineUpsertArgs} args - Arguments to update or create a Statline.
     * @example
     * // Update or create a Statline
     * const statline = await prisma.statline.upsert({
     *   create: {
     *     // ... data to create a Statline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statline we want to update
     *   }
     * })
    **/
    upsert<T extends StatlineUpsertArgs>(
      args: SelectSubset<T, StatlineUpsertArgs>
    ): Prisma__StatlineClient<StatlineGetPayload<T>>

    /**
     * Count the number of Statlines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineCountArgs} args - Arguments to filter Statlines to count.
     * @example
     * // Count the number of Statlines
     * const count = await prisma.statline.count({
     *   where: {
     *     // ... the filter for the Statlines we want to count
     *   }
     * })
    **/
    count<T extends StatlineCountArgs>(
      args?: Subset<T, StatlineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatlineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatlineAggregateArgs>(args: Subset<T, StatlineAggregateArgs>): PrismaPromise<GetStatlineAggregateType<T>>

    /**
     * Group by Statline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatlineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatlineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatlineGroupByArgs['orderBy'] }
        : { orderBy?: StatlineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatlineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatlineGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Statline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatlineClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    player<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    game<T extends GameArgs= {}>(args?: Subset<T, GameArgs>): Prisma__GameClient<GameGetPayload<T> | Null>;

    opponent_team<T extends TeamArgs= {}>(args?: Subset<T, TeamArgs>): Prisma__TeamClient<TeamGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Statline base type for findUnique actions
   */
  export type StatlineFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * Filter, which Statline to fetch.
     * 
    **/
    where: StatlineWhereUniqueInput
  }

  /**
   * Statline findUnique
   */
  export interface StatlineFindUniqueArgs extends StatlineFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Statline findUniqueOrThrow
   */
  export type StatlineFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * Filter, which Statline to fetch.
     * 
    **/
    where: StatlineWhereUniqueInput
  }


  /**
   * Statline base type for findFirst actions
   */
  export type StatlineFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * Filter, which Statline to fetch.
     * 
    **/
    where?: StatlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statlines to fetch.
     * 
    **/
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statlines.
     * 
    **/
    cursor?: StatlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statlines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statlines.
     * 
    **/
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }

  /**
   * Statline findFirst
   */
  export interface StatlineFindFirstArgs extends StatlineFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Statline findFirstOrThrow
   */
  export type StatlineFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * Filter, which Statline to fetch.
     * 
    **/
    where?: StatlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statlines to fetch.
     * 
    **/
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statlines.
     * 
    **/
    cursor?: StatlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statlines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statlines.
     * 
    **/
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }


  /**
   * Statline findMany
   */
  export type StatlineFindManyArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * Filter, which Statlines to fetch.
     * 
    **/
    where?: StatlineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statlines to fetch.
     * 
    **/
    orderBy?: Enumerable<StatlineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statlines.
     * 
    **/
    cursor?: StatlineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statlines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statlines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatlineScalarFieldEnum>
  }


  /**
   * Statline create
   */
  export type StatlineCreateArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * The data needed to create a Statline.
     * 
    **/
    data: XOR<StatlineCreateInput, StatlineUncheckedCreateInput>
  }


  /**
   * Statline createMany
   */
  export type StatlineCreateManyArgs = {
    /**
     * The data used to create many Statlines.
     * 
    **/
    data: Enumerable<StatlineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Statline update
   */
  export type StatlineUpdateArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * The data needed to update a Statline.
     * 
    **/
    data: XOR<StatlineUpdateInput, StatlineUncheckedUpdateInput>
    /**
     * Choose, which Statline to update.
     * 
    **/
    where: StatlineWhereUniqueInput
  }


  /**
   * Statline updateMany
   */
  export type StatlineUpdateManyArgs = {
    /**
     * The data used to update Statlines.
     * 
    **/
    data: XOR<StatlineUpdateManyMutationInput, StatlineUncheckedUpdateManyInput>
    /**
     * Filter which Statlines to update
     * 
    **/
    where?: StatlineWhereInput
  }


  /**
   * Statline upsert
   */
  export type StatlineUpsertArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * The filter to search for the Statline to update in case it exists.
     * 
    **/
    where: StatlineWhereUniqueInput
    /**
     * In case the Statline found by the `where` argument doesn't exist, create a new Statline with this data.
     * 
    **/
    create: XOR<StatlineCreateInput, StatlineUncheckedCreateInput>
    /**
     * In case the Statline was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatlineUpdateInput, StatlineUncheckedUpdateInput>
  }


  /**
   * Statline delete
   */
  export type StatlineDeleteArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
    /**
     * Filter which Statline to delete.
     * 
    **/
    where: StatlineWhereUniqueInput
  }


  /**
   * Statline deleteMany
   */
  export type StatlineDeleteManyArgs = {
    /**
     * Filter which Statlines to delete
     * 
    **/
    where?: StatlineWhereInput
  }


  /**
   * Statline without action
   */
  export type StatlineArgs = {
    /**
     * Select specific fields to fetch from the Statline
     * 
    **/
    select?: StatlineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatlineInclude | null
  }



  /**
   * Model Referee
   */


  export type AggregateReferee = {
    _count: RefereeCountAggregateOutputType | null
    _avg: RefereeAvgAggregateOutputType | null
    _sum: RefereeSumAggregateOutputType | null
    _min: RefereeMinAggregateOutputType | null
    _max: RefereeMaxAggregateOutputType | null
  }

  export type RefereeAvgAggregateOutputType = {
    RefereeID: number | null
    Number: number | null
  }

  export type RefereeSumAggregateOutputType = {
    RefereeID: number | null
    Number: number | null
  }

  export type RefereeMinAggregateOutputType = {
    RefereeID: number | null
    Name: string | null
    Number: number | null
  }

  export type RefereeMaxAggregateOutputType = {
    RefereeID: number | null
    Name: string | null
    Number: number | null
  }

  export type RefereeCountAggregateOutputType = {
    RefereeID: number
    Name: number
    Number: number
    _all: number
  }


  export type RefereeAvgAggregateInputType = {
    RefereeID?: true
    Number?: true
  }

  export type RefereeSumAggregateInputType = {
    RefereeID?: true
    Number?: true
  }

  export type RefereeMinAggregateInputType = {
    RefereeID?: true
    Name?: true
    Number?: true
  }

  export type RefereeMaxAggregateInputType = {
    RefereeID?: true
    Name?: true
    Number?: true
  }

  export type RefereeCountAggregateInputType = {
    RefereeID?: true
    Name?: true
    Number?: true
    _all?: true
  }

  export type RefereeAggregateArgs = {
    /**
     * Filter which Referee to aggregate.
     * 
    **/
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     * 
    **/
    orderBy?: Enumerable<RefereeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referees
    **/
    _count?: true | RefereeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefereeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefereeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefereeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefereeMaxAggregateInputType
  }

  export type GetRefereeAggregateType<T extends RefereeAggregateArgs> = {
        [P in keyof T & keyof AggregateReferee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferee[P]>
      : GetScalarType<T[P], AggregateReferee[P]>
  }




  export type RefereeGroupByArgs = {
    where?: RefereeWhereInput
    orderBy?: Enumerable<RefereeOrderByWithAggregationInput>
    by: Array<RefereeScalarFieldEnum>
    having?: RefereeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefereeCountAggregateInputType | true
    _avg?: RefereeAvgAggregateInputType
    _sum?: RefereeSumAggregateInputType
    _min?: RefereeMinAggregateInputType
    _max?: RefereeMaxAggregateInputType
  }


  export type RefereeGroupByOutputType = {
    RefereeID: number
    Name: string
    Number: number
    _count: RefereeCountAggregateOutputType | null
    _avg: RefereeAvgAggregateOutputType | null
    _sum: RefereeSumAggregateOutputType | null
    _min: RefereeMinAggregateOutputType | null
    _max: RefereeMaxAggregateOutputType | null
  }

  type GetRefereeGroupByPayload<T extends RefereeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RefereeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefereeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefereeGroupByOutputType[P]>
            : GetScalarType<T[P], RefereeGroupByOutputType[P]>
        }
      >
    >


  export type RefereeSelect = {
    RefereeID?: boolean
    Name?: boolean
    Number?: boolean
    referee_games?: boolean | RefereeReferee_gamesArgs
    umpire_games?: boolean | RefereeUmpire_gamesArgs
    crewchief_games?: boolean | RefereeCrewchief_gamesArgs
    _count?: boolean | RefereeCountOutputTypeArgs
  }


  export type RefereeInclude = {
    referee_games?: boolean | RefereeReferee_gamesArgs
    umpire_games?: boolean | RefereeUmpire_gamesArgs
    crewchief_games?: boolean | RefereeCrewchief_gamesArgs
    _count?: boolean | RefereeCountOutputTypeArgs
  } 

  export type RefereeGetPayload<S extends boolean | null | undefined | RefereeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Referee :
    S extends undefined ? never :
    S extends { include: any } & (RefereeArgs | RefereeFindManyArgs)
    ? Referee  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'referee_games' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'umpire_games' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends 'crewchief_games' ? Array < GameGetPayload<S['include'][P]>>  :
        P extends '_count' ? RefereeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RefereeArgs | RefereeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'referee_games' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'umpire_games' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends 'crewchief_games' ? Array < GameGetPayload<S['select'][P]>>  :
        P extends '_count' ? RefereeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Referee ? Referee[P] : never
  } 
      : Referee


  type RefereeCountArgs = Merge<
    Omit<RefereeFindManyArgs, 'select' | 'include'> & {
      select?: RefereeCountAggregateInputType | true
    }
  >

  export interface RefereeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Referee that matches the filter.
     * @param {RefereeFindUniqueArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RefereeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RefereeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Referee'> extends True ? Prisma__RefereeClient<RefereeGetPayload<T>> : Prisma__RefereeClient<RefereeGetPayload<T> | null, null>

    /**
     * Find one Referee that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RefereeFindUniqueOrThrowArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RefereeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RefereeFindUniqueOrThrowArgs>
    ): Prisma__RefereeClient<RefereeGetPayload<T>>

    /**
     * Find the first Referee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindFirstArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RefereeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RefereeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Referee'> extends True ? Prisma__RefereeClient<RefereeGetPayload<T>> : Prisma__RefereeClient<RefereeGetPayload<T> | null, null>

    /**
     * Find the first Referee that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindFirstOrThrowArgs} args - Arguments to find a Referee
     * @example
     * // Get one Referee
     * const referee = await prisma.referee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RefereeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RefereeFindFirstOrThrowArgs>
    ): Prisma__RefereeClient<RefereeGetPayload<T>>

    /**
     * Find zero or more Referees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referees
     * const referees = await prisma.referee.findMany()
     * 
     * // Get first 10 Referees
     * const referees = await prisma.referee.findMany({ take: 10 })
     * 
     * // Only select the `RefereeID`
     * const refereeWithRefereeIDOnly = await prisma.referee.findMany({ select: { RefereeID: true } })
     * 
    **/
    findMany<T extends RefereeFindManyArgs>(
      args?: SelectSubset<T, RefereeFindManyArgs>
    ): PrismaPromise<Array<RefereeGetPayload<T>>>

    /**
     * Create a Referee.
     * @param {RefereeCreateArgs} args - Arguments to create a Referee.
     * @example
     * // Create one Referee
     * const Referee = await prisma.referee.create({
     *   data: {
     *     // ... data to create a Referee
     *   }
     * })
     * 
    **/
    create<T extends RefereeCreateArgs>(
      args: SelectSubset<T, RefereeCreateArgs>
    ): Prisma__RefereeClient<RefereeGetPayload<T>>

    /**
     * Create many Referees.
     *     @param {RefereeCreateManyArgs} args - Arguments to create many Referees.
     *     @example
     *     // Create many Referees
     *     const referee = await prisma.referee.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RefereeCreateManyArgs>(
      args?: SelectSubset<T, RefereeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Referee.
     * @param {RefereeDeleteArgs} args - Arguments to delete one Referee.
     * @example
     * // Delete one Referee
     * const Referee = await prisma.referee.delete({
     *   where: {
     *     // ... filter to delete one Referee
     *   }
     * })
     * 
    **/
    delete<T extends RefereeDeleteArgs>(
      args: SelectSubset<T, RefereeDeleteArgs>
    ): Prisma__RefereeClient<RefereeGetPayload<T>>

    /**
     * Update one Referee.
     * @param {RefereeUpdateArgs} args - Arguments to update one Referee.
     * @example
     * // Update one Referee
     * const referee = await prisma.referee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RefereeUpdateArgs>(
      args: SelectSubset<T, RefereeUpdateArgs>
    ): Prisma__RefereeClient<RefereeGetPayload<T>>

    /**
     * Delete zero or more Referees.
     * @param {RefereeDeleteManyArgs} args - Arguments to filter Referees to delete.
     * @example
     * // Delete a few Referees
     * const { count } = await prisma.referee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RefereeDeleteManyArgs>(
      args?: SelectSubset<T, RefereeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referees
     * const referee = await prisma.referee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RefereeUpdateManyArgs>(
      args: SelectSubset<T, RefereeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Referee.
     * @param {RefereeUpsertArgs} args - Arguments to update or create a Referee.
     * @example
     * // Update or create a Referee
     * const referee = await prisma.referee.upsert({
     *   create: {
     *     // ... data to create a Referee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referee we want to update
     *   }
     * })
    **/
    upsert<T extends RefereeUpsertArgs>(
      args: SelectSubset<T, RefereeUpsertArgs>
    ): Prisma__RefereeClient<RefereeGetPayload<T>>

    /**
     * Count the number of Referees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeCountArgs} args - Arguments to filter Referees to count.
     * @example
     * // Count the number of Referees
     * const count = await prisma.referee.count({
     *   where: {
     *     // ... the filter for the Referees we want to count
     *   }
     * })
    **/
    count<T extends RefereeCountArgs>(
      args?: Subset<T, RefereeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefereeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefereeAggregateArgs>(args: Subset<T, RefereeAggregateArgs>): PrismaPromise<GetRefereeAggregateType<T>>

    /**
     * Group by Referee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefereeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefereeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefereeGroupByArgs['orderBy'] }
        : { orderBy?: RefereeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefereeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefereeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Referee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RefereeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    referee_games<T extends RefereeReferee_gamesArgs= {}>(args?: Subset<T, RefereeReferee_gamesArgs>): PrismaPromise<Array<GameGetPayload<T>>| Null>;

    umpire_games<T extends RefereeUmpire_gamesArgs= {}>(args?: Subset<T, RefereeUmpire_gamesArgs>): PrismaPromise<Array<GameGetPayload<T>>| Null>;

    crewchief_games<T extends RefereeCrewchief_gamesArgs= {}>(args?: Subset<T, RefereeCrewchief_gamesArgs>): PrismaPromise<Array<GameGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Referee base type for findUnique actions
   */
  export type RefereeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * Filter, which Referee to fetch.
     * 
    **/
    where: RefereeWhereUniqueInput
  }

  /**
   * Referee findUnique
   */
  export interface RefereeFindUniqueArgs extends RefereeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Referee findUniqueOrThrow
   */
  export type RefereeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * Filter, which Referee to fetch.
     * 
    **/
    where: RefereeWhereUniqueInput
  }


  /**
   * Referee base type for findFirst actions
   */
  export type RefereeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * Filter, which Referee to fetch.
     * 
    **/
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     * 
    **/
    orderBy?: Enumerable<RefereeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referees.
     * 
    **/
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referees.
     * 
    **/
    distinct?: Enumerable<RefereeScalarFieldEnum>
  }

  /**
   * Referee findFirst
   */
  export interface RefereeFindFirstArgs extends RefereeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Referee findFirstOrThrow
   */
  export type RefereeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * Filter, which Referee to fetch.
     * 
    **/
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     * 
    **/
    orderBy?: Enumerable<RefereeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referees.
     * 
    **/
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referees.
     * 
    **/
    distinct?: Enumerable<RefereeScalarFieldEnum>
  }


  /**
   * Referee findMany
   */
  export type RefereeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * Filter, which Referees to fetch.
     * 
    **/
    where?: RefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referees to fetch.
     * 
    **/
    orderBy?: Enumerable<RefereeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referees.
     * 
    **/
    cursor?: RefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referees.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RefereeScalarFieldEnum>
  }


  /**
   * Referee create
   */
  export type RefereeCreateArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * The data needed to create a Referee.
     * 
    **/
    data: XOR<RefereeCreateInput, RefereeUncheckedCreateInput>
  }


  /**
   * Referee createMany
   */
  export type RefereeCreateManyArgs = {
    /**
     * The data used to create many Referees.
     * 
    **/
    data: Enumerable<RefereeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Referee update
   */
  export type RefereeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * The data needed to update a Referee.
     * 
    **/
    data: XOR<RefereeUpdateInput, RefereeUncheckedUpdateInput>
    /**
     * Choose, which Referee to update.
     * 
    **/
    where: RefereeWhereUniqueInput
  }


  /**
   * Referee updateMany
   */
  export type RefereeUpdateManyArgs = {
    /**
     * The data used to update Referees.
     * 
    **/
    data: XOR<RefereeUpdateManyMutationInput, RefereeUncheckedUpdateManyInput>
    /**
     * Filter which Referees to update
     * 
    **/
    where?: RefereeWhereInput
  }


  /**
   * Referee upsert
   */
  export type RefereeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * The filter to search for the Referee to update in case it exists.
     * 
    **/
    where: RefereeWhereUniqueInput
    /**
     * In case the Referee found by the `where` argument doesn't exist, create a new Referee with this data.
     * 
    **/
    create: XOR<RefereeCreateInput, RefereeUncheckedCreateInput>
    /**
     * In case the Referee was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RefereeUpdateInput, RefereeUncheckedUpdateInput>
  }


  /**
   * Referee delete
   */
  export type RefereeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
    /**
     * Filter which Referee to delete.
     * 
    **/
    where: RefereeWhereUniqueInput
  }


  /**
   * Referee deleteMany
   */
  export type RefereeDeleteManyArgs = {
    /**
     * Filter which Referees to delete
     * 
    **/
    where?: RefereeWhereInput
  }


  /**
   * Referee.referee_games
   */
  export type RefereeReferee_gamesArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Referee.umpire_games
   */
  export type RefereeUmpire_gamesArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Referee.crewchief_games
   */
  export type RefereeCrewchief_gamesArgs = {
    /**
     * Select specific fields to fetch from the Game
     * 
    **/
    select?: GameSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GameInclude | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Referee without action
   */
  export type RefereeArgs = {
    /**
     * Select specific fields to fetch from the Referee
     * 
    **/
    select?: RefereeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RefereeInclude | null
  }



  /**
   * Model SeasonAverages
   */


  export type AggregateSeasonAverages = {
    _count: SeasonAveragesCountAggregateOutputType | null
    _avg: SeasonAveragesAvgAggregateOutputType | null
    _sum: SeasonAveragesSumAggregateOutputType | null
    _min: SeasonAveragesMinAggregateOutputType | null
    _max: SeasonAveragesMaxAggregateOutputType | null
  }

  export type SeasonAveragesAvgAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type SeasonAveragesSumAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type SeasonAveragesMinAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type SeasonAveragesMaxAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type SeasonAveragesCountAggregateOutputType = {
    PlayerID: number
    FantasyPoints: number
    Minutes: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: number
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: number
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: number
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: number
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    FantasyPointsFanDuel: number
    FantasyPointsDraftKings: number
    FantasyPointsYahoo: number
    PlusMinus: number
    _all: number
  }


  export type SeasonAveragesAvgAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type SeasonAveragesSumAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type SeasonAveragesMinAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type SeasonAveragesMaxAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type SeasonAveragesCountAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    _all?: true
  }

  export type SeasonAveragesAggregateArgs = {
    /**
     * Filter which SeasonAverages to aggregate.
     * 
    **/
    where?: SeasonAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<SeasonAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SeasonAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonAverages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeasonAverages
    **/
    _count?: true | SeasonAveragesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonAveragesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonAveragesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonAveragesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonAveragesMaxAggregateInputType
  }

  export type GetSeasonAveragesAggregateType<T extends SeasonAveragesAggregateArgs> = {
        [P in keyof T & keyof AggregateSeasonAverages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeasonAverages[P]>
      : GetScalarType<T[P], AggregateSeasonAverages[P]>
  }




  export type SeasonAveragesGroupByArgs = {
    where?: SeasonAveragesWhereInput
    orderBy?: Enumerable<SeasonAveragesOrderByWithAggregationInput>
    by: Array<SeasonAveragesScalarFieldEnum>
    having?: SeasonAveragesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonAveragesCountAggregateInputType | true
    _avg?: SeasonAveragesAvgAggregateInputType
    _sum?: SeasonAveragesSumAggregateInputType
    _min?: SeasonAveragesMinAggregateInputType
    _max?: SeasonAveragesMaxAggregateInputType
  }


  export type SeasonAveragesGroupByOutputType = {
    PlayerID: number
    FantasyPoints: Decimal
    Minutes: number
    FieldGoalsMade: Decimal
    FieldGoalsAttempted: Decimal
    FieldGoalsPercentage: Decimal
    TwoPointersMade: Decimal
    TwoPointersAttempted: Decimal
    TwoPointersPercentage: Decimal
    ThreePointersMade: Decimal
    ThreePointersAttempted: Decimal
    ThreePointersPercentage: Decimal
    FreeThrowsMade: Decimal
    FreeThrowsAttempted: Decimal
    FreeThrowsPercentage: Decimal
    OffensiveRebounds: Decimal
    DefensiveRebounds: Decimal
    Rebounds: Decimal
    Assists: Decimal
    Steals: Decimal
    BlockedShots: Decimal
    Turnovers: Decimal
    PersonalFouls: Decimal
    Points: Decimal
    FantasyPointsFanDuel: Decimal
    FantasyPointsDraftKings: Decimal
    FantasyPointsYahoo: Decimal
    PlusMinus: Decimal
    _count: SeasonAveragesCountAggregateOutputType | null
    _avg: SeasonAveragesAvgAggregateOutputType | null
    _sum: SeasonAveragesSumAggregateOutputType | null
    _min: SeasonAveragesMinAggregateOutputType | null
    _max: SeasonAveragesMaxAggregateOutputType | null
  }

  type GetSeasonAveragesGroupByPayload<T extends SeasonAveragesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SeasonAveragesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonAveragesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonAveragesGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonAveragesGroupByOutputType[P]>
        }
      >
    >


  export type SeasonAveragesSelect = {
    PlayerID?: boolean
    player?: boolean | PlayerArgs
    FantasyPoints?: boolean
    Minutes?: boolean
    FieldGoalsMade?: boolean
    FieldGoalsAttempted?: boolean
    FieldGoalsPercentage?: boolean
    TwoPointersMade?: boolean
    TwoPointersAttempted?: boolean
    TwoPointersPercentage?: boolean
    ThreePointersMade?: boolean
    ThreePointersAttempted?: boolean
    ThreePointersPercentage?: boolean
    FreeThrowsMade?: boolean
    FreeThrowsAttempted?: boolean
    FreeThrowsPercentage?: boolean
    OffensiveRebounds?: boolean
    DefensiveRebounds?: boolean
    Rebounds?: boolean
    Assists?: boolean
    Steals?: boolean
    BlockedShots?: boolean
    Turnovers?: boolean
    PersonalFouls?: boolean
    Points?: boolean
    FantasyPointsFanDuel?: boolean
    FantasyPointsDraftKings?: boolean
    FantasyPointsYahoo?: boolean
    PlusMinus?: boolean
  }


  export type SeasonAveragesInclude = {
    player?: boolean | PlayerArgs
  } 

  export type SeasonAveragesGetPayload<S extends boolean | null | undefined | SeasonAveragesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SeasonAverages :
    S extends undefined ? never :
    S extends { include: any } & (SeasonAveragesArgs | SeasonAveragesFindManyArgs)
    ? SeasonAverages  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'player' ? PlayerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SeasonAveragesArgs | SeasonAveragesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'player' ? PlayerGetPayload<S['select'][P]> :  P extends keyof SeasonAverages ? SeasonAverages[P] : never
  } 
      : SeasonAverages


  type SeasonAveragesCountArgs = Merge<
    Omit<SeasonAveragesFindManyArgs, 'select' | 'include'> & {
      select?: SeasonAveragesCountAggregateInputType | true
    }
  >

  export interface SeasonAveragesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SeasonAverages that matches the filter.
     * @param {SeasonAveragesFindUniqueArgs} args - Arguments to find a SeasonAverages
     * @example
     * // Get one SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeasonAveragesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SeasonAveragesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SeasonAverages'> extends True ? Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>> : Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T> | null, null>

    /**
     * Find one SeasonAverages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeasonAveragesFindUniqueOrThrowArgs} args - Arguments to find a SeasonAverages
     * @example
     * // Get one SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeasonAveragesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SeasonAveragesFindUniqueOrThrowArgs>
    ): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>>

    /**
     * Find the first SeasonAverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesFindFirstArgs} args - Arguments to find a SeasonAverages
     * @example
     * // Get one SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeasonAveragesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SeasonAveragesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SeasonAverages'> extends True ? Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>> : Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T> | null, null>

    /**
     * Find the first SeasonAverages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesFindFirstOrThrowArgs} args - Arguments to find a SeasonAverages
     * @example
     * // Get one SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeasonAveragesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SeasonAveragesFindFirstOrThrowArgs>
    ): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>>

    /**
     * Find zero or more SeasonAverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.findMany()
     * 
     * // Get first 10 SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.findMany({ take: 10 })
     * 
     * // Only select the `PlayerID`
     * const seasonAveragesWithPlayerIDOnly = await prisma.seasonAverages.findMany({ select: { PlayerID: true } })
     * 
    **/
    findMany<T extends SeasonAveragesFindManyArgs>(
      args?: SelectSubset<T, SeasonAveragesFindManyArgs>
    ): PrismaPromise<Array<SeasonAveragesGetPayload<T>>>

    /**
     * Create a SeasonAverages.
     * @param {SeasonAveragesCreateArgs} args - Arguments to create a SeasonAverages.
     * @example
     * // Create one SeasonAverages
     * const SeasonAverages = await prisma.seasonAverages.create({
     *   data: {
     *     // ... data to create a SeasonAverages
     *   }
     * })
     * 
    **/
    create<T extends SeasonAveragesCreateArgs>(
      args: SelectSubset<T, SeasonAveragesCreateArgs>
    ): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>>

    /**
     * Create many SeasonAverages.
     *     @param {SeasonAveragesCreateManyArgs} args - Arguments to create many SeasonAverages.
     *     @example
     *     // Create many SeasonAverages
     *     const seasonAverages = await prisma.seasonAverages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeasonAveragesCreateManyArgs>(
      args?: SelectSubset<T, SeasonAveragesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SeasonAverages.
     * @param {SeasonAveragesDeleteArgs} args - Arguments to delete one SeasonAverages.
     * @example
     * // Delete one SeasonAverages
     * const SeasonAverages = await prisma.seasonAverages.delete({
     *   where: {
     *     // ... filter to delete one SeasonAverages
     *   }
     * })
     * 
    **/
    delete<T extends SeasonAveragesDeleteArgs>(
      args: SelectSubset<T, SeasonAveragesDeleteArgs>
    ): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>>

    /**
     * Update one SeasonAverages.
     * @param {SeasonAveragesUpdateArgs} args - Arguments to update one SeasonAverages.
     * @example
     * // Update one SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeasonAveragesUpdateArgs>(
      args: SelectSubset<T, SeasonAveragesUpdateArgs>
    ): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>>

    /**
     * Delete zero or more SeasonAverages.
     * @param {SeasonAveragesDeleteManyArgs} args - Arguments to filter SeasonAverages to delete.
     * @example
     * // Delete a few SeasonAverages
     * const { count } = await prisma.seasonAverages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeasonAveragesDeleteManyArgs>(
      args?: SelectSubset<T, SeasonAveragesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeasonAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeasonAveragesUpdateManyArgs>(
      args: SelectSubset<T, SeasonAveragesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SeasonAverages.
     * @param {SeasonAveragesUpsertArgs} args - Arguments to update or create a SeasonAverages.
     * @example
     * // Update or create a SeasonAverages
     * const seasonAverages = await prisma.seasonAverages.upsert({
     *   create: {
     *     // ... data to create a SeasonAverages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeasonAverages we want to update
     *   }
     * })
    **/
    upsert<T extends SeasonAveragesUpsertArgs>(
      args: SelectSubset<T, SeasonAveragesUpsertArgs>
    ): Prisma__SeasonAveragesClient<SeasonAveragesGetPayload<T>>

    /**
     * Count the number of SeasonAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesCountArgs} args - Arguments to filter SeasonAverages to count.
     * @example
     * // Count the number of SeasonAverages
     * const count = await prisma.seasonAverages.count({
     *   where: {
     *     // ... the filter for the SeasonAverages we want to count
     *   }
     * })
    **/
    count<T extends SeasonAveragesCountArgs>(
      args?: Subset<T, SeasonAveragesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonAveragesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeasonAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAveragesAggregateArgs>(args: Subset<T, SeasonAveragesAggregateArgs>): PrismaPromise<GetSeasonAveragesAggregateType<T>>

    /**
     * Group by SeasonAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAveragesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonAveragesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonAveragesGroupByArgs['orderBy'] }
        : { orderBy?: SeasonAveragesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonAveragesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonAveragesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SeasonAverages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SeasonAveragesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    player<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SeasonAverages base type for findUnique actions
   */
  export type SeasonAveragesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * Filter, which SeasonAverages to fetch.
     * 
    **/
    where: SeasonAveragesWhereUniqueInput
  }

  /**
   * SeasonAverages findUnique
   */
  export interface SeasonAveragesFindUniqueArgs extends SeasonAveragesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SeasonAverages findUniqueOrThrow
   */
  export type SeasonAveragesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * Filter, which SeasonAverages to fetch.
     * 
    **/
    where: SeasonAveragesWhereUniqueInput
  }


  /**
   * SeasonAverages base type for findFirst actions
   */
  export type SeasonAveragesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * Filter, which SeasonAverages to fetch.
     * 
    **/
    where?: SeasonAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<SeasonAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeasonAverages.
     * 
    **/
    cursor?: SeasonAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonAverages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeasonAverages.
     * 
    **/
    distinct?: Enumerable<SeasonAveragesScalarFieldEnum>
  }

  /**
   * SeasonAverages findFirst
   */
  export interface SeasonAveragesFindFirstArgs extends SeasonAveragesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SeasonAverages findFirstOrThrow
   */
  export type SeasonAveragesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * Filter, which SeasonAverages to fetch.
     * 
    **/
    where?: SeasonAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<SeasonAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeasonAverages.
     * 
    **/
    cursor?: SeasonAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonAverages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeasonAverages.
     * 
    **/
    distinct?: Enumerable<SeasonAveragesScalarFieldEnum>
  }


  /**
   * SeasonAverages findMany
   */
  export type SeasonAveragesFindManyArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * Filter, which SeasonAverages to fetch.
     * 
    **/
    where?: SeasonAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeasonAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<SeasonAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeasonAverages.
     * 
    **/
    cursor?: SeasonAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeasonAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeasonAverages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SeasonAveragesScalarFieldEnum>
  }


  /**
   * SeasonAverages create
   */
  export type SeasonAveragesCreateArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * The data needed to create a SeasonAverages.
     * 
    **/
    data: XOR<SeasonAveragesCreateInput, SeasonAveragesUncheckedCreateInput>
  }


  /**
   * SeasonAverages createMany
   */
  export type SeasonAveragesCreateManyArgs = {
    /**
     * The data used to create many SeasonAverages.
     * 
    **/
    data: Enumerable<SeasonAveragesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SeasonAverages update
   */
  export type SeasonAveragesUpdateArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * The data needed to update a SeasonAverages.
     * 
    **/
    data: XOR<SeasonAveragesUpdateInput, SeasonAveragesUncheckedUpdateInput>
    /**
     * Choose, which SeasonAverages to update.
     * 
    **/
    where: SeasonAveragesWhereUniqueInput
  }


  /**
   * SeasonAverages updateMany
   */
  export type SeasonAveragesUpdateManyArgs = {
    /**
     * The data used to update SeasonAverages.
     * 
    **/
    data: XOR<SeasonAveragesUpdateManyMutationInput, SeasonAveragesUncheckedUpdateManyInput>
    /**
     * Filter which SeasonAverages to update
     * 
    **/
    where?: SeasonAveragesWhereInput
  }


  /**
   * SeasonAverages upsert
   */
  export type SeasonAveragesUpsertArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * The filter to search for the SeasonAverages to update in case it exists.
     * 
    **/
    where: SeasonAveragesWhereUniqueInput
    /**
     * In case the SeasonAverages found by the `where` argument doesn't exist, create a new SeasonAverages with this data.
     * 
    **/
    create: XOR<SeasonAveragesCreateInput, SeasonAveragesUncheckedCreateInput>
    /**
     * In case the SeasonAverages was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SeasonAveragesUpdateInput, SeasonAveragesUncheckedUpdateInput>
  }


  /**
   * SeasonAverages delete
   */
  export type SeasonAveragesDeleteArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
    /**
     * Filter which SeasonAverages to delete.
     * 
    **/
    where: SeasonAveragesWhereUniqueInput
  }


  /**
   * SeasonAverages deleteMany
   */
  export type SeasonAveragesDeleteManyArgs = {
    /**
     * Filter which SeasonAverages to delete
     * 
    **/
    where?: SeasonAveragesWhereInput
  }


  /**
   * SeasonAverages without action
   */
  export type SeasonAveragesArgs = {
    /**
     * Select specific fields to fetch from the SeasonAverages
     * 
    **/
    select?: SeasonAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SeasonAveragesInclude | null
  }



  /**
   * Model LastFiveGameAverages
   */


  export type AggregateLastFiveGameAverages = {
    _count: LastFiveGameAveragesCountAggregateOutputType | null
    _avg: LastFiveGameAveragesAvgAggregateOutputType | null
    _sum: LastFiveGameAveragesSumAggregateOutputType | null
    _min: LastFiveGameAveragesMinAggregateOutputType | null
    _max: LastFiveGameAveragesMaxAggregateOutputType | null
  }

  export type LastFiveGameAveragesAvgAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type LastFiveGameAveragesSumAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type LastFiveGameAveragesMinAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type LastFiveGameAveragesMaxAggregateOutputType = {
    PlayerID: number | null
    FantasyPoints: Decimal | null
    Minutes: number | null
    FieldGoalsMade: Decimal | null
    FieldGoalsAttempted: Decimal | null
    FieldGoalsPercentage: Decimal | null
    TwoPointersMade: Decimal | null
    TwoPointersAttempted: Decimal | null
    TwoPointersPercentage: Decimal | null
    ThreePointersMade: Decimal | null
    ThreePointersAttempted: Decimal | null
    ThreePointersPercentage: Decimal | null
    FreeThrowsMade: Decimal | null
    FreeThrowsAttempted: Decimal | null
    FreeThrowsPercentage: Decimal | null
    OffensiveRebounds: Decimal | null
    DefensiveRebounds: Decimal | null
    Rebounds: Decimal | null
    Assists: Decimal | null
    Steals: Decimal | null
    BlockedShots: Decimal | null
    Turnovers: Decimal | null
    PersonalFouls: Decimal | null
    Points: Decimal | null
    FantasyPointsFanDuel: Decimal | null
    FantasyPointsDraftKings: Decimal | null
    FantasyPointsYahoo: Decimal | null
    PlusMinus: Decimal | null
  }

  export type LastFiveGameAveragesCountAggregateOutputType = {
    PlayerID: number
    FantasyPoints: number
    Minutes: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: number
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: number
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: number
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: number
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    FantasyPointsFanDuel: number
    FantasyPointsDraftKings: number
    FantasyPointsYahoo: number
    PlusMinus: number
    _all: number
  }


  export type LastFiveGameAveragesAvgAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type LastFiveGameAveragesSumAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type LastFiveGameAveragesMinAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type LastFiveGameAveragesMaxAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
  }

  export type LastFiveGameAveragesCountAggregateInputType = {
    PlayerID?: true
    FantasyPoints?: true
    Minutes?: true
    FieldGoalsMade?: true
    FieldGoalsAttempted?: true
    FieldGoalsPercentage?: true
    TwoPointersMade?: true
    TwoPointersAttempted?: true
    TwoPointersPercentage?: true
    ThreePointersMade?: true
    ThreePointersAttempted?: true
    ThreePointersPercentage?: true
    FreeThrowsMade?: true
    FreeThrowsAttempted?: true
    FreeThrowsPercentage?: true
    OffensiveRebounds?: true
    DefensiveRebounds?: true
    Rebounds?: true
    Assists?: true
    Steals?: true
    BlockedShots?: true
    Turnovers?: true
    PersonalFouls?: true
    Points?: true
    FantasyPointsFanDuel?: true
    FantasyPointsDraftKings?: true
    FantasyPointsYahoo?: true
    PlusMinus?: true
    _all?: true
  }

  export type LastFiveGameAveragesAggregateArgs = {
    /**
     * Filter which LastFiveGameAverages to aggregate.
     * 
    **/
    where?: LastFiveGameAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastFiveGameAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<LastFiveGameAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LastFiveGameAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastFiveGameAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastFiveGameAverages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LastFiveGameAverages
    **/
    _count?: true | LastFiveGameAveragesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LastFiveGameAveragesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LastFiveGameAveragesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LastFiveGameAveragesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LastFiveGameAveragesMaxAggregateInputType
  }

  export type GetLastFiveGameAveragesAggregateType<T extends LastFiveGameAveragesAggregateArgs> = {
        [P in keyof T & keyof AggregateLastFiveGameAverages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLastFiveGameAverages[P]>
      : GetScalarType<T[P], AggregateLastFiveGameAverages[P]>
  }




  export type LastFiveGameAveragesGroupByArgs = {
    where?: LastFiveGameAveragesWhereInput
    orderBy?: Enumerable<LastFiveGameAveragesOrderByWithAggregationInput>
    by: Array<LastFiveGameAveragesScalarFieldEnum>
    having?: LastFiveGameAveragesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LastFiveGameAveragesCountAggregateInputType | true
    _avg?: LastFiveGameAveragesAvgAggregateInputType
    _sum?: LastFiveGameAveragesSumAggregateInputType
    _min?: LastFiveGameAveragesMinAggregateInputType
    _max?: LastFiveGameAveragesMaxAggregateInputType
  }


  export type LastFiveGameAveragesGroupByOutputType = {
    PlayerID: number
    FantasyPoints: Decimal
    Minutes: number
    FieldGoalsMade: Decimal
    FieldGoalsAttempted: Decimal
    FieldGoalsPercentage: Decimal
    TwoPointersMade: Decimal
    TwoPointersAttempted: Decimal
    TwoPointersPercentage: Decimal
    ThreePointersMade: Decimal
    ThreePointersAttempted: Decimal
    ThreePointersPercentage: Decimal
    FreeThrowsMade: Decimal
    FreeThrowsAttempted: Decimal
    FreeThrowsPercentage: Decimal
    OffensiveRebounds: Decimal
    DefensiveRebounds: Decimal
    Rebounds: Decimal
    Assists: Decimal
    Steals: Decimal
    BlockedShots: Decimal
    Turnovers: Decimal
    PersonalFouls: Decimal
    Points: Decimal
    FantasyPointsFanDuel: Decimal
    FantasyPointsDraftKings: Decimal
    FantasyPointsYahoo: Decimal
    PlusMinus: Decimal
    _count: LastFiveGameAveragesCountAggregateOutputType | null
    _avg: LastFiveGameAveragesAvgAggregateOutputType | null
    _sum: LastFiveGameAveragesSumAggregateOutputType | null
    _min: LastFiveGameAveragesMinAggregateOutputType | null
    _max: LastFiveGameAveragesMaxAggregateOutputType | null
  }

  type GetLastFiveGameAveragesGroupByPayload<T extends LastFiveGameAveragesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LastFiveGameAveragesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LastFiveGameAveragesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LastFiveGameAveragesGroupByOutputType[P]>
            : GetScalarType<T[P], LastFiveGameAveragesGroupByOutputType[P]>
        }
      >
    >


  export type LastFiveGameAveragesSelect = {
    PlayerID?: boolean
    player?: boolean | PlayerArgs
    FantasyPoints?: boolean
    Minutes?: boolean
    FieldGoalsMade?: boolean
    FieldGoalsAttempted?: boolean
    FieldGoalsPercentage?: boolean
    TwoPointersMade?: boolean
    TwoPointersAttempted?: boolean
    TwoPointersPercentage?: boolean
    ThreePointersMade?: boolean
    ThreePointersAttempted?: boolean
    ThreePointersPercentage?: boolean
    FreeThrowsMade?: boolean
    FreeThrowsAttempted?: boolean
    FreeThrowsPercentage?: boolean
    OffensiveRebounds?: boolean
    DefensiveRebounds?: boolean
    Rebounds?: boolean
    Assists?: boolean
    Steals?: boolean
    BlockedShots?: boolean
    Turnovers?: boolean
    PersonalFouls?: boolean
    Points?: boolean
    FantasyPointsFanDuel?: boolean
    FantasyPointsDraftKings?: boolean
    FantasyPointsYahoo?: boolean
    PlusMinus?: boolean
  }


  export type LastFiveGameAveragesInclude = {
    player?: boolean | PlayerArgs
  } 

  export type LastFiveGameAveragesGetPayload<S extends boolean | null | undefined | LastFiveGameAveragesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LastFiveGameAverages :
    S extends undefined ? never :
    S extends { include: any } & (LastFiveGameAveragesArgs | LastFiveGameAveragesFindManyArgs)
    ? LastFiveGameAverages  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'player' ? PlayerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LastFiveGameAveragesArgs | LastFiveGameAveragesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'player' ? PlayerGetPayload<S['select'][P]> :  P extends keyof LastFiveGameAverages ? LastFiveGameAverages[P] : never
  } 
      : LastFiveGameAverages


  type LastFiveGameAveragesCountArgs = Merge<
    Omit<LastFiveGameAveragesFindManyArgs, 'select' | 'include'> & {
      select?: LastFiveGameAveragesCountAggregateInputType | true
    }
  >

  export interface LastFiveGameAveragesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one LastFiveGameAverages that matches the filter.
     * @param {LastFiveGameAveragesFindUniqueArgs} args - Arguments to find a LastFiveGameAverages
     * @example
     * // Get one LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LastFiveGameAveragesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LastFiveGameAveragesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LastFiveGameAverages'> extends True ? Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>> : Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T> | null, null>

    /**
     * Find one LastFiveGameAverages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LastFiveGameAveragesFindUniqueOrThrowArgs} args - Arguments to find a LastFiveGameAverages
     * @example
     * // Get one LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LastFiveGameAveragesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LastFiveGameAveragesFindUniqueOrThrowArgs>
    ): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>>

    /**
     * Find the first LastFiveGameAverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesFindFirstArgs} args - Arguments to find a LastFiveGameAverages
     * @example
     * // Get one LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LastFiveGameAveragesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LastFiveGameAveragesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LastFiveGameAverages'> extends True ? Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>> : Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T> | null, null>

    /**
     * Find the first LastFiveGameAverages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesFindFirstOrThrowArgs} args - Arguments to find a LastFiveGameAverages
     * @example
     * // Get one LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LastFiveGameAveragesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LastFiveGameAveragesFindFirstOrThrowArgs>
    ): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>>

    /**
     * Find zero or more LastFiveGameAverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findMany()
     * 
     * // Get first 10 LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.findMany({ take: 10 })
     * 
     * // Only select the `PlayerID`
     * const lastFiveGameAveragesWithPlayerIDOnly = await prisma.lastFiveGameAverages.findMany({ select: { PlayerID: true } })
     * 
    **/
    findMany<T extends LastFiveGameAveragesFindManyArgs>(
      args?: SelectSubset<T, LastFiveGameAveragesFindManyArgs>
    ): PrismaPromise<Array<LastFiveGameAveragesGetPayload<T>>>

    /**
     * Create a LastFiveGameAverages.
     * @param {LastFiveGameAveragesCreateArgs} args - Arguments to create a LastFiveGameAverages.
     * @example
     * // Create one LastFiveGameAverages
     * const LastFiveGameAverages = await prisma.lastFiveGameAverages.create({
     *   data: {
     *     // ... data to create a LastFiveGameAverages
     *   }
     * })
     * 
    **/
    create<T extends LastFiveGameAveragesCreateArgs>(
      args: SelectSubset<T, LastFiveGameAveragesCreateArgs>
    ): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>>

    /**
     * Create many LastFiveGameAverages.
     *     @param {LastFiveGameAveragesCreateManyArgs} args - Arguments to create many LastFiveGameAverages.
     *     @example
     *     // Create many LastFiveGameAverages
     *     const lastFiveGameAverages = await prisma.lastFiveGameAverages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LastFiveGameAveragesCreateManyArgs>(
      args?: SelectSubset<T, LastFiveGameAveragesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LastFiveGameAverages.
     * @param {LastFiveGameAveragesDeleteArgs} args - Arguments to delete one LastFiveGameAverages.
     * @example
     * // Delete one LastFiveGameAverages
     * const LastFiveGameAverages = await prisma.lastFiveGameAverages.delete({
     *   where: {
     *     // ... filter to delete one LastFiveGameAverages
     *   }
     * })
     * 
    **/
    delete<T extends LastFiveGameAveragesDeleteArgs>(
      args: SelectSubset<T, LastFiveGameAveragesDeleteArgs>
    ): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>>

    /**
     * Update one LastFiveGameAverages.
     * @param {LastFiveGameAveragesUpdateArgs} args - Arguments to update one LastFiveGameAverages.
     * @example
     * // Update one LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LastFiveGameAveragesUpdateArgs>(
      args: SelectSubset<T, LastFiveGameAveragesUpdateArgs>
    ): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>>

    /**
     * Delete zero or more LastFiveGameAverages.
     * @param {LastFiveGameAveragesDeleteManyArgs} args - Arguments to filter LastFiveGameAverages to delete.
     * @example
     * // Delete a few LastFiveGameAverages
     * const { count } = await prisma.lastFiveGameAverages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LastFiveGameAveragesDeleteManyArgs>(
      args?: SelectSubset<T, LastFiveGameAveragesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LastFiveGameAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LastFiveGameAveragesUpdateManyArgs>(
      args: SelectSubset<T, LastFiveGameAveragesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LastFiveGameAverages.
     * @param {LastFiveGameAveragesUpsertArgs} args - Arguments to update or create a LastFiveGameAverages.
     * @example
     * // Update or create a LastFiveGameAverages
     * const lastFiveGameAverages = await prisma.lastFiveGameAverages.upsert({
     *   create: {
     *     // ... data to create a LastFiveGameAverages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LastFiveGameAverages we want to update
     *   }
     * })
    **/
    upsert<T extends LastFiveGameAveragesUpsertArgs>(
      args: SelectSubset<T, LastFiveGameAveragesUpsertArgs>
    ): Prisma__LastFiveGameAveragesClient<LastFiveGameAveragesGetPayload<T>>

    /**
     * Count the number of LastFiveGameAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesCountArgs} args - Arguments to filter LastFiveGameAverages to count.
     * @example
     * // Count the number of LastFiveGameAverages
     * const count = await prisma.lastFiveGameAverages.count({
     *   where: {
     *     // ... the filter for the LastFiveGameAverages we want to count
     *   }
     * })
    **/
    count<T extends LastFiveGameAveragesCountArgs>(
      args?: Subset<T, LastFiveGameAveragesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LastFiveGameAveragesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LastFiveGameAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LastFiveGameAveragesAggregateArgs>(args: Subset<T, LastFiveGameAveragesAggregateArgs>): PrismaPromise<GetLastFiveGameAveragesAggregateType<T>>

    /**
     * Group by LastFiveGameAverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LastFiveGameAveragesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LastFiveGameAveragesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LastFiveGameAveragesGroupByArgs['orderBy'] }
        : { orderBy?: LastFiveGameAveragesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LastFiveGameAveragesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLastFiveGameAveragesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LastFiveGameAverages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LastFiveGameAveragesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    player<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LastFiveGameAverages base type for findUnique actions
   */
  export type LastFiveGameAveragesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * Filter, which LastFiveGameAverages to fetch.
     * 
    **/
    where: LastFiveGameAveragesWhereUniqueInput
  }

  /**
   * LastFiveGameAverages findUnique
   */
  export interface LastFiveGameAveragesFindUniqueArgs extends LastFiveGameAveragesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LastFiveGameAverages findUniqueOrThrow
   */
  export type LastFiveGameAveragesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * Filter, which LastFiveGameAverages to fetch.
     * 
    **/
    where: LastFiveGameAveragesWhereUniqueInput
  }


  /**
   * LastFiveGameAverages base type for findFirst actions
   */
  export type LastFiveGameAveragesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * Filter, which LastFiveGameAverages to fetch.
     * 
    **/
    where?: LastFiveGameAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastFiveGameAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<LastFiveGameAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LastFiveGameAverages.
     * 
    **/
    cursor?: LastFiveGameAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastFiveGameAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastFiveGameAverages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LastFiveGameAverages.
     * 
    **/
    distinct?: Enumerable<LastFiveGameAveragesScalarFieldEnum>
  }

  /**
   * LastFiveGameAverages findFirst
   */
  export interface LastFiveGameAveragesFindFirstArgs extends LastFiveGameAveragesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LastFiveGameAverages findFirstOrThrow
   */
  export type LastFiveGameAveragesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * Filter, which LastFiveGameAverages to fetch.
     * 
    **/
    where?: LastFiveGameAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastFiveGameAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<LastFiveGameAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LastFiveGameAverages.
     * 
    **/
    cursor?: LastFiveGameAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastFiveGameAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastFiveGameAverages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LastFiveGameAverages.
     * 
    **/
    distinct?: Enumerable<LastFiveGameAveragesScalarFieldEnum>
  }


  /**
   * LastFiveGameAverages findMany
   */
  export type LastFiveGameAveragesFindManyArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * Filter, which LastFiveGameAverages to fetch.
     * 
    **/
    where?: LastFiveGameAveragesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LastFiveGameAverages to fetch.
     * 
    **/
    orderBy?: Enumerable<LastFiveGameAveragesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LastFiveGameAverages.
     * 
    **/
    cursor?: LastFiveGameAveragesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LastFiveGameAverages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LastFiveGameAverages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LastFiveGameAveragesScalarFieldEnum>
  }


  /**
   * LastFiveGameAverages create
   */
  export type LastFiveGameAveragesCreateArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * The data needed to create a LastFiveGameAverages.
     * 
    **/
    data: XOR<LastFiveGameAveragesCreateInput, LastFiveGameAveragesUncheckedCreateInput>
  }


  /**
   * LastFiveGameAverages createMany
   */
  export type LastFiveGameAveragesCreateManyArgs = {
    /**
     * The data used to create many LastFiveGameAverages.
     * 
    **/
    data: Enumerable<LastFiveGameAveragesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LastFiveGameAverages update
   */
  export type LastFiveGameAveragesUpdateArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * The data needed to update a LastFiveGameAverages.
     * 
    **/
    data: XOR<LastFiveGameAveragesUpdateInput, LastFiveGameAveragesUncheckedUpdateInput>
    /**
     * Choose, which LastFiveGameAverages to update.
     * 
    **/
    where: LastFiveGameAveragesWhereUniqueInput
  }


  /**
   * LastFiveGameAverages updateMany
   */
  export type LastFiveGameAveragesUpdateManyArgs = {
    /**
     * The data used to update LastFiveGameAverages.
     * 
    **/
    data: XOR<LastFiveGameAveragesUpdateManyMutationInput, LastFiveGameAveragesUncheckedUpdateManyInput>
    /**
     * Filter which LastFiveGameAverages to update
     * 
    **/
    where?: LastFiveGameAveragesWhereInput
  }


  /**
   * LastFiveGameAverages upsert
   */
  export type LastFiveGameAveragesUpsertArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * The filter to search for the LastFiveGameAverages to update in case it exists.
     * 
    **/
    where: LastFiveGameAveragesWhereUniqueInput
    /**
     * In case the LastFiveGameAverages found by the `where` argument doesn't exist, create a new LastFiveGameAverages with this data.
     * 
    **/
    create: XOR<LastFiveGameAveragesCreateInput, LastFiveGameAveragesUncheckedCreateInput>
    /**
     * In case the LastFiveGameAverages was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LastFiveGameAveragesUpdateInput, LastFiveGameAveragesUncheckedUpdateInput>
  }


  /**
   * LastFiveGameAverages delete
   */
  export type LastFiveGameAveragesDeleteArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
    /**
     * Filter which LastFiveGameAverages to delete.
     * 
    **/
    where: LastFiveGameAveragesWhereUniqueInput
  }


  /**
   * LastFiveGameAverages deleteMany
   */
  export type LastFiveGameAveragesDeleteManyArgs = {
    /**
     * Filter which LastFiveGameAverages to delete
     * 
    **/
    where?: LastFiveGameAveragesWhereInput
  }


  /**
   * LastFiveGameAverages without action
   */
  export type LastFiveGameAveragesArgs = {
    /**
     * Select specific fields to fetch from the LastFiveGameAverages
     * 
    **/
    select?: LastFiveGameAveragesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LastFiveGameAveragesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GameScalarFieldEnum: {
    GameID: 'GameID',
    Season: 'Season',
    SeasonType: 'SeasonType',
    Status: 'Status',
    Channel: 'Channel',
    Day: 'Day',
    nba_day: 'nba_day',
    DateTime: 'DateTime',
    AwayTeamID: 'AwayTeamID',
    HomeTeamID: 'HomeTeamID',
    stadium: 'stadium',
    city: 'city',
    AwayTeamScore: 'AwayTeamScore',
    HomeTeamScore: 'HomeTeamScore',
    Quarter: 'Quarter',
    TimeRemainingMinutes: 'TimeRemainingMinutes',
    TimeRemainingSeconds: 'TimeRemainingSeconds',
    Quarters: 'Quarters',
    CrewChiefID: 'CrewChiefID',
    UmpireID: 'UmpireID',
    RefereeID: 'RefereeID'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const LastFiveGameAveragesScalarFieldEnum: {
    PlayerID: 'PlayerID',
    FantasyPoints: 'FantasyPoints',
    Minutes: 'Minutes',
    FieldGoalsMade: 'FieldGoalsMade',
    FieldGoalsAttempted: 'FieldGoalsAttempted',
    FieldGoalsPercentage: 'FieldGoalsPercentage',
    TwoPointersMade: 'TwoPointersMade',
    TwoPointersAttempted: 'TwoPointersAttempted',
    TwoPointersPercentage: 'TwoPointersPercentage',
    ThreePointersMade: 'ThreePointersMade',
    ThreePointersAttempted: 'ThreePointersAttempted',
    ThreePointersPercentage: 'ThreePointersPercentage',
    FreeThrowsMade: 'FreeThrowsMade',
    FreeThrowsAttempted: 'FreeThrowsAttempted',
    FreeThrowsPercentage: 'FreeThrowsPercentage',
    OffensiveRebounds: 'OffensiveRebounds',
    DefensiveRebounds: 'DefensiveRebounds',
    Rebounds: 'Rebounds',
    Assists: 'Assists',
    Steals: 'Steals',
    BlockedShots: 'BlockedShots',
    Turnovers: 'Turnovers',
    PersonalFouls: 'PersonalFouls',
    Points: 'Points',
    FantasyPointsFanDuel: 'FantasyPointsFanDuel',
    FantasyPointsDraftKings: 'FantasyPointsDraftKings',
    FantasyPointsYahoo: 'FantasyPointsYahoo',
    PlusMinus: 'PlusMinus'
  };

  export type LastFiveGameAveragesScalarFieldEnum = (typeof LastFiveGameAveragesScalarFieldEnum)[keyof typeof LastFiveGameAveragesScalarFieldEnum]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const PlayerScalarFieldEnum: {
    PlayerID: 'PlayerID',
    TeamID: 'TeamID',
    Jersey: 'Jersey',
    PositionCategory: 'PositionCategory',
    Position: 'Position',
    FirstName: 'FirstName',
    LastName: 'LastName',
    s_name: 's_name',
    Height: 'Height',
    Weight: 'Weight',
    BirthDate: 'BirthDate',
    BirthCity: 'BirthCity',
    BirthState: 'BirthState',
    BirthCountry: 'BirthCountry',
    HighSchool: 'HighSchool',
    College: 'College',
    PhotoUrl: 'PhotoUrl',
    SportRadarPlayerID: 'SportRadarPlayerID',
    RotoworldPlayerID: 'RotoworldPlayerID',
    RotoWirePlayerID: 'RotoWirePlayerID',
    FantasyAlarmPlayerID: 'FantasyAlarmPlayerID',
    InjuryStatus: 'InjuryStatus',
    InjuryBodyPart: 'InjuryBodyPart',
    InjuryStartDate: 'InjuryStartDate',
    InjuryNotes: 'InjuryNotes',
    FanDuelPlayerID: 'FanDuelPlayerID',
    DraftKingsPlayerID: 'DraftKingsPlayerID',
    YahooPlayerID: 'YahooPlayerID',
    FanDuelName: 'FanDuelName',
    DraftKingsName: 'DraftKingsName',
    YahooName: 'YahooName',
    DepthChartPosition: 'DepthChartPosition',
    DepthChartOrder: 'DepthChartOrder',
    UsaTodayPlayerID: 'UsaTodayPlayerID',
    UsaTodayHeadshotUrl: 'UsaTodayHeadshotUrl',
    UsaTodayHeadshotNoBackgroundUrl: 'UsaTodayHeadshotNoBackgroundUrl',
    UsaTodayHeadshotUpdated: 'UsaTodayHeadshotUpdated',
    UsaTodayHeadshotNoBackgroundUpdated: 'UsaTodayHeadshotNoBackgroundUpdated',
    NbaDotComPlayerID: 'NbaDotComPlayerID'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RefereeScalarFieldEnum: {
    RefereeID: 'RefereeID',
    Name: 'Name',
    Number: 'Number'
  };

  export type RefereeScalarFieldEnum = (typeof RefereeScalarFieldEnum)[keyof typeof RefereeScalarFieldEnum]


  export const SeasonAveragesScalarFieldEnum: {
    PlayerID: 'PlayerID',
    FantasyPoints: 'FantasyPoints',
    Minutes: 'Minutes',
    FieldGoalsMade: 'FieldGoalsMade',
    FieldGoalsAttempted: 'FieldGoalsAttempted',
    FieldGoalsPercentage: 'FieldGoalsPercentage',
    TwoPointersMade: 'TwoPointersMade',
    TwoPointersAttempted: 'TwoPointersAttempted',
    TwoPointersPercentage: 'TwoPointersPercentage',
    ThreePointersMade: 'ThreePointersMade',
    ThreePointersAttempted: 'ThreePointersAttempted',
    ThreePointersPercentage: 'ThreePointersPercentage',
    FreeThrowsMade: 'FreeThrowsMade',
    FreeThrowsAttempted: 'FreeThrowsAttempted',
    FreeThrowsPercentage: 'FreeThrowsPercentage',
    OffensiveRebounds: 'OffensiveRebounds',
    DefensiveRebounds: 'DefensiveRebounds',
    Rebounds: 'Rebounds',
    Assists: 'Assists',
    Steals: 'Steals',
    BlockedShots: 'BlockedShots',
    Turnovers: 'Turnovers',
    PersonalFouls: 'PersonalFouls',
    Points: 'Points',
    FantasyPointsFanDuel: 'FantasyPointsFanDuel',
    FantasyPointsDraftKings: 'FantasyPointsDraftKings',
    FantasyPointsYahoo: 'FantasyPointsYahoo',
    PlusMinus: 'PlusMinus'
  };

  export type SeasonAveragesScalarFieldEnum = (typeof SeasonAveragesScalarFieldEnum)[keyof typeof SeasonAveragesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StatlineScalarFieldEnum: {
    StatID: 'StatID',
    TeamID: 'TeamID',
    PlayerID: 'PlayerID',
    Name: 'Name',
    Position: 'Position',
    Started: 'Started',
    InjuryStatus: 'InjuryStatus',
    InjuryBodyPart: 'InjuryBodyPart',
    InjuryStartDate: 'InjuryStartDate',
    InjuryNotes: 'InjuryNotes',
    GameID: 'GameID',
    OpponentID: 'OpponentID',
    HomeOrAway: 'HomeOrAway',
    FantasyPoints: 'FantasyPoints',
    Minutes: 'Minutes',
    Seconds: 'Seconds',
    FieldGoalsMade: 'FieldGoalsMade',
    FieldGoalsAttempted: 'FieldGoalsAttempted',
    FieldGoalsPercentage: 'FieldGoalsPercentage',
    EffectiveFieldGoalsPercentage: 'EffectiveFieldGoalsPercentage',
    TwoPointersMade: 'TwoPointersMade',
    TwoPointersAttempted: 'TwoPointersAttempted',
    TwoPointersPercentage: 'TwoPointersPercentage',
    ThreePointersMade: 'ThreePointersMade',
    ThreePointersAttempted: 'ThreePointersAttempted',
    ThreePointersPercentage: 'ThreePointersPercentage',
    FreeThrowsMade: 'FreeThrowsMade',
    FreeThrowsAttempted: 'FreeThrowsAttempted',
    FreeThrowsPercentage: 'FreeThrowsPercentage',
    OffensiveRebounds: 'OffensiveRebounds',
    DefensiveRebounds: 'DefensiveRebounds',
    Rebounds: 'Rebounds',
    OffensiveReboundsPercentage: 'OffensiveReboundsPercentage',
    DefensiveReboundsPercentage: 'DefensiveReboundsPercentage',
    TotalReboundsPercentage: 'TotalReboundsPercentage',
    Assists: 'Assists',
    Steals: 'Steals',
    BlockedShots: 'BlockedShots',
    Turnovers: 'Turnovers',
    PersonalFouls: 'PersonalFouls',
    Points: 'Points',
    TrueShootingPercentage: 'TrueShootingPercentage',
    PlayerEfficiencyRating: 'PlayerEfficiencyRating',
    AssistsPercentage: 'AssistsPercentage',
    StealsPercentage: 'StealsPercentage',
    BlocksPercentage: 'BlocksPercentage',
    TurnOversPercentage: 'TurnOversPercentage',
    UsageRatePercentage: 'UsageRatePercentage',
    FantasyPointsFanDuel: 'FantasyPointsFanDuel',
    FantasyPointsDraftKings: 'FantasyPointsDraftKings',
    FantasyPointsYahoo: 'FantasyPointsYahoo',
    PlusMinus: 'PlusMinus',
    DoubleDoubles: 'DoubleDoubles',
    TripleDoubles: 'TripleDoubles',
    FantasyPointsFantasyDraft: 'FantasyPointsFantasyDraft'
  };

  export type StatlineScalarFieldEnum = (typeof StatlineScalarFieldEnum)[keyof typeof StatlineScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    TeamID: 'TeamID',
    Key: 'Key',
    City: 'City',
    Name: 'Name',
    stadium: 'stadium',
    Conference: 'Conference',
    Division: 'Division',
    inner_color: 'inner_color',
    outer_color: 'outer_color',
    WikipediaLogoUrl: 'WikipediaLogoUrl',
    Wins: 'Wins',
    Losses: 'Losses'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamStatlinesScalarFieldEnum: {
    StatID: 'StatID',
    TeamID: 'TeamID',
    Season: 'Season',
    Name: 'Name',
    Team: 'Team',
    Wins: 'Wins',
    Losses: 'Losses',
    GameID: 'GameID',
    OpponentID: 'OpponentID',
    Opponent: 'Opponent',
    HomeOrAway: 'HomeOrAway',
    IsGameOver: 'IsGameOver',
    FieldGoalsMade: 'FieldGoalsMade',
    FieldGoalsAttempted: 'FieldGoalsAttempted',
    FieldGoalsPercentage: 'FieldGoalsPercentage',
    EffectiveFieldGoalsPercentage: 'EffectiveFieldGoalsPercentage',
    TwoPointersMade: 'TwoPointersMade',
    TwoPointersAttempted: 'TwoPointersAttempted',
    TwoPointersPercentage: 'TwoPointersPercentage',
    ThreePointersMade: 'ThreePointersMade',
    ThreePointersAttempted: 'ThreePointersAttempted',
    ThreePointersPercentage: 'ThreePointersPercentage',
    FreeThrowsMade: 'FreeThrowsMade',
    FreeThrowsAttempted: 'FreeThrowsAttempted',
    FreeThrowsPercentage: 'FreeThrowsPercentage',
    OffensiveRebounds: 'OffensiveRebounds',
    DefensiveRebounds: 'DefensiveRebounds',
    Rebounds: 'Rebounds',
    Assists: 'Assists',
    Steals: 'Steals',
    BlockedShots: 'BlockedShots',
    Turnovers: 'Turnovers',
    PersonalFouls: 'PersonalFouls',
    Points: 'Points',
    TrueShootingPercentage: 'TrueShootingPercentage',
    FantasyPointsFanDuel: 'FantasyPointsFanDuel',
    FantasyPointsDraftKings: 'FantasyPointsDraftKings',
    FantasyPointsYahoo: 'FantasyPointsYahoo'
  };

  export type TeamStatlinesScalarFieldEnum = (typeof TeamStatlinesScalarFieldEnum)[keyof typeof TeamStatlinesScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type TeamWhereInput = {
    AND?: Enumerable<TeamWhereInput>
    OR?: Enumerable<TeamWhereInput>
    NOT?: Enumerable<TeamWhereInput>
    TeamID?: IntFilter | number
    Key?: StringFilter | string
    City?: StringFilter | string
    Name?: StringFilter | string
    stadium?: StringFilter | string
    Conference?: StringFilter | string
    Division?: StringFilter | string
    inner_color?: StringFilter | string
    outer_color?: StringFilter | string
    WikipediaLogoUrl?: StringFilter | string
    Wins?: IntFilter | number
    Losses?: IntFilter | number
    home_games?: GameListRelationFilter
    away_games?: GameListRelationFilter
    team_game_statlines?: TeamStatlinesListRelationFilter
    opponent_team_game_statlines?: TeamStatlinesListRelationFilter
    players?: PlayerListRelationFilter
    statlines?: StatlineListRelationFilter
    opponent_team_statlines?: StatlineListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    TeamID?: SortOrder
    Key?: SortOrder
    City?: SortOrder
    Name?: SortOrder
    stadium?: SortOrder
    Conference?: SortOrder
    Division?: SortOrder
    inner_color?: SortOrder
    outer_color?: SortOrder
    WikipediaLogoUrl?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    home_games?: GameOrderByRelationAggregateInput
    away_games?: GameOrderByRelationAggregateInput
    team_game_statlines?: TeamStatlinesOrderByRelationAggregateInput
    opponent_team_game_statlines?: TeamStatlinesOrderByRelationAggregateInput
    players?: PlayerOrderByRelationAggregateInput
    statlines?: StatlineOrderByRelationAggregateInput
    opponent_team_statlines?: StatlineOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = {
    TeamID?: number
  }

  export type TeamOrderByWithAggregationInput = {
    TeamID?: SortOrder
    Key?: SortOrder
    City?: SortOrder
    Name?: SortOrder
    stadium?: SortOrder
    Conference?: SortOrder
    Division?: SortOrder
    inner_color?: SortOrder
    outer_color?: SortOrder
    WikipediaLogoUrl?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamScalarWhereWithAggregatesInput>
    TeamID?: IntWithAggregatesFilter | number
    Key?: StringWithAggregatesFilter | string
    City?: StringWithAggregatesFilter | string
    Name?: StringWithAggregatesFilter | string
    stadium?: StringWithAggregatesFilter | string
    Conference?: StringWithAggregatesFilter | string
    Division?: StringWithAggregatesFilter | string
    inner_color?: StringWithAggregatesFilter | string
    outer_color?: StringWithAggregatesFilter | string
    WikipediaLogoUrl?: StringWithAggregatesFilter | string
    Wins?: IntWithAggregatesFilter | number
    Losses?: IntWithAggregatesFilter | number
  }

  export type GameWhereInput = {
    AND?: Enumerable<GameWhereInput>
    OR?: Enumerable<GameWhereInput>
    NOT?: Enumerable<GameWhereInput>
    GameID?: IntFilter | number
    Season?: IntFilter | number
    SeasonType?: IntFilter | number
    Status?: StringFilter | string
    Channel?: StringFilter | string
    Day?: DateTimeFilter | Date | string
    nba_day?: StringFilter | string
    DateTime?: DateTimeFilter | Date | string
    AwayTeamID?: IntFilter | number
    HomeTeamID?: IntFilter | number
    away_team?: XOR<TeamRelationFilter, TeamWhereInput>
    home_team?: XOR<TeamRelationFilter, TeamWhereInput>
    stadium?: StringFilter | string
    city?: StringFilter | string
    AwayTeamScore?: IntNullableFilter | number | null
    HomeTeamScore?: IntNullableFilter | number | null
    Quarter?: StringNullableFilter | string | null
    TimeRemainingMinutes?: StringNullableFilter | string | null
    TimeRemainingSeconds?: StringNullableFilter | string | null
    Quarters?: JsonNullableFilter
    CrewChiefID?: IntNullableFilter | number | null
    crewchief?: XOR<RefereeRelationFilter, RefereeWhereInput> | null
    UmpireID?: IntNullableFilter | number | null
    umpire?: XOR<RefereeRelationFilter, RefereeWhereInput> | null
    RefereeID?: IntNullableFilter | number | null
    referee?: XOR<RefereeRelationFilter, RefereeWhereInput> | null
    team_statlines?: TeamStatlinesListRelationFilter
    statlines?: StatlineListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    Status?: SortOrder
    Channel?: SortOrder
    Day?: SortOrder
    nba_day?: SortOrder
    DateTime?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    away_team?: TeamOrderByWithRelationInput
    home_team?: TeamOrderByWithRelationInput
    stadium?: SortOrder
    city?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    Quarter?: SortOrder
    TimeRemainingMinutes?: SortOrder
    TimeRemainingSeconds?: SortOrder
    Quarters?: SortOrder
    CrewChiefID?: SortOrder
    crewchief?: RefereeOrderByWithRelationInput
    UmpireID?: SortOrder
    umpire?: RefereeOrderByWithRelationInput
    RefereeID?: SortOrder
    referee?: RefereeOrderByWithRelationInput
    team_statlines?: TeamStatlinesOrderByRelationAggregateInput
    statlines?: StatlineOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = {
    GameID?: number
  }

  export type GameOrderByWithAggregationInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    Status?: SortOrder
    Channel?: SortOrder
    Day?: SortOrder
    nba_day?: SortOrder
    DateTime?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    stadium?: SortOrder
    city?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    Quarter?: SortOrder
    TimeRemainingMinutes?: SortOrder
    TimeRemainingSeconds?: SortOrder
    Quarters?: SortOrder
    CrewChiefID?: SortOrder
    UmpireID?: SortOrder
    RefereeID?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameScalarWhereWithAggregatesInput>
    GameID?: IntWithAggregatesFilter | number
    Season?: IntWithAggregatesFilter | number
    SeasonType?: IntWithAggregatesFilter | number
    Status?: StringWithAggregatesFilter | string
    Channel?: StringWithAggregatesFilter | string
    Day?: DateTimeWithAggregatesFilter | Date | string
    nba_day?: StringWithAggregatesFilter | string
    DateTime?: DateTimeWithAggregatesFilter | Date | string
    AwayTeamID?: IntWithAggregatesFilter | number
    HomeTeamID?: IntWithAggregatesFilter | number
    stadium?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    AwayTeamScore?: IntNullableWithAggregatesFilter | number | null
    HomeTeamScore?: IntNullableWithAggregatesFilter | number | null
    Quarter?: StringNullableWithAggregatesFilter | string | null
    TimeRemainingMinutes?: StringNullableWithAggregatesFilter | string | null
    TimeRemainingSeconds?: StringNullableWithAggregatesFilter | string | null
    Quarters?: JsonNullableWithAggregatesFilter
    CrewChiefID?: IntNullableWithAggregatesFilter | number | null
    UmpireID?: IntNullableWithAggregatesFilter | number | null
    RefereeID?: IntNullableWithAggregatesFilter | number | null
  }

  export type TeamStatlinesWhereInput = {
    AND?: Enumerable<TeamStatlinesWhereInput>
    OR?: Enumerable<TeamStatlinesWhereInput>
    NOT?: Enumerable<TeamStatlinesWhereInput>
    StatID?: IntFilter | number
    TeamID?: IntFilter | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    Season?: IntFilter | number
    Name?: StringFilter | string
    Team?: StringFilter | string
    Wins?: IntFilter | number
    Losses?: IntFilter | number
    GameID?: IntFilter | number
    game?: XOR<GameRelationFilter, GameWhereInput>
    OpponentID?: IntFilter | number
    opponent_team?: XOR<TeamRelationFilter, TeamWhereInput>
    Opponent?: StringFilter | string
    HomeOrAway?: StringFilter | string
    IsGameOver?: BoolFilter | boolean
    FieldGoalsMade?: IntFilter | number
    FieldGoalsAttempted?: IntFilter | number
    FieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFilter | number
    TwoPointersAttempted?: IntFilter | number
    TwoPointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFilter | number
    ThreePointersAttempted?: IntFilter | number
    ThreePointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFilter | number
    FreeThrowsAttempted?: IntFilter | number
    FreeThrowsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFilter | number
    DefensiveRebounds?: IntFilter | number
    Rebounds?: IntFilter | number
    Assists?: IntFilter | number
    Steals?: IntFilter | number
    BlockedShots?: IntFilter | number
    Turnovers?: IntFilter | number
    PersonalFouls?: IntFilter | number
    Points?: IntFilter | number
    TrueShootingPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesOrderByWithRelationInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    team?: TeamOrderByWithRelationInput
    Season?: SortOrder
    Name?: SortOrder
    Team?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    game?: GameOrderByWithRelationInput
    OpponentID?: SortOrder
    opponent_team?: TeamOrderByWithRelationInput
    Opponent?: SortOrder
    HomeOrAway?: SortOrder
    IsGameOver?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
  }

  export type TeamStatlinesWhereUniqueInput = {
    StatID?: number
  }

  export type TeamStatlinesOrderByWithAggregationInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    Season?: SortOrder
    Name?: SortOrder
    Team?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    Opponent?: SortOrder
    HomeOrAway?: SortOrder
    IsGameOver?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    _count?: TeamStatlinesCountOrderByAggregateInput
    _avg?: TeamStatlinesAvgOrderByAggregateInput
    _max?: TeamStatlinesMaxOrderByAggregateInput
    _min?: TeamStatlinesMinOrderByAggregateInput
    _sum?: TeamStatlinesSumOrderByAggregateInput
  }

  export type TeamStatlinesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamStatlinesScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamStatlinesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamStatlinesScalarWhereWithAggregatesInput>
    StatID?: IntWithAggregatesFilter | number
    TeamID?: IntWithAggregatesFilter | number
    Season?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Team?: StringWithAggregatesFilter | string
    Wins?: IntWithAggregatesFilter | number
    Losses?: IntWithAggregatesFilter | number
    GameID?: IntWithAggregatesFilter | number
    OpponentID?: IntWithAggregatesFilter | number
    Opponent?: StringWithAggregatesFilter | string
    HomeOrAway?: StringWithAggregatesFilter | string
    IsGameOver?: BoolWithAggregatesFilter | boolean
    FieldGoalsMade?: IntWithAggregatesFilter | number
    FieldGoalsAttempted?: IntWithAggregatesFilter | number
    FieldGoalsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntWithAggregatesFilter | number
    TwoPointersAttempted?: IntWithAggregatesFilter | number
    TwoPointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntWithAggregatesFilter | number
    ThreePointersAttempted?: IntWithAggregatesFilter | number
    ThreePointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntWithAggregatesFilter | number
    FreeThrowsAttempted?: IntWithAggregatesFilter | number
    FreeThrowsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntWithAggregatesFilter | number
    DefensiveRebounds?: IntWithAggregatesFilter | number
    Rebounds?: IntWithAggregatesFilter | number
    Assists?: IntWithAggregatesFilter | number
    Steals?: IntWithAggregatesFilter | number
    BlockedShots?: IntWithAggregatesFilter | number
    Turnovers?: IntWithAggregatesFilter | number
    PersonalFouls?: IntWithAggregatesFilter | number
    Points?: IntWithAggregatesFilter | number
    TrueShootingPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type PlayerWhereInput = {
    AND?: Enumerable<PlayerWhereInput>
    OR?: Enumerable<PlayerWhereInput>
    NOT?: Enumerable<PlayerWhereInput>
    PlayerID?: IntFilter | number
    TeamID?: IntFilter | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    Jersey?: IntFilter | number
    PositionCategory?: StringFilter | string
    Position?: StringFilter | string
    FirstName?: StringFilter | string
    LastName?: StringFilter | string
    s_name?: StringFilter | string
    Height?: IntFilter | number
    Weight?: IntFilter | number
    BirthDate?: StringFilter | string
    BirthCity?: StringFilter | string
    BirthState?: StringFilter | string
    BirthCountry?: StringFilter | string
    HighSchool?: StringFilter | string
    College?: StringFilter | string
    PhotoUrl?: StringFilter | string
    SportRadarPlayerID?: StringFilter | string
    RotoworldPlayerID?: IntFilter | number
    RotoWirePlayerID?: IntFilter | number
    FantasyAlarmPlayerID?: IntFilter | number
    InjuryStatus?: StringNullableFilter | string | null
    InjuryBodyPart?: StringNullableFilter | string | null
    InjuryStartDate?: StringNullableFilter | string | null
    InjuryNotes?: StringNullableFilter | string | null
    FanDuelPlayerID?: IntFilter | number
    DraftKingsPlayerID?: IntFilter | number
    YahooPlayerID?: IntFilter | number
    FanDuelName?: StringFilter | string
    DraftKingsName?: StringFilter | string
    YahooName?: StringFilter | string
    DepthChartPosition?: StringFilter | string
    DepthChartOrder?: IntFilter | number
    UsaTodayPlayerID?: IntFilter | number
    UsaTodayHeadshotUrl?: StringFilter | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFilter | string
    UsaTodayHeadshotUpdated?: StringFilter | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFilter | string
    NbaDotComPlayerID?: IntFilter | number
    season_averages?: XOR<SeasonAveragesRelationFilter, SeasonAveragesWhereInput> | null
    last_five_averages?: XOR<LastFiveGameAveragesRelationFilter, LastFiveGameAveragesWhereInput> | null
    statlines?: StatlineListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    team?: TeamOrderByWithRelationInput
    Jersey?: SortOrder
    PositionCategory?: SortOrder
    Position?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    s_name?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    BirthDate?: SortOrder
    BirthCity?: SortOrder
    BirthState?: SortOrder
    BirthCountry?: SortOrder
    HighSchool?: SortOrder
    College?: SortOrder
    PhotoUrl?: SortOrder
    SportRadarPlayerID?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    FanDuelName?: SortOrder
    DraftKingsName?: SortOrder
    YahooName?: SortOrder
    DepthChartPosition?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    UsaTodayHeadshotUrl?: SortOrder
    UsaTodayHeadshotNoBackgroundUrl?: SortOrder
    UsaTodayHeadshotUpdated?: SortOrder
    UsaTodayHeadshotNoBackgroundUpdated?: SortOrder
    NbaDotComPlayerID?: SortOrder
    season_averages?: SeasonAveragesOrderByWithRelationInput
    last_five_averages?: LastFiveGameAveragesOrderByWithRelationInput
    statlines?: StatlineOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = {
    PlayerID?: number
  }

  export type PlayerOrderByWithAggregationInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    Jersey?: SortOrder
    PositionCategory?: SortOrder
    Position?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    s_name?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    BirthDate?: SortOrder
    BirthCity?: SortOrder
    BirthState?: SortOrder
    BirthCountry?: SortOrder
    HighSchool?: SortOrder
    College?: SortOrder
    PhotoUrl?: SortOrder
    SportRadarPlayerID?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    FanDuelName?: SortOrder
    DraftKingsName?: SortOrder
    YahooName?: SortOrder
    DepthChartPosition?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    UsaTodayHeadshotUrl?: SortOrder
    UsaTodayHeadshotNoBackgroundUrl?: SortOrder
    UsaTodayHeadshotUpdated?: SortOrder
    UsaTodayHeadshotNoBackgroundUpdated?: SortOrder
    NbaDotComPlayerID?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    PlayerID?: IntWithAggregatesFilter | number
    TeamID?: IntWithAggregatesFilter | number
    Jersey?: IntWithAggregatesFilter | number
    PositionCategory?: StringWithAggregatesFilter | string
    Position?: StringWithAggregatesFilter | string
    FirstName?: StringWithAggregatesFilter | string
    LastName?: StringWithAggregatesFilter | string
    s_name?: StringWithAggregatesFilter | string
    Height?: IntWithAggregatesFilter | number
    Weight?: IntWithAggregatesFilter | number
    BirthDate?: StringWithAggregatesFilter | string
    BirthCity?: StringWithAggregatesFilter | string
    BirthState?: StringWithAggregatesFilter | string
    BirthCountry?: StringWithAggregatesFilter | string
    HighSchool?: StringWithAggregatesFilter | string
    College?: StringWithAggregatesFilter | string
    PhotoUrl?: StringWithAggregatesFilter | string
    SportRadarPlayerID?: StringWithAggregatesFilter | string
    RotoworldPlayerID?: IntWithAggregatesFilter | number
    RotoWirePlayerID?: IntWithAggregatesFilter | number
    FantasyAlarmPlayerID?: IntWithAggregatesFilter | number
    InjuryStatus?: StringNullableWithAggregatesFilter | string | null
    InjuryBodyPart?: StringNullableWithAggregatesFilter | string | null
    InjuryStartDate?: StringNullableWithAggregatesFilter | string | null
    InjuryNotes?: StringNullableWithAggregatesFilter | string | null
    FanDuelPlayerID?: IntWithAggregatesFilter | number
    DraftKingsPlayerID?: IntWithAggregatesFilter | number
    YahooPlayerID?: IntWithAggregatesFilter | number
    FanDuelName?: StringWithAggregatesFilter | string
    DraftKingsName?: StringWithAggregatesFilter | string
    YahooName?: StringWithAggregatesFilter | string
    DepthChartPosition?: StringWithAggregatesFilter | string
    DepthChartOrder?: IntWithAggregatesFilter | number
    UsaTodayPlayerID?: IntWithAggregatesFilter | number
    UsaTodayHeadshotUrl?: StringWithAggregatesFilter | string
    UsaTodayHeadshotNoBackgroundUrl?: StringWithAggregatesFilter | string
    UsaTodayHeadshotUpdated?: StringWithAggregatesFilter | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringWithAggregatesFilter | string
    NbaDotComPlayerID?: IntWithAggregatesFilter | number
  }

  export type StatlineWhereInput = {
    AND?: Enumerable<StatlineWhereInput>
    OR?: Enumerable<StatlineWhereInput>
    NOT?: Enumerable<StatlineWhereInput>
    StatID?: IntFilter | number
    TeamID?: IntFilter | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    PlayerID?: IntFilter | number
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    Name?: StringFilter | string
    Position?: StringFilter | string
    Started?: IntFilter | number
    InjuryStatus?: StringNullableFilter | string | null
    InjuryBodyPart?: StringNullableFilter | string | null
    InjuryStartDate?: StringNullableFilter | string | null
    InjuryNotes?: StringNullableFilter | string | null
    GameID?: IntFilter | number
    game?: XOR<GameRelationFilter, GameWhereInput>
    OpponentID?: IntFilter | number
    opponent_team?: XOR<TeamRelationFilter, TeamWhereInput>
    HomeOrAway?: StringFilter | string
    FantasyPoints?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntFilter | number
    Seconds?: IntFilter | number
    FieldGoalsMade?: IntFilter | number
    FieldGoalsAttempted?: IntFilter | number
    FieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFilter | number
    TwoPointersAttempted?: IntFilter | number
    TwoPointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFilter | number
    ThreePointersAttempted?: IntFilter | number
    ThreePointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFilter | number
    FreeThrowsAttempted?: IntFilter | number
    FreeThrowsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFilter | number
    DefensiveRebounds?: IntFilter | number
    Rebounds?: IntFilter | number
    OffensiveReboundsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Assists?: IntFilter | number
    Steals?: IntFilter | number
    BlockedShots?: IntFilter | number
    Turnovers?: IntFilter | number
    PersonalFouls?: IntFilter | number
    Points?: IntFilter | number
    TrueShootingPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFilter | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFilter | number
    DoubleDoubles?: IntFilter | number
    TripleDoubles?: IntFilter | number
    FantasyPointsFantasyDraft?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type StatlineOrderByWithRelationInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    team?: TeamOrderByWithRelationInput
    PlayerID?: SortOrder
    player?: PlayerOrderByWithRelationInput
    Name?: SortOrder
    Position?: SortOrder
    Started?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    GameID?: SortOrder
    game?: GameOrderByWithRelationInput
    OpponentID?: SortOrder
    opponent_team?: TeamOrderByWithRelationInput
    HomeOrAway?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
  }

  export type StatlineWhereUniqueInput = {
    StatID?: number
  }

  export type StatlineOrderByWithAggregationInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    PlayerID?: SortOrder
    Name?: SortOrder
    Position?: SortOrder
    Started?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    HomeOrAway?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
    _count?: StatlineCountOrderByAggregateInput
    _avg?: StatlineAvgOrderByAggregateInput
    _max?: StatlineMaxOrderByAggregateInput
    _min?: StatlineMinOrderByAggregateInput
    _sum?: StatlineSumOrderByAggregateInput
  }

  export type StatlineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatlineScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatlineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatlineScalarWhereWithAggregatesInput>
    StatID?: IntWithAggregatesFilter | number
    TeamID?: IntWithAggregatesFilter | number
    PlayerID?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Position?: StringWithAggregatesFilter | string
    Started?: IntWithAggregatesFilter | number
    InjuryStatus?: StringNullableWithAggregatesFilter | string | null
    InjuryBodyPart?: StringNullableWithAggregatesFilter | string | null
    InjuryStartDate?: StringNullableWithAggregatesFilter | string | null
    InjuryNotes?: StringNullableWithAggregatesFilter | string | null
    GameID?: IntWithAggregatesFilter | number
    OpponentID?: IntWithAggregatesFilter | number
    HomeOrAway?: StringWithAggregatesFilter | string
    FantasyPoints?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntWithAggregatesFilter | number
    Seconds?: IntWithAggregatesFilter | number
    FieldGoalsMade?: IntWithAggregatesFilter | number
    FieldGoalsAttempted?: IntWithAggregatesFilter | number
    FieldGoalsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntWithAggregatesFilter | number
    TwoPointersAttempted?: IntWithAggregatesFilter | number
    TwoPointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntWithAggregatesFilter | number
    ThreePointersAttempted?: IntWithAggregatesFilter | number
    ThreePointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntWithAggregatesFilter | number
    FreeThrowsAttempted?: IntWithAggregatesFilter | number
    FreeThrowsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntWithAggregatesFilter | number
    DefensiveRebounds?: IntWithAggregatesFilter | number
    Rebounds?: IntWithAggregatesFilter | number
    OffensiveReboundsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Assists?: IntWithAggregatesFilter | number
    Steals?: IntWithAggregatesFilter | number
    BlockedShots?: IntWithAggregatesFilter | number
    Turnovers?: IntWithAggregatesFilter | number
    PersonalFouls?: IntWithAggregatesFilter | number
    Points?: IntWithAggregatesFilter | number
    TrueShootingPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntWithAggregatesFilter | number
    DoubleDoubles?: IntWithAggregatesFilter | number
    TripleDoubles?: IntWithAggregatesFilter | number
    FantasyPointsFantasyDraft?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type RefereeWhereInput = {
    AND?: Enumerable<RefereeWhereInput>
    OR?: Enumerable<RefereeWhereInput>
    NOT?: Enumerable<RefereeWhereInput>
    RefereeID?: IntFilter | number
    Name?: StringFilter | string
    Number?: IntFilter | number
    referee_games?: GameListRelationFilter
    umpire_games?: GameListRelationFilter
    crewchief_games?: GameListRelationFilter
  }

  export type RefereeOrderByWithRelationInput = {
    RefereeID?: SortOrder
    Name?: SortOrder
    Number?: SortOrder
    referee_games?: GameOrderByRelationAggregateInput
    umpire_games?: GameOrderByRelationAggregateInput
    crewchief_games?: GameOrderByRelationAggregateInput
  }

  export type RefereeWhereUniqueInput = {
    RefereeID?: number
  }

  export type RefereeOrderByWithAggregationInput = {
    RefereeID?: SortOrder
    Name?: SortOrder
    Number?: SortOrder
    _count?: RefereeCountOrderByAggregateInput
    _avg?: RefereeAvgOrderByAggregateInput
    _max?: RefereeMaxOrderByAggregateInput
    _min?: RefereeMinOrderByAggregateInput
    _sum?: RefereeSumOrderByAggregateInput
  }

  export type RefereeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RefereeScalarWhereWithAggregatesInput>
    OR?: Enumerable<RefereeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RefereeScalarWhereWithAggregatesInput>
    RefereeID?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Number?: IntWithAggregatesFilter | number
  }

  export type SeasonAveragesWhereInput = {
    AND?: Enumerable<SeasonAveragesWhereInput>
    OR?: Enumerable<SeasonAveragesWhereInput>
    NOT?: Enumerable<SeasonAveragesWhereInput>
    PlayerID?: IntFilter | number
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    FantasyPoints?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntFilter | number
    FieldGoalsMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFilter | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFilter | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Points?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesOrderByWithRelationInput = {
    PlayerID?: SortOrder
    player?: PlayerOrderByWithRelationInput
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type SeasonAveragesWhereUniqueInput = {
    PlayerID?: number
  }

  export type SeasonAveragesOrderByWithAggregationInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    _count?: SeasonAveragesCountOrderByAggregateInput
    _avg?: SeasonAveragesAvgOrderByAggregateInput
    _max?: SeasonAveragesMaxOrderByAggregateInput
    _min?: SeasonAveragesMinOrderByAggregateInput
    _sum?: SeasonAveragesSumOrderByAggregateInput
  }

  export type SeasonAveragesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SeasonAveragesScalarWhereWithAggregatesInput>
    OR?: Enumerable<SeasonAveragesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SeasonAveragesScalarWhereWithAggregatesInput>
    PlayerID?: IntWithAggregatesFilter | number
    FantasyPoints?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntWithAggregatesFilter | number
    FieldGoalsMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Assists?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Steals?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Points?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesWhereInput = {
    AND?: Enumerable<LastFiveGameAveragesWhereInput>
    OR?: Enumerable<LastFiveGameAveragesWhereInput>
    NOT?: Enumerable<LastFiveGameAveragesWhereInput>
    PlayerID?: IntFilter | number
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    FantasyPoints?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntFilter | number
    FieldGoalsMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFilter | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFilter | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Points?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesOrderByWithRelationInput = {
    PlayerID?: SortOrder
    player?: PlayerOrderByWithRelationInput
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type LastFiveGameAveragesWhereUniqueInput = {
    PlayerID?: number
  }

  export type LastFiveGameAveragesOrderByWithAggregationInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    _count?: LastFiveGameAveragesCountOrderByAggregateInput
    _avg?: LastFiveGameAveragesAvgOrderByAggregateInput
    _max?: LastFiveGameAveragesMaxOrderByAggregateInput
    _min?: LastFiveGameAveragesMinOrderByAggregateInput
    _sum?: LastFiveGameAveragesSumOrderByAggregateInput
  }

  export type LastFiveGameAveragesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LastFiveGameAveragesScalarWhereWithAggregatesInput>
    OR?: Enumerable<LastFiveGameAveragesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LastFiveGameAveragesScalarWhereWithAggregatesInput>
    PlayerID?: IntWithAggregatesFilter | number
    FantasyPoints?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntWithAggregatesFilter | number
    FieldGoalsMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Assists?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Steals?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    Points?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
  }

  export type TeamCreateInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUpdateInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamCreateManyInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
  }

  export type TeamUpdateManyMutationInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUncheckedUpdateManyInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
  }

  export type GameUpdateManyMutationInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
  }

  export type GameUncheckedUpdateManyInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamStatlinesCreateInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutTeam_game_statlinesInput
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    game: GameCreateNestedOneWithoutTeam_statlinesInput
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_game_statlinesInput
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedCreateInput = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUpdateInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutTeam_game_statlinesNestedInput
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutTeam_statlinesNestedInput
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_game_statlinesNestedInput
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCreateManyInput = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUpdateManyMutationInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateManyInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlayerCreateInput = {
    PlayerID: number
    team: TeamCreateNestedOneWithoutPlayersInput
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesCreateNestedOneWithoutPlayerInput
    last_five_averages?: LastFiveGameAveragesCreateNestedOneWithoutPlayerInput
    statlines?: StatlineCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesUncheckedCreateNestedOneWithoutPlayerInput
    last_five_averages?: LastFiveGameAveragesUncheckedCreateNestedOneWithoutPlayerInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUpdateOneWithoutPlayerNestedInput
    last_five_averages?: LastFiveGameAveragesUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    last_five_averages?: LastFiveGameAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
  }

  export type PlayerUpdateManyMutationInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerUncheckedUpdateManyInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
  }

  export type StatlineCreateInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutStatlinesInput
    player: PlayerCreateNestedOneWithoutStatlinesInput
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    game: GameCreateNestedOneWithoutStatlinesInput
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_statlinesInput
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedCreateInput = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpdateInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutStatlinesNestedInput
    player?: PlayerUpdateOneRequiredWithoutStatlinesNestedInput
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    game?: GameUpdateOneRequiredWithoutStatlinesNestedInput
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_statlinesNestedInput
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateManyInput = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpdateManyMutationInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateManyInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type RefereeCreateInput = {
    RefereeID: number
    Name: string
    Number: number
    referee_games?: GameCreateNestedManyWithoutRefereeInput
    umpire_games?: GameCreateNestedManyWithoutUmpireInput
    crewchief_games?: GameCreateNestedManyWithoutCrewchiefInput
  }

  export type RefereeUncheckedCreateInput = {
    RefereeID: number
    Name: string
    Number: number
    referee_games?: GameUncheckedCreateNestedManyWithoutRefereeInput
    umpire_games?: GameUncheckedCreateNestedManyWithoutUmpireInput
    crewchief_games?: GameUncheckedCreateNestedManyWithoutCrewchiefInput
  }

  export type RefereeUpdateInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    referee_games?: GameUpdateManyWithoutRefereeNestedInput
    umpire_games?: GameUpdateManyWithoutUmpireNestedInput
    crewchief_games?: GameUpdateManyWithoutCrewchiefNestedInput
  }

  export type RefereeUncheckedUpdateInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    referee_games?: GameUncheckedUpdateManyWithoutRefereeNestedInput
    umpire_games?: GameUncheckedUpdateManyWithoutUmpireNestedInput
    crewchief_games?: GameUncheckedUpdateManyWithoutCrewchiefNestedInput
  }

  export type RefereeCreateManyInput = {
    RefereeID: number
    Name: string
    Number: number
  }

  export type RefereeUpdateManyMutationInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
  }

  export type RefereeUncheckedUpdateManyInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
  }

  export type SeasonAveragesCreateInput = {
    player: PlayerCreateNestedOneWithoutSeason_averagesInput
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUncheckedCreateInput = {
    PlayerID: number
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUpdateInput = {
    player?: PlayerUpdateOneRequiredWithoutSeason_averagesNestedInput
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUncheckedUpdateInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesCreateManyInput = {
    PlayerID: number
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUpdateManyMutationInput = {
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUncheckedUpdateManyInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesCreateInput = {
    player: PlayerCreateNestedOneWithoutLast_five_averagesInput
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUncheckedCreateInput = {
    PlayerID: number
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUpdateInput = {
    player?: PlayerUpdateOneRequiredWithoutLast_five_averagesNestedInput
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUncheckedUpdateInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesCreateManyInput = {
    PlayerID: number
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUpdateManyMutationInput = {
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUncheckedUpdateManyInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type TeamStatlinesListRelationFilter = {
    every?: TeamStatlinesWhereInput
    some?: TeamStatlinesWhereInput
    none?: TeamStatlinesWhereInput
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type StatlineListRelationFilter = {
    every?: StatlineWhereInput
    some?: StatlineWhereInput
    none?: StatlineWhereInput
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamStatlinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatlineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    TeamID?: SortOrder
    Key?: SortOrder
    City?: SortOrder
    Name?: SortOrder
    stadium?: SortOrder
    Conference?: SortOrder
    Division?: SortOrder
    inner_color?: SortOrder
    outer_color?: SortOrder
    WikipediaLogoUrl?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    TeamID?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    TeamID?: SortOrder
    Key?: SortOrder
    City?: SortOrder
    Name?: SortOrder
    stadium?: SortOrder
    Conference?: SortOrder
    Division?: SortOrder
    inner_color?: SortOrder
    outer_color?: SortOrder
    WikipediaLogoUrl?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    TeamID?: SortOrder
    Key?: SortOrder
    City?: SortOrder
    Name?: SortOrder
    stadium?: SortOrder
    Conference?: SortOrder
    Division?: SortOrder
    inner_color?: SortOrder
    outer_color?: SortOrder
    WikipediaLogoUrl?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    TeamID?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type RefereeRelationFilter = {
    is?: RefereeWhereInput | null
    isNot?: RefereeWhereInput | null
  }

  export type GameCountOrderByAggregateInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    Status?: SortOrder
    Channel?: SortOrder
    Day?: SortOrder
    nba_day?: SortOrder
    DateTime?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    stadium?: SortOrder
    city?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    Quarter?: SortOrder
    TimeRemainingMinutes?: SortOrder
    TimeRemainingSeconds?: SortOrder
    Quarters?: SortOrder
    CrewChiefID?: SortOrder
    UmpireID?: SortOrder
    RefereeID?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    CrewChiefID?: SortOrder
    UmpireID?: SortOrder
    RefereeID?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    Status?: SortOrder
    Channel?: SortOrder
    Day?: SortOrder
    nba_day?: SortOrder
    DateTime?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    stadium?: SortOrder
    city?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    Quarter?: SortOrder
    TimeRemainingMinutes?: SortOrder
    TimeRemainingSeconds?: SortOrder
    CrewChiefID?: SortOrder
    UmpireID?: SortOrder
    RefereeID?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    Status?: SortOrder
    Channel?: SortOrder
    Day?: SortOrder
    nba_day?: SortOrder
    DateTime?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    stadium?: SortOrder
    city?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    Quarter?: SortOrder
    TimeRemainingMinutes?: SortOrder
    TimeRemainingSeconds?: SortOrder
    CrewChiefID?: SortOrder
    UmpireID?: SortOrder
    RefereeID?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    GameID?: SortOrder
    Season?: SortOrder
    SeasonType?: SortOrder
    AwayTeamID?: SortOrder
    HomeTeamID?: SortOrder
    AwayTeamScore?: SortOrder
    HomeTeamScore?: SortOrder
    CrewChiefID?: SortOrder
    UmpireID?: SortOrder
    RefereeID?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCountOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    Season?: SortOrder
    Name?: SortOrder
    Team?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    Opponent?: SortOrder
    HomeOrAway?: SortOrder
    IsGameOver?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
  }

  export type TeamStatlinesAvgOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    Season?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
  }

  export type TeamStatlinesMaxOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    Season?: SortOrder
    Name?: SortOrder
    Team?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    Opponent?: SortOrder
    HomeOrAway?: SortOrder
    IsGameOver?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
  }

  export type TeamStatlinesMinOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    Season?: SortOrder
    Name?: SortOrder
    Team?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    Opponent?: SortOrder
    HomeOrAway?: SortOrder
    IsGameOver?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
  }

  export type TeamStatlinesSumOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    Season?: SortOrder
    Wins?: SortOrder
    Losses?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type SeasonAveragesRelationFilter = {
    is?: SeasonAveragesWhereInput | null
    isNot?: SeasonAveragesWhereInput | null
  }

  export type LastFiveGameAveragesRelationFilter = {
    is?: LastFiveGameAveragesWhereInput | null
    isNot?: LastFiveGameAveragesWhereInput | null
  }

  export type PlayerCountOrderByAggregateInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    Jersey?: SortOrder
    PositionCategory?: SortOrder
    Position?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    s_name?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    BirthDate?: SortOrder
    BirthCity?: SortOrder
    BirthState?: SortOrder
    BirthCountry?: SortOrder
    HighSchool?: SortOrder
    College?: SortOrder
    PhotoUrl?: SortOrder
    SportRadarPlayerID?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    FanDuelName?: SortOrder
    DraftKingsName?: SortOrder
    YahooName?: SortOrder
    DepthChartPosition?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    UsaTodayHeadshotUrl?: SortOrder
    UsaTodayHeadshotNoBackgroundUrl?: SortOrder
    UsaTodayHeadshotUpdated?: SortOrder
    UsaTodayHeadshotNoBackgroundUpdated?: SortOrder
    NbaDotComPlayerID?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    Jersey?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    NbaDotComPlayerID?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    Jersey?: SortOrder
    PositionCategory?: SortOrder
    Position?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    s_name?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    BirthDate?: SortOrder
    BirthCity?: SortOrder
    BirthState?: SortOrder
    BirthCountry?: SortOrder
    HighSchool?: SortOrder
    College?: SortOrder
    PhotoUrl?: SortOrder
    SportRadarPlayerID?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    FanDuelName?: SortOrder
    DraftKingsName?: SortOrder
    YahooName?: SortOrder
    DepthChartPosition?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    UsaTodayHeadshotUrl?: SortOrder
    UsaTodayHeadshotNoBackgroundUrl?: SortOrder
    UsaTodayHeadshotUpdated?: SortOrder
    UsaTodayHeadshotNoBackgroundUpdated?: SortOrder
    NbaDotComPlayerID?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    Jersey?: SortOrder
    PositionCategory?: SortOrder
    Position?: SortOrder
    FirstName?: SortOrder
    LastName?: SortOrder
    s_name?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    BirthDate?: SortOrder
    BirthCity?: SortOrder
    BirthState?: SortOrder
    BirthCountry?: SortOrder
    HighSchool?: SortOrder
    College?: SortOrder
    PhotoUrl?: SortOrder
    SportRadarPlayerID?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    FanDuelName?: SortOrder
    DraftKingsName?: SortOrder
    YahooName?: SortOrder
    DepthChartPosition?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    UsaTodayHeadshotUrl?: SortOrder
    UsaTodayHeadshotNoBackgroundUrl?: SortOrder
    UsaTodayHeadshotUpdated?: SortOrder
    UsaTodayHeadshotNoBackgroundUpdated?: SortOrder
    NbaDotComPlayerID?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    PlayerID?: SortOrder
    TeamID?: SortOrder
    Jersey?: SortOrder
    Height?: SortOrder
    Weight?: SortOrder
    RotoworldPlayerID?: SortOrder
    RotoWirePlayerID?: SortOrder
    FantasyAlarmPlayerID?: SortOrder
    FanDuelPlayerID?: SortOrder
    DraftKingsPlayerID?: SortOrder
    YahooPlayerID?: SortOrder
    DepthChartOrder?: SortOrder
    UsaTodayPlayerID?: SortOrder
    NbaDotComPlayerID?: SortOrder
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type StatlineCountOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    PlayerID?: SortOrder
    Name?: SortOrder
    Position?: SortOrder
    Started?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    HomeOrAway?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
  }

  export type StatlineAvgOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    PlayerID?: SortOrder
    Started?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
  }

  export type StatlineMaxOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    PlayerID?: SortOrder
    Name?: SortOrder
    Position?: SortOrder
    Started?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    HomeOrAway?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
  }

  export type StatlineMinOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    PlayerID?: SortOrder
    Name?: SortOrder
    Position?: SortOrder
    Started?: SortOrder
    InjuryStatus?: SortOrder
    InjuryBodyPart?: SortOrder
    InjuryStartDate?: SortOrder
    InjuryNotes?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    HomeOrAway?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
  }

  export type StatlineSumOrderByAggregateInput = {
    StatID?: SortOrder
    TeamID?: SortOrder
    PlayerID?: SortOrder
    Started?: SortOrder
    GameID?: SortOrder
    OpponentID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    Seconds?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    EffectiveFieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    OffensiveReboundsPercentage?: SortOrder
    DefensiveReboundsPercentage?: SortOrder
    TotalReboundsPercentage?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    TrueShootingPercentage?: SortOrder
    PlayerEfficiencyRating?: SortOrder
    AssistsPercentage?: SortOrder
    StealsPercentage?: SortOrder
    BlocksPercentage?: SortOrder
    TurnOversPercentage?: SortOrder
    UsageRatePercentage?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
    DoubleDoubles?: SortOrder
    TripleDoubles?: SortOrder
    FantasyPointsFantasyDraft?: SortOrder
  }

  export type RefereeCountOrderByAggregateInput = {
    RefereeID?: SortOrder
    Name?: SortOrder
    Number?: SortOrder
  }

  export type RefereeAvgOrderByAggregateInput = {
    RefereeID?: SortOrder
    Number?: SortOrder
  }

  export type RefereeMaxOrderByAggregateInput = {
    RefereeID?: SortOrder
    Name?: SortOrder
    Number?: SortOrder
  }

  export type RefereeMinOrderByAggregateInput = {
    RefereeID?: SortOrder
    Name?: SortOrder
    Number?: SortOrder
  }

  export type RefereeSumOrderByAggregateInput = {
    RefereeID?: SortOrder
    Number?: SortOrder
  }

  export type SeasonAveragesCountOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type SeasonAveragesAvgOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type SeasonAveragesMaxOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type SeasonAveragesMinOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type SeasonAveragesSumOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type LastFiveGameAveragesCountOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type LastFiveGameAveragesAvgOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type LastFiveGameAveragesMaxOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type LastFiveGameAveragesMinOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type LastFiveGameAveragesSumOrderByAggregateInput = {
    PlayerID?: SortOrder
    FantasyPoints?: SortOrder
    Minutes?: SortOrder
    FieldGoalsMade?: SortOrder
    FieldGoalsAttempted?: SortOrder
    FieldGoalsPercentage?: SortOrder
    TwoPointersMade?: SortOrder
    TwoPointersAttempted?: SortOrder
    TwoPointersPercentage?: SortOrder
    ThreePointersMade?: SortOrder
    ThreePointersAttempted?: SortOrder
    ThreePointersPercentage?: SortOrder
    FreeThrowsMade?: SortOrder
    FreeThrowsAttempted?: SortOrder
    FreeThrowsPercentage?: SortOrder
    OffensiveRebounds?: SortOrder
    DefensiveRebounds?: SortOrder
    Rebounds?: SortOrder
    Assists?: SortOrder
    Steals?: SortOrder
    BlockedShots?: SortOrder
    Turnovers?: SortOrder
    PersonalFouls?: SortOrder
    Points?: SortOrder
    FantasyPointsFanDuel?: SortOrder
    FantasyPointsDraftKings?: SortOrder
    FantasyPointsYahoo?: SortOrder
    PlusMinus?: SortOrder
  }

  export type GameCreateNestedManyWithoutHome_teamInput = {
    create?: XOR<Enumerable<GameCreateWithoutHome_teamInput>, Enumerable<GameUncheckedCreateWithoutHome_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutHome_teamInput>
    createMany?: GameCreateManyHome_teamInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutAway_teamInput = {
    create?: XOR<Enumerable<GameCreateWithoutAway_teamInput>, Enumerable<GameUncheckedCreateWithoutAway_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutAway_teamInput>
    createMany?: GameCreateManyAway_teamInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type TeamStatlinesCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutTeamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutTeamInput>
    createMany?: TeamStatlinesCreateManyTeamInputEnvelope
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
  }

  export type TeamStatlinesCreateNestedManyWithoutOpponent_teamInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutOpponent_teamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutOpponent_teamInput>
    createMany?: TeamStatlinesCreateManyOpponent_teamInputEnvelope
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
  }

  export type PlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: Enumerable<PlayerWhereUniqueInput>
  }

  export type StatlineCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutTeamInput>, Enumerable<StatlineUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutTeamInput>
    createMany?: StatlineCreateManyTeamInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type StatlineCreateNestedManyWithoutOpponent_teamInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutOpponent_teamInput>, Enumerable<StatlineUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutOpponent_teamInput>
    createMany?: StatlineCreateManyOpponent_teamInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutHome_teamInput = {
    create?: XOR<Enumerable<GameCreateWithoutHome_teamInput>, Enumerable<GameUncheckedCreateWithoutHome_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutHome_teamInput>
    createMany?: GameCreateManyHome_teamInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutAway_teamInput = {
    create?: XOR<Enumerable<GameCreateWithoutAway_teamInput>, Enumerable<GameUncheckedCreateWithoutAway_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutAway_teamInput>
    createMany?: GameCreateManyAway_teamInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutTeamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutTeamInput>
    createMany?: TeamStatlinesCreateManyTeamInputEnvelope
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
  }

  export type TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutOpponent_teamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutOpponent_teamInput>
    createMany?: TeamStatlinesCreateManyOpponent_teamInputEnvelope
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
  }

  export type PlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: Enumerable<PlayerWhereUniqueInput>
  }

  export type StatlineUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutTeamInput>, Enumerable<StatlineUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutTeamInput>
    createMany?: StatlineCreateManyTeamInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutOpponent_teamInput>, Enumerable<StatlineUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutOpponent_teamInput>
    createMany?: StatlineCreateManyOpponent_teamInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type GameUpdateManyWithoutHome_teamNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutHome_teamInput>, Enumerable<GameUncheckedCreateWithoutHome_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutHome_teamInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutHome_teamInput>
    createMany?: GameCreateManyHome_teamInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutHome_teamInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutHome_teamInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUpdateManyWithoutAway_teamNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutAway_teamInput>, Enumerable<GameUncheckedCreateWithoutAway_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutAway_teamInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutAway_teamInput>
    createMany?: GameCreateManyAway_teamInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutAway_teamInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutAway_teamInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type TeamStatlinesUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutTeamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<TeamStatlinesUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: TeamStatlinesCreateManyTeamInputEnvelope
    set?: Enumerable<TeamStatlinesWhereUniqueInput>
    disconnect?: Enumerable<TeamStatlinesWhereUniqueInput>
    delete?: Enumerable<TeamStatlinesWhereUniqueInput>
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
    update?: Enumerable<TeamStatlinesUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<TeamStatlinesUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<TeamStatlinesScalarWhereInput>
  }

  export type TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutOpponent_teamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutOpponent_teamInput>
    upsert?: Enumerable<TeamStatlinesUpsertWithWhereUniqueWithoutOpponent_teamInput>
    createMany?: TeamStatlinesCreateManyOpponent_teamInputEnvelope
    set?: Enumerable<TeamStatlinesWhereUniqueInput>
    disconnect?: Enumerable<TeamStatlinesWhereUniqueInput>
    delete?: Enumerable<TeamStatlinesWhereUniqueInput>
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
    update?: Enumerable<TeamStatlinesUpdateWithWhereUniqueWithoutOpponent_teamInput>
    updateMany?: Enumerable<TeamStatlinesUpdateManyWithWhereWithoutOpponent_teamInput>
    deleteMany?: Enumerable<TeamStatlinesScalarWhereInput>
  }

  export type PlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<PlayerUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: Enumerable<PlayerWhereUniqueInput>
    disconnect?: Enumerable<PlayerWhereUniqueInput>
    delete?: Enumerable<PlayerWhereUniqueInput>
    connect?: Enumerable<PlayerWhereUniqueInput>
    update?: Enumerable<PlayerUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<PlayerUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<PlayerScalarWhereInput>
  }

  export type StatlineUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutTeamInput>, Enumerable<StatlineUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: StatlineCreateManyTeamInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type StatlineUpdateManyWithoutOpponent_teamNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutOpponent_teamInput>, Enumerable<StatlineUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutOpponent_teamInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutOpponent_teamInput>
    createMany?: StatlineCreateManyOpponent_teamInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutOpponent_teamInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutOpponent_teamInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutHome_teamNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutHome_teamInput>, Enumerable<GameUncheckedCreateWithoutHome_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutHome_teamInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutHome_teamInput>
    createMany?: GameCreateManyHome_teamInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutHome_teamInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutHome_teamInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutAway_teamNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutAway_teamInput>, Enumerable<GameUncheckedCreateWithoutAway_teamInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutAway_teamInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutAway_teamInput>
    createMany?: GameCreateManyAway_teamInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutAway_teamInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutAway_teamInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutTeamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<TeamStatlinesUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: TeamStatlinesCreateManyTeamInputEnvelope
    set?: Enumerable<TeamStatlinesWhereUniqueInput>
    disconnect?: Enumerable<TeamStatlinesWhereUniqueInput>
    delete?: Enumerable<TeamStatlinesWhereUniqueInput>
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
    update?: Enumerable<TeamStatlinesUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<TeamStatlinesUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<TeamStatlinesScalarWhereInput>
  }

  export type TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutOpponent_teamInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutOpponent_teamInput>
    upsert?: Enumerable<TeamStatlinesUpsertWithWhereUniqueWithoutOpponent_teamInput>
    createMany?: TeamStatlinesCreateManyOpponent_teamInputEnvelope
    set?: Enumerable<TeamStatlinesWhereUniqueInput>
    disconnect?: Enumerable<TeamStatlinesWhereUniqueInput>
    delete?: Enumerable<TeamStatlinesWhereUniqueInput>
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
    update?: Enumerable<TeamStatlinesUpdateWithWhereUniqueWithoutOpponent_teamInput>
    updateMany?: Enumerable<TeamStatlinesUpdateManyWithWhereWithoutOpponent_teamInput>
    deleteMany?: Enumerable<TeamStatlinesScalarWhereInput>
  }

  export type PlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<PlayerUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: Enumerable<PlayerWhereUniqueInput>
    disconnect?: Enumerable<PlayerWhereUniqueInput>
    delete?: Enumerable<PlayerWhereUniqueInput>
    connect?: Enumerable<PlayerWhereUniqueInput>
    update?: Enumerable<PlayerUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<PlayerUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<PlayerScalarWhereInput>
  }

  export type StatlineUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutTeamInput>, Enumerable<StatlineUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: StatlineCreateManyTeamInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutOpponent_teamInput>, Enumerable<StatlineUncheckedCreateWithoutOpponent_teamInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutOpponent_teamInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutOpponent_teamInput>
    createMany?: StatlineCreateManyOpponent_teamInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutOpponent_teamInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutOpponent_teamInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutAway_gamesInput = {
    create?: XOR<TeamCreateWithoutAway_gamesInput, TeamUncheckedCreateWithoutAway_gamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAway_gamesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutHome_gamesInput = {
    create?: XOR<TeamCreateWithoutHome_gamesInput, TeamUncheckedCreateWithoutHome_gamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHome_gamesInput
    connect?: TeamWhereUniqueInput
  }

  export type RefereeCreateNestedOneWithoutCrewchief_gamesInput = {
    create?: XOR<RefereeCreateWithoutCrewchief_gamesInput, RefereeUncheckedCreateWithoutCrewchief_gamesInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutCrewchief_gamesInput
    connect?: RefereeWhereUniqueInput
  }

  export type RefereeCreateNestedOneWithoutUmpire_gamesInput = {
    create?: XOR<RefereeCreateWithoutUmpire_gamesInput, RefereeUncheckedCreateWithoutUmpire_gamesInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutUmpire_gamesInput
    connect?: RefereeWhereUniqueInput
  }

  export type RefereeCreateNestedOneWithoutReferee_gamesInput = {
    create?: XOR<RefereeCreateWithoutReferee_gamesInput, RefereeUncheckedCreateWithoutReferee_gamesInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutReferee_gamesInput
    connect?: RefereeWhereUniqueInput
  }

  export type TeamStatlinesCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutGameInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutGameInput>
    createMany?: TeamStatlinesCreateManyGameInputEnvelope
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
  }

  export type StatlineCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutGameInput>, Enumerable<StatlineUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutGameInput>
    createMany?: StatlineCreateManyGameInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type TeamStatlinesUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutGameInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutGameInput>
    createMany?: TeamStatlinesCreateManyGameInputEnvelope
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
  }

  export type StatlineUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutGameInput>, Enumerable<StatlineUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutGameInput>
    createMany?: StatlineCreateManyGameInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TeamUpdateOneRequiredWithoutAway_gamesNestedInput = {
    create?: XOR<TeamCreateWithoutAway_gamesInput, TeamUncheckedCreateWithoutAway_gamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAway_gamesInput
    upsert?: TeamUpsertWithoutAway_gamesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutAway_gamesInput, TeamUncheckedUpdateWithoutAway_gamesInput>
  }

  export type TeamUpdateOneRequiredWithoutHome_gamesNestedInput = {
    create?: XOR<TeamCreateWithoutHome_gamesInput, TeamUncheckedCreateWithoutHome_gamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHome_gamesInput
    upsert?: TeamUpsertWithoutHome_gamesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutHome_gamesInput, TeamUncheckedUpdateWithoutHome_gamesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RefereeUpdateOneWithoutCrewchief_gamesNestedInput = {
    create?: XOR<RefereeCreateWithoutCrewchief_gamesInput, RefereeUncheckedCreateWithoutCrewchief_gamesInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutCrewchief_gamesInput
    upsert?: RefereeUpsertWithoutCrewchief_gamesInput
    disconnect?: boolean
    delete?: boolean
    connect?: RefereeWhereUniqueInput
    update?: XOR<RefereeUpdateWithoutCrewchief_gamesInput, RefereeUncheckedUpdateWithoutCrewchief_gamesInput>
  }

  export type RefereeUpdateOneWithoutUmpire_gamesNestedInput = {
    create?: XOR<RefereeCreateWithoutUmpire_gamesInput, RefereeUncheckedCreateWithoutUmpire_gamesInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutUmpire_gamesInput
    upsert?: RefereeUpsertWithoutUmpire_gamesInput
    disconnect?: boolean
    delete?: boolean
    connect?: RefereeWhereUniqueInput
    update?: XOR<RefereeUpdateWithoutUmpire_gamesInput, RefereeUncheckedUpdateWithoutUmpire_gamesInput>
  }

  export type RefereeUpdateOneWithoutReferee_gamesNestedInput = {
    create?: XOR<RefereeCreateWithoutReferee_gamesInput, RefereeUncheckedCreateWithoutReferee_gamesInput>
    connectOrCreate?: RefereeCreateOrConnectWithoutReferee_gamesInput
    upsert?: RefereeUpsertWithoutReferee_gamesInput
    disconnect?: boolean
    delete?: boolean
    connect?: RefereeWhereUniqueInput
    update?: XOR<RefereeUpdateWithoutReferee_gamesInput, RefereeUncheckedUpdateWithoutReferee_gamesInput>
  }

  export type TeamStatlinesUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutGameInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<TeamStatlinesUpsertWithWhereUniqueWithoutGameInput>
    createMany?: TeamStatlinesCreateManyGameInputEnvelope
    set?: Enumerable<TeamStatlinesWhereUniqueInput>
    disconnect?: Enumerable<TeamStatlinesWhereUniqueInput>
    delete?: Enumerable<TeamStatlinesWhereUniqueInput>
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
    update?: Enumerable<TeamStatlinesUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<TeamStatlinesUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<TeamStatlinesScalarWhereInput>
  }

  export type StatlineUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutGameInput>, Enumerable<StatlineUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutGameInput>
    createMany?: StatlineCreateManyGameInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<TeamStatlinesCreateWithoutGameInput>, Enumerable<TeamStatlinesUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<TeamStatlinesCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<TeamStatlinesUpsertWithWhereUniqueWithoutGameInput>
    createMany?: TeamStatlinesCreateManyGameInputEnvelope
    set?: Enumerable<TeamStatlinesWhereUniqueInput>
    disconnect?: Enumerable<TeamStatlinesWhereUniqueInput>
    delete?: Enumerable<TeamStatlinesWhereUniqueInput>
    connect?: Enumerable<TeamStatlinesWhereUniqueInput>
    update?: Enumerable<TeamStatlinesUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<TeamStatlinesUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<TeamStatlinesScalarWhereInput>
  }

  export type StatlineUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutGameInput>, Enumerable<StatlineUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutGameInput>
    createMany?: StatlineCreateManyGameInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutTeam_game_statlinesInput = {
    create?: XOR<TeamCreateWithoutTeam_game_statlinesInput, TeamUncheckedCreateWithoutTeam_game_statlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeam_game_statlinesInput
    connect?: TeamWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutTeam_statlinesInput = {
    create?: XOR<GameCreateWithoutTeam_statlinesInput, GameUncheckedCreateWithoutTeam_statlinesInput>
    connectOrCreate?: GameCreateOrConnectWithoutTeam_statlinesInput
    connect?: GameWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutOpponent_team_game_statlinesInput = {
    create?: XOR<TeamCreateWithoutOpponent_team_game_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_game_statlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutOpponent_team_game_statlinesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutTeam_game_statlinesNestedInput = {
    create?: XOR<TeamCreateWithoutTeam_game_statlinesInput, TeamUncheckedCreateWithoutTeam_game_statlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeam_game_statlinesInput
    upsert?: TeamUpsertWithoutTeam_game_statlinesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutTeam_game_statlinesInput, TeamUncheckedUpdateWithoutTeam_game_statlinesInput>
  }

  export type GameUpdateOneRequiredWithoutTeam_statlinesNestedInput = {
    create?: XOR<GameCreateWithoutTeam_statlinesInput, GameUncheckedCreateWithoutTeam_statlinesInput>
    connectOrCreate?: GameCreateOrConnectWithoutTeam_statlinesInput
    upsert?: GameUpsertWithoutTeam_statlinesInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutTeam_statlinesInput, GameUncheckedUpdateWithoutTeam_statlinesInput>
  }

  export type TeamUpdateOneRequiredWithoutOpponent_team_game_statlinesNestedInput = {
    create?: XOR<TeamCreateWithoutOpponent_team_game_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_game_statlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutOpponent_team_game_statlinesInput
    upsert?: TeamUpsertWithoutOpponent_team_game_statlinesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutOpponent_team_game_statlinesInput, TeamUncheckedUpdateWithoutOpponent_team_game_statlinesInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type TeamCreateNestedOneWithoutPlayersInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    connect?: TeamWhereUniqueInput
  }

  export type SeasonAveragesCreateNestedOneWithoutPlayerInput = {
    create?: XOR<SeasonAveragesCreateWithoutPlayerInput, SeasonAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: SeasonAveragesCreateOrConnectWithoutPlayerInput
    connect?: SeasonAveragesWhereUniqueInput
  }

  export type LastFiveGameAveragesCreateNestedOneWithoutPlayerInput = {
    create?: XOR<LastFiveGameAveragesCreateWithoutPlayerInput, LastFiveGameAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: LastFiveGameAveragesCreateOrConnectWithoutPlayerInput
    connect?: LastFiveGameAveragesWhereUniqueInput
  }

  export type StatlineCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutPlayerInput>, Enumerable<StatlineUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutPlayerInput>
    createMany?: StatlineCreateManyPlayerInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type SeasonAveragesUncheckedCreateNestedOneWithoutPlayerInput = {
    create?: XOR<SeasonAveragesCreateWithoutPlayerInput, SeasonAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: SeasonAveragesCreateOrConnectWithoutPlayerInput
    connect?: SeasonAveragesWhereUniqueInput
  }

  export type LastFiveGameAveragesUncheckedCreateNestedOneWithoutPlayerInput = {
    create?: XOR<LastFiveGameAveragesCreateWithoutPlayerInput, LastFiveGameAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: LastFiveGameAveragesCreateOrConnectWithoutPlayerInput
    connect?: LastFiveGameAveragesWhereUniqueInput
  }

  export type StatlineUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutPlayerInput>, Enumerable<StatlineUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutPlayerInput>
    createMany?: StatlineCreateManyPlayerInputEnvelope
    connect?: Enumerable<StatlineWhereUniqueInput>
  }

  export type TeamUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    upsert?: TeamUpsertWithoutPlayersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type SeasonAveragesUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<SeasonAveragesCreateWithoutPlayerInput, SeasonAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: SeasonAveragesCreateOrConnectWithoutPlayerInput
    upsert?: SeasonAveragesUpsertWithoutPlayerInput
    disconnect?: boolean
    delete?: boolean
    connect?: SeasonAveragesWhereUniqueInput
    update?: XOR<SeasonAveragesUpdateWithoutPlayerInput, SeasonAveragesUncheckedUpdateWithoutPlayerInput>
  }

  export type LastFiveGameAveragesUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<LastFiveGameAveragesCreateWithoutPlayerInput, LastFiveGameAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: LastFiveGameAveragesCreateOrConnectWithoutPlayerInput
    upsert?: LastFiveGameAveragesUpsertWithoutPlayerInput
    disconnect?: boolean
    delete?: boolean
    connect?: LastFiveGameAveragesWhereUniqueInput
    update?: XOR<LastFiveGameAveragesUpdateWithoutPlayerInput, LastFiveGameAveragesUncheckedUpdateWithoutPlayerInput>
  }

  export type StatlineUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutPlayerInput>, Enumerable<StatlineUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutPlayerInput>
    createMany?: StatlineCreateManyPlayerInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type SeasonAveragesUncheckedUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<SeasonAveragesCreateWithoutPlayerInput, SeasonAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: SeasonAveragesCreateOrConnectWithoutPlayerInput
    upsert?: SeasonAveragesUpsertWithoutPlayerInput
    disconnect?: boolean
    delete?: boolean
    connect?: SeasonAveragesWhereUniqueInput
    update?: XOR<SeasonAveragesUpdateWithoutPlayerInput, SeasonAveragesUncheckedUpdateWithoutPlayerInput>
  }

  export type LastFiveGameAveragesUncheckedUpdateOneWithoutPlayerNestedInput = {
    create?: XOR<LastFiveGameAveragesCreateWithoutPlayerInput, LastFiveGameAveragesUncheckedCreateWithoutPlayerInput>
    connectOrCreate?: LastFiveGameAveragesCreateOrConnectWithoutPlayerInput
    upsert?: LastFiveGameAveragesUpsertWithoutPlayerInput
    disconnect?: boolean
    delete?: boolean
    connect?: LastFiveGameAveragesWhereUniqueInput
    update?: XOR<LastFiveGameAveragesUpdateWithoutPlayerInput, LastFiveGameAveragesUncheckedUpdateWithoutPlayerInput>
  }

  export type StatlineUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<StatlineCreateWithoutPlayerInput>, Enumerable<StatlineUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<StatlineCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<StatlineUpsertWithWhereUniqueWithoutPlayerInput>
    createMany?: StatlineCreateManyPlayerInputEnvelope
    set?: Enumerable<StatlineWhereUniqueInput>
    disconnect?: Enumerable<StatlineWhereUniqueInput>
    delete?: Enumerable<StatlineWhereUniqueInput>
    connect?: Enumerable<StatlineWhereUniqueInput>
    update?: Enumerable<StatlineUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<StatlineUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<StatlineScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutStatlinesInput = {
    create?: XOR<TeamCreateWithoutStatlinesInput, TeamUncheckedCreateWithoutStatlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutStatlinesInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutStatlinesInput = {
    create?: XOR<PlayerCreateWithoutStatlinesInput, PlayerUncheckedCreateWithoutStatlinesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatlinesInput
    connect?: PlayerWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutStatlinesInput = {
    create?: XOR<GameCreateWithoutStatlinesInput, GameUncheckedCreateWithoutStatlinesInput>
    connectOrCreate?: GameCreateOrConnectWithoutStatlinesInput
    connect?: GameWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutOpponent_team_statlinesInput = {
    create?: XOR<TeamCreateWithoutOpponent_team_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_statlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutOpponent_team_statlinesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutStatlinesNestedInput = {
    create?: XOR<TeamCreateWithoutStatlinesInput, TeamUncheckedCreateWithoutStatlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutStatlinesInput
    upsert?: TeamUpsertWithoutStatlinesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutStatlinesInput, TeamUncheckedUpdateWithoutStatlinesInput>
  }

  export type PlayerUpdateOneRequiredWithoutStatlinesNestedInput = {
    create?: XOR<PlayerCreateWithoutStatlinesInput, PlayerUncheckedCreateWithoutStatlinesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatlinesInput
    upsert?: PlayerUpsertWithoutStatlinesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutStatlinesInput, PlayerUncheckedUpdateWithoutStatlinesInput>
  }

  export type GameUpdateOneRequiredWithoutStatlinesNestedInput = {
    create?: XOR<GameCreateWithoutStatlinesInput, GameUncheckedCreateWithoutStatlinesInput>
    connectOrCreate?: GameCreateOrConnectWithoutStatlinesInput
    upsert?: GameUpsertWithoutStatlinesInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutStatlinesInput, GameUncheckedUpdateWithoutStatlinesInput>
  }

  export type TeamUpdateOneRequiredWithoutOpponent_team_statlinesNestedInput = {
    create?: XOR<TeamCreateWithoutOpponent_team_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_statlinesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutOpponent_team_statlinesInput
    upsert?: TeamUpsertWithoutOpponent_team_statlinesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutOpponent_team_statlinesInput, TeamUncheckedUpdateWithoutOpponent_team_statlinesInput>
  }

  export type GameCreateNestedManyWithoutRefereeInput = {
    create?: XOR<Enumerable<GameCreateWithoutRefereeInput>, Enumerable<GameUncheckedCreateWithoutRefereeInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutRefereeInput>
    createMany?: GameCreateManyRefereeInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutUmpireInput = {
    create?: XOR<Enumerable<GameCreateWithoutUmpireInput>, Enumerable<GameUncheckedCreateWithoutUmpireInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUmpireInput>
    createMany?: GameCreateManyUmpireInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutCrewchiefInput = {
    create?: XOR<Enumerable<GameCreateWithoutCrewchiefInput>, Enumerable<GameUncheckedCreateWithoutCrewchiefInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutCrewchiefInput>
    createMany?: GameCreateManyCrewchiefInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutRefereeInput = {
    create?: XOR<Enumerable<GameCreateWithoutRefereeInput>, Enumerable<GameUncheckedCreateWithoutRefereeInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutRefereeInput>
    createMany?: GameCreateManyRefereeInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutUmpireInput = {
    create?: XOR<Enumerable<GameCreateWithoutUmpireInput>, Enumerable<GameUncheckedCreateWithoutUmpireInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUmpireInput>
    createMany?: GameCreateManyUmpireInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutCrewchiefInput = {
    create?: XOR<Enumerable<GameCreateWithoutCrewchiefInput>, Enumerable<GameUncheckedCreateWithoutCrewchiefInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutCrewchiefInput>
    createMany?: GameCreateManyCrewchiefInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUpdateManyWithoutRefereeNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutRefereeInput>, Enumerable<GameUncheckedCreateWithoutRefereeInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutRefereeInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutRefereeInput>
    createMany?: GameCreateManyRefereeInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutRefereeInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutRefereeInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUpdateManyWithoutUmpireNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutUmpireInput>, Enumerable<GameUncheckedCreateWithoutUmpireInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUmpireInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutUmpireInput>
    createMany?: GameCreateManyUmpireInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutUmpireInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutUmpireInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUpdateManyWithoutCrewchiefNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutCrewchiefInput>, Enumerable<GameUncheckedCreateWithoutCrewchiefInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutCrewchiefInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutCrewchiefInput>
    createMany?: GameCreateManyCrewchiefInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutCrewchiefInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutCrewchiefInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutRefereeNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutRefereeInput>, Enumerable<GameUncheckedCreateWithoutRefereeInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutRefereeInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutRefereeInput>
    createMany?: GameCreateManyRefereeInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutRefereeInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutRefereeInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutUmpireNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutUmpireInput>, Enumerable<GameUncheckedCreateWithoutUmpireInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutUmpireInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutUmpireInput>
    createMany?: GameCreateManyUmpireInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutUmpireInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutUmpireInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutCrewchiefNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutCrewchiefInput>, Enumerable<GameUncheckedCreateWithoutCrewchiefInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutCrewchiefInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutCrewchiefInput>
    createMany?: GameCreateManyCrewchiefInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutCrewchiefInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutCrewchiefInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type PlayerCreateNestedOneWithoutSeason_averagesInput = {
    create?: XOR<PlayerCreateWithoutSeason_averagesInput, PlayerUncheckedCreateWithoutSeason_averagesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutSeason_averagesInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutSeason_averagesNestedInput = {
    create?: XOR<PlayerCreateWithoutSeason_averagesInput, PlayerUncheckedCreateWithoutSeason_averagesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutSeason_averagesInput
    upsert?: PlayerUpsertWithoutSeason_averagesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutSeason_averagesInput, PlayerUncheckedUpdateWithoutSeason_averagesInput>
  }

  export type PlayerCreateNestedOneWithoutLast_five_averagesInput = {
    create?: XOR<PlayerCreateWithoutLast_five_averagesInput, PlayerUncheckedCreateWithoutLast_five_averagesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutLast_five_averagesInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutLast_five_averagesNestedInput = {
    create?: XOR<PlayerCreateWithoutLast_five_averagesInput, PlayerUncheckedCreateWithoutLast_five_averagesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutLast_five_averagesInput
    upsert?: PlayerUpsertWithoutLast_five_averagesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutLast_five_averagesInput, PlayerUncheckedUpdateWithoutLast_five_averagesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string>
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type GameCreateWithoutHome_teamInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutHome_teamInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutHome_teamInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutHome_teamInput, GameUncheckedCreateWithoutHome_teamInput>
  }

  export type GameCreateManyHome_teamInputEnvelope = {
    data: Enumerable<GameCreateManyHome_teamInput>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutAway_teamInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutAway_teamInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutAway_teamInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutAway_teamInput, GameUncheckedCreateWithoutAway_teamInput>
  }

  export type GameCreateManyAway_teamInputEnvelope = {
    data: Enumerable<GameCreateManyAway_teamInput>
    skipDuplicates?: boolean
  }

  export type TeamStatlinesCreateWithoutTeamInput = {
    StatID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    game: GameCreateNestedOneWithoutTeam_statlinesInput
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_game_statlinesInput
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedCreateWithoutTeamInput = {
    StatID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCreateOrConnectWithoutTeamInput = {
    where: TeamStatlinesWhereUniqueInput
    create: XOR<TeamStatlinesCreateWithoutTeamInput, TeamStatlinesUncheckedCreateWithoutTeamInput>
  }

  export type TeamStatlinesCreateManyTeamInputEnvelope = {
    data: Enumerable<TeamStatlinesCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type TeamStatlinesCreateWithoutOpponent_teamInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutTeam_game_statlinesInput
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    game: GameCreateNestedOneWithoutTeam_statlinesInput
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedCreateWithoutOpponent_teamInput = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCreateOrConnectWithoutOpponent_teamInput = {
    where: TeamStatlinesWhereUniqueInput
    create: XOR<TeamStatlinesCreateWithoutOpponent_teamInput, TeamStatlinesUncheckedCreateWithoutOpponent_teamInput>
  }

  export type TeamStatlinesCreateManyOpponent_teamInputEnvelope = {
    data: Enumerable<TeamStatlinesCreateManyOpponent_teamInput>
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutTeamInput = {
    PlayerID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesCreateNestedOneWithoutPlayerInput
    last_five_averages?: LastFiveGameAveragesCreateNestedOneWithoutPlayerInput
    statlines?: StatlineCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutTeamInput = {
    PlayerID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesUncheckedCreateNestedOneWithoutPlayerInput
    last_five_averages?: LastFiveGameAveragesUncheckedCreateNestedOneWithoutPlayerInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerCreateManyTeamInputEnvelope = {
    data: Enumerable<PlayerCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type StatlineCreateWithoutTeamInput = {
    StatID: number
    player: PlayerCreateNestedOneWithoutStatlinesInput
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    game: GameCreateNestedOneWithoutStatlinesInput
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_statlinesInput
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedCreateWithoutTeamInput = {
    StatID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateOrConnectWithoutTeamInput = {
    where: StatlineWhereUniqueInput
    create: XOR<StatlineCreateWithoutTeamInput, StatlineUncheckedCreateWithoutTeamInput>
  }

  export type StatlineCreateManyTeamInputEnvelope = {
    data: Enumerable<StatlineCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type StatlineCreateWithoutOpponent_teamInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutStatlinesInput
    player: PlayerCreateNestedOneWithoutStatlinesInput
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    game: GameCreateNestedOneWithoutStatlinesInput
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedCreateWithoutOpponent_teamInput = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateOrConnectWithoutOpponent_teamInput = {
    where: StatlineWhereUniqueInput
    create: XOR<StatlineCreateWithoutOpponent_teamInput, StatlineUncheckedCreateWithoutOpponent_teamInput>
  }

  export type StatlineCreateManyOpponent_teamInputEnvelope = {
    data: Enumerable<StatlineCreateManyOpponent_teamInput>
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutHome_teamInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutHome_teamInput, GameUncheckedUpdateWithoutHome_teamInput>
    create: XOR<GameCreateWithoutHome_teamInput, GameUncheckedCreateWithoutHome_teamInput>
  }

  export type GameUpdateWithWhereUniqueWithoutHome_teamInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutHome_teamInput, GameUncheckedUpdateWithoutHome_teamInput>
  }

  export type GameUpdateManyWithWhereWithoutHome_teamInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutHome_gamesInput>
  }

  export type GameScalarWhereInput = {
    AND?: Enumerable<GameScalarWhereInput>
    OR?: Enumerable<GameScalarWhereInput>
    NOT?: Enumerable<GameScalarWhereInput>
    GameID?: IntFilter | number
    Season?: IntFilter | number
    SeasonType?: IntFilter | number
    Status?: StringFilter | string
    Channel?: StringFilter | string
    Day?: DateTimeFilter | Date | string
    nba_day?: StringFilter | string
    DateTime?: DateTimeFilter | Date | string
    AwayTeamID?: IntFilter | number
    HomeTeamID?: IntFilter | number
    stadium?: StringFilter | string
    city?: StringFilter | string
    AwayTeamScore?: IntNullableFilter | number | null
    HomeTeamScore?: IntNullableFilter | number | null
    Quarter?: StringNullableFilter | string | null
    TimeRemainingMinutes?: StringNullableFilter | string | null
    TimeRemainingSeconds?: StringNullableFilter | string | null
    Quarters?: JsonNullableFilter
    CrewChiefID?: IntNullableFilter | number | null
    UmpireID?: IntNullableFilter | number | null
    RefereeID?: IntNullableFilter | number | null
  }

  export type GameUpsertWithWhereUniqueWithoutAway_teamInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutAway_teamInput, GameUncheckedUpdateWithoutAway_teamInput>
    create: XOR<GameCreateWithoutAway_teamInput, GameUncheckedCreateWithoutAway_teamInput>
  }

  export type GameUpdateWithWhereUniqueWithoutAway_teamInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutAway_teamInput, GameUncheckedUpdateWithoutAway_teamInput>
  }

  export type GameUpdateManyWithWhereWithoutAway_teamInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutAway_gamesInput>
  }

  export type TeamStatlinesUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamStatlinesWhereUniqueInput
    update: XOR<TeamStatlinesUpdateWithoutTeamInput, TeamStatlinesUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamStatlinesCreateWithoutTeamInput, TeamStatlinesUncheckedCreateWithoutTeamInput>
  }

  export type TeamStatlinesUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamStatlinesWhereUniqueInput
    data: XOR<TeamStatlinesUpdateWithoutTeamInput, TeamStatlinesUncheckedUpdateWithoutTeamInput>
  }

  export type TeamStatlinesUpdateManyWithWhereWithoutTeamInput = {
    where: TeamStatlinesScalarWhereInput
    data: XOR<TeamStatlinesUpdateManyMutationInput, TeamStatlinesUncheckedUpdateManyWithoutTeam_game_statlinesInput>
  }

  export type TeamStatlinesScalarWhereInput = {
    AND?: Enumerable<TeamStatlinesScalarWhereInput>
    OR?: Enumerable<TeamStatlinesScalarWhereInput>
    NOT?: Enumerable<TeamStatlinesScalarWhereInput>
    StatID?: IntFilter | number
    TeamID?: IntFilter | number
    Season?: IntFilter | number
    Name?: StringFilter | string
    Team?: StringFilter | string
    Wins?: IntFilter | number
    Losses?: IntFilter | number
    GameID?: IntFilter | number
    OpponentID?: IntFilter | number
    Opponent?: StringFilter | string
    HomeOrAway?: StringFilter | string
    IsGameOver?: BoolFilter | boolean
    FieldGoalsMade?: IntFilter | number
    FieldGoalsAttempted?: IntFilter | number
    FieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFilter | number
    TwoPointersAttempted?: IntFilter | number
    TwoPointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFilter | number
    ThreePointersAttempted?: IntFilter | number
    ThreePointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFilter | number
    FreeThrowsAttempted?: IntFilter | number
    FreeThrowsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFilter | number
    DefensiveRebounds?: IntFilter | number
    Rebounds?: IntFilter | number
    Assists?: IntFilter | number
    Steals?: IntFilter | number
    BlockedShots?: IntFilter | number
    Turnovers?: IntFilter | number
    PersonalFouls?: IntFilter | number
    Points?: IntFilter | number
    TrueShootingPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUpsertWithWhereUniqueWithoutOpponent_teamInput = {
    where: TeamStatlinesWhereUniqueInput
    update: XOR<TeamStatlinesUpdateWithoutOpponent_teamInput, TeamStatlinesUncheckedUpdateWithoutOpponent_teamInput>
    create: XOR<TeamStatlinesCreateWithoutOpponent_teamInput, TeamStatlinesUncheckedCreateWithoutOpponent_teamInput>
  }

  export type TeamStatlinesUpdateWithWhereUniqueWithoutOpponent_teamInput = {
    where: TeamStatlinesWhereUniqueInput
    data: XOR<TeamStatlinesUpdateWithoutOpponent_teamInput, TeamStatlinesUncheckedUpdateWithoutOpponent_teamInput>
  }

  export type TeamStatlinesUpdateManyWithWhereWithoutOpponent_teamInput = {
    where: TeamStatlinesScalarWhereInput
    data: XOR<TeamStatlinesUpdateManyMutationInput, TeamStatlinesUncheckedUpdateManyWithoutOpponent_team_game_statlinesInput>
  }

  export type PlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutPlayersInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: Enumerable<PlayerScalarWhereInput>
    OR?: Enumerable<PlayerScalarWhereInput>
    NOT?: Enumerable<PlayerScalarWhereInput>
    PlayerID?: IntFilter | number
    TeamID?: IntFilter | number
    Jersey?: IntFilter | number
    PositionCategory?: StringFilter | string
    Position?: StringFilter | string
    FirstName?: StringFilter | string
    LastName?: StringFilter | string
    s_name?: StringFilter | string
    Height?: IntFilter | number
    Weight?: IntFilter | number
    BirthDate?: StringFilter | string
    BirthCity?: StringFilter | string
    BirthState?: StringFilter | string
    BirthCountry?: StringFilter | string
    HighSchool?: StringFilter | string
    College?: StringFilter | string
    PhotoUrl?: StringFilter | string
    SportRadarPlayerID?: StringFilter | string
    RotoworldPlayerID?: IntFilter | number
    RotoWirePlayerID?: IntFilter | number
    FantasyAlarmPlayerID?: IntFilter | number
    InjuryStatus?: StringNullableFilter | string | null
    InjuryBodyPart?: StringNullableFilter | string | null
    InjuryStartDate?: StringNullableFilter | string | null
    InjuryNotes?: StringNullableFilter | string | null
    FanDuelPlayerID?: IntFilter | number
    DraftKingsPlayerID?: IntFilter | number
    YahooPlayerID?: IntFilter | number
    FanDuelName?: StringFilter | string
    DraftKingsName?: StringFilter | string
    YahooName?: StringFilter | string
    DepthChartPosition?: StringFilter | string
    DepthChartOrder?: IntFilter | number
    UsaTodayPlayerID?: IntFilter | number
    UsaTodayHeadshotUrl?: StringFilter | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFilter | string
    UsaTodayHeadshotUpdated?: StringFilter | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFilter | string
    NbaDotComPlayerID?: IntFilter | number
  }

  export type StatlineUpsertWithWhereUniqueWithoutTeamInput = {
    where: StatlineWhereUniqueInput
    update: XOR<StatlineUpdateWithoutTeamInput, StatlineUncheckedUpdateWithoutTeamInput>
    create: XOR<StatlineCreateWithoutTeamInput, StatlineUncheckedCreateWithoutTeamInput>
  }

  export type StatlineUpdateWithWhereUniqueWithoutTeamInput = {
    where: StatlineWhereUniqueInput
    data: XOR<StatlineUpdateWithoutTeamInput, StatlineUncheckedUpdateWithoutTeamInput>
  }

  export type StatlineUpdateManyWithWhereWithoutTeamInput = {
    where: StatlineScalarWhereInput
    data: XOR<StatlineUpdateManyMutationInput, StatlineUncheckedUpdateManyWithoutStatlinesInput>
  }

  export type StatlineScalarWhereInput = {
    AND?: Enumerable<StatlineScalarWhereInput>
    OR?: Enumerable<StatlineScalarWhereInput>
    NOT?: Enumerable<StatlineScalarWhereInput>
    StatID?: IntFilter | number
    TeamID?: IntFilter | number
    PlayerID?: IntFilter | number
    Name?: StringFilter | string
    Position?: StringFilter | string
    Started?: IntFilter | number
    InjuryStatus?: StringNullableFilter | string | null
    InjuryBodyPart?: StringNullableFilter | string | null
    InjuryStartDate?: StringNullableFilter | string | null
    InjuryNotes?: StringNullableFilter | string | null
    GameID?: IntFilter | number
    OpponentID?: IntFilter | number
    HomeOrAway?: StringFilter | string
    FantasyPoints?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Minutes?: IntFilter | number
    Seconds?: IntFilter | number
    FieldGoalsMade?: IntFilter | number
    FieldGoalsAttempted?: IntFilter | number
    FieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFilter | number
    TwoPointersAttempted?: IntFilter | number
    TwoPointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFilter | number
    ThreePointersAttempted?: IntFilter | number
    ThreePointersPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFilter | number
    FreeThrowsAttempted?: IntFilter | number
    FreeThrowsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFilter | number
    DefensiveRebounds?: IntFilter | number
    Rebounds?: IntFilter | number
    OffensiveReboundsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    Assists?: IntFilter | number
    Steals?: IntFilter | number
    BlockedShots?: IntFilter | number
    Turnovers?: IntFilter | number
    PersonalFouls?: IntFilter | number
    Points?: IntFilter | number
    TrueShootingPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFilter | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFilter | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFilter | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFilter | number
    DoubleDoubles?: IntFilter | number
    TripleDoubles?: IntFilter | number
    FantasyPointsFantasyDraft?: DecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpsertWithWhereUniqueWithoutOpponent_teamInput = {
    where: StatlineWhereUniqueInput
    update: XOR<StatlineUpdateWithoutOpponent_teamInput, StatlineUncheckedUpdateWithoutOpponent_teamInput>
    create: XOR<StatlineCreateWithoutOpponent_teamInput, StatlineUncheckedCreateWithoutOpponent_teamInput>
  }

  export type StatlineUpdateWithWhereUniqueWithoutOpponent_teamInput = {
    where: StatlineWhereUniqueInput
    data: XOR<StatlineUpdateWithoutOpponent_teamInput, StatlineUncheckedUpdateWithoutOpponent_teamInput>
  }

  export type StatlineUpdateManyWithWhereWithoutOpponent_teamInput = {
    where: StatlineScalarWhereInput
    data: XOR<StatlineUpdateManyMutationInput, StatlineUncheckedUpdateManyWithoutOpponent_team_statlinesInput>
  }

  export type TeamCreateWithoutAway_gamesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateWithoutAway_gamesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamCreateOrConnectWithoutAway_gamesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutAway_gamesInput, TeamUncheckedCreateWithoutAway_gamesInput>
  }

  export type TeamCreateWithoutHome_gamesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateWithoutHome_gamesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamCreateOrConnectWithoutHome_gamesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutHome_gamesInput, TeamUncheckedCreateWithoutHome_gamesInput>
  }

  export type RefereeCreateWithoutCrewchief_gamesInput = {
    RefereeID: number
    Name: string
    Number: number
    referee_games?: GameCreateNestedManyWithoutRefereeInput
    umpire_games?: GameCreateNestedManyWithoutUmpireInput
  }

  export type RefereeUncheckedCreateWithoutCrewchief_gamesInput = {
    RefereeID: number
    Name: string
    Number: number
    referee_games?: GameUncheckedCreateNestedManyWithoutRefereeInput
    umpire_games?: GameUncheckedCreateNestedManyWithoutUmpireInput
  }

  export type RefereeCreateOrConnectWithoutCrewchief_gamesInput = {
    where: RefereeWhereUniqueInput
    create: XOR<RefereeCreateWithoutCrewchief_gamesInput, RefereeUncheckedCreateWithoutCrewchief_gamesInput>
  }

  export type RefereeCreateWithoutUmpire_gamesInput = {
    RefereeID: number
    Name: string
    Number: number
    referee_games?: GameCreateNestedManyWithoutRefereeInput
    crewchief_games?: GameCreateNestedManyWithoutCrewchiefInput
  }

  export type RefereeUncheckedCreateWithoutUmpire_gamesInput = {
    RefereeID: number
    Name: string
    Number: number
    referee_games?: GameUncheckedCreateNestedManyWithoutRefereeInput
    crewchief_games?: GameUncheckedCreateNestedManyWithoutCrewchiefInput
  }

  export type RefereeCreateOrConnectWithoutUmpire_gamesInput = {
    where: RefereeWhereUniqueInput
    create: XOR<RefereeCreateWithoutUmpire_gamesInput, RefereeUncheckedCreateWithoutUmpire_gamesInput>
  }

  export type RefereeCreateWithoutReferee_gamesInput = {
    RefereeID: number
    Name: string
    Number: number
    umpire_games?: GameCreateNestedManyWithoutUmpireInput
    crewchief_games?: GameCreateNestedManyWithoutCrewchiefInput
  }

  export type RefereeUncheckedCreateWithoutReferee_gamesInput = {
    RefereeID: number
    Name: string
    Number: number
    umpire_games?: GameUncheckedCreateNestedManyWithoutUmpireInput
    crewchief_games?: GameUncheckedCreateNestedManyWithoutCrewchiefInput
  }

  export type RefereeCreateOrConnectWithoutReferee_gamesInput = {
    where: RefereeWhereUniqueInput
    create: XOR<RefereeCreateWithoutReferee_gamesInput, RefereeUncheckedCreateWithoutReferee_gamesInput>
  }

  export type TeamStatlinesCreateWithoutGameInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutTeam_game_statlinesInput
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_game_statlinesInput
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedCreateWithoutGameInput = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCreateOrConnectWithoutGameInput = {
    where: TeamStatlinesWhereUniqueInput
    create: XOR<TeamStatlinesCreateWithoutGameInput, TeamStatlinesUncheckedCreateWithoutGameInput>
  }

  export type TeamStatlinesCreateManyGameInputEnvelope = {
    data: Enumerable<TeamStatlinesCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type StatlineCreateWithoutGameInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutStatlinesInput
    player: PlayerCreateNestedOneWithoutStatlinesInput
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_statlinesInput
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedCreateWithoutGameInput = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateOrConnectWithoutGameInput = {
    where: StatlineWhereUniqueInput
    create: XOR<StatlineCreateWithoutGameInput, StatlineUncheckedCreateWithoutGameInput>
  }

  export type StatlineCreateManyGameInputEnvelope = {
    data: Enumerable<StatlineCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutAway_gamesInput = {
    update: XOR<TeamUpdateWithoutAway_gamesInput, TeamUncheckedUpdateWithoutAway_gamesInput>
    create: XOR<TeamCreateWithoutAway_gamesInput, TeamUncheckedCreateWithoutAway_gamesInput>
  }

  export type TeamUpdateWithoutAway_gamesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateWithoutAway_gamesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUpsertWithoutHome_gamesInput = {
    update: XOR<TeamUpdateWithoutHome_gamesInput, TeamUncheckedUpdateWithoutHome_gamesInput>
    create: XOR<TeamCreateWithoutHome_gamesInput, TeamUncheckedCreateWithoutHome_gamesInput>
  }

  export type TeamUpdateWithoutHome_gamesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateWithoutHome_gamesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type RefereeUpsertWithoutCrewchief_gamesInput = {
    update: XOR<RefereeUpdateWithoutCrewchief_gamesInput, RefereeUncheckedUpdateWithoutCrewchief_gamesInput>
    create: XOR<RefereeCreateWithoutCrewchief_gamesInput, RefereeUncheckedCreateWithoutCrewchief_gamesInput>
  }

  export type RefereeUpdateWithoutCrewchief_gamesInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    referee_games?: GameUpdateManyWithoutRefereeNestedInput
    umpire_games?: GameUpdateManyWithoutUmpireNestedInput
  }

  export type RefereeUncheckedUpdateWithoutCrewchief_gamesInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    referee_games?: GameUncheckedUpdateManyWithoutRefereeNestedInput
    umpire_games?: GameUncheckedUpdateManyWithoutUmpireNestedInput
  }

  export type RefereeUpsertWithoutUmpire_gamesInput = {
    update: XOR<RefereeUpdateWithoutUmpire_gamesInput, RefereeUncheckedUpdateWithoutUmpire_gamesInput>
    create: XOR<RefereeCreateWithoutUmpire_gamesInput, RefereeUncheckedCreateWithoutUmpire_gamesInput>
  }

  export type RefereeUpdateWithoutUmpire_gamesInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    referee_games?: GameUpdateManyWithoutRefereeNestedInput
    crewchief_games?: GameUpdateManyWithoutCrewchiefNestedInput
  }

  export type RefereeUncheckedUpdateWithoutUmpire_gamesInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    referee_games?: GameUncheckedUpdateManyWithoutRefereeNestedInput
    crewchief_games?: GameUncheckedUpdateManyWithoutCrewchiefNestedInput
  }

  export type RefereeUpsertWithoutReferee_gamesInput = {
    update: XOR<RefereeUpdateWithoutReferee_gamesInput, RefereeUncheckedUpdateWithoutReferee_gamesInput>
    create: XOR<RefereeCreateWithoutReferee_gamesInput, RefereeUncheckedCreateWithoutReferee_gamesInput>
  }

  export type RefereeUpdateWithoutReferee_gamesInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    umpire_games?: GameUpdateManyWithoutUmpireNestedInput
    crewchief_games?: GameUpdateManyWithoutCrewchiefNestedInput
  }

  export type RefereeUncheckedUpdateWithoutReferee_gamesInput = {
    RefereeID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Number?: IntFieldUpdateOperationsInput | number
    umpire_games?: GameUncheckedUpdateManyWithoutUmpireNestedInput
    crewchief_games?: GameUncheckedUpdateManyWithoutCrewchiefNestedInput
  }

  export type TeamStatlinesUpsertWithWhereUniqueWithoutGameInput = {
    where: TeamStatlinesWhereUniqueInput
    update: XOR<TeamStatlinesUpdateWithoutGameInput, TeamStatlinesUncheckedUpdateWithoutGameInput>
    create: XOR<TeamStatlinesCreateWithoutGameInput, TeamStatlinesUncheckedCreateWithoutGameInput>
  }

  export type TeamStatlinesUpdateWithWhereUniqueWithoutGameInput = {
    where: TeamStatlinesWhereUniqueInput
    data: XOR<TeamStatlinesUpdateWithoutGameInput, TeamStatlinesUncheckedUpdateWithoutGameInput>
  }

  export type TeamStatlinesUpdateManyWithWhereWithoutGameInput = {
    where: TeamStatlinesScalarWhereInput
    data: XOR<TeamStatlinesUpdateManyMutationInput, TeamStatlinesUncheckedUpdateManyWithoutTeam_statlinesInput>
  }

  export type StatlineUpsertWithWhereUniqueWithoutGameInput = {
    where: StatlineWhereUniqueInput
    update: XOR<StatlineUpdateWithoutGameInput, StatlineUncheckedUpdateWithoutGameInput>
    create: XOR<StatlineCreateWithoutGameInput, StatlineUncheckedCreateWithoutGameInput>
  }

  export type StatlineUpdateWithWhereUniqueWithoutGameInput = {
    where: StatlineWhereUniqueInput
    data: XOR<StatlineUpdateWithoutGameInput, StatlineUncheckedUpdateWithoutGameInput>
  }

  export type StatlineUpdateManyWithWhereWithoutGameInput = {
    where: StatlineScalarWhereInput
    data: XOR<StatlineUpdateManyMutationInput, StatlineUncheckedUpdateManyWithoutStatlinesInput>
  }

  export type TeamCreateWithoutTeam_game_statlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateWithoutTeam_game_statlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamCreateOrConnectWithoutTeam_game_statlinesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeam_game_statlinesInput, TeamUncheckedCreateWithoutTeam_game_statlinesInput>
  }

  export type GameCreateWithoutTeam_statlinesInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTeam_statlinesInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTeam_statlinesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTeam_statlinesInput, GameUncheckedCreateWithoutTeam_statlinesInput>
  }

  export type TeamCreateWithoutOpponent_team_game_statlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateWithoutOpponent_team_game_statlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamCreateOrConnectWithoutOpponent_team_game_statlinesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutOpponent_team_game_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_game_statlinesInput>
  }

  export type TeamUpsertWithoutTeam_game_statlinesInput = {
    update: XOR<TeamUpdateWithoutTeam_game_statlinesInput, TeamUncheckedUpdateWithoutTeam_game_statlinesInput>
    create: XOR<TeamCreateWithoutTeam_game_statlinesInput, TeamUncheckedCreateWithoutTeam_game_statlinesInput>
  }

  export type TeamUpdateWithoutTeam_game_statlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeam_game_statlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type GameUpsertWithoutTeam_statlinesInput = {
    update: XOR<GameUpdateWithoutTeam_statlinesInput, GameUncheckedUpdateWithoutTeam_statlinesInput>
    create: XOR<GameCreateWithoutTeam_statlinesInput, GameUncheckedCreateWithoutTeam_statlinesInput>
  }

  export type GameUpdateWithoutTeam_statlinesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTeam_statlinesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TeamUpsertWithoutOpponent_team_game_statlinesInput = {
    update: XOR<TeamUpdateWithoutOpponent_team_game_statlinesInput, TeamUncheckedUpdateWithoutOpponent_team_game_statlinesInput>
    create: XOR<TeamCreateWithoutOpponent_team_game_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_game_statlinesInput>
  }

  export type TeamUpdateWithoutOpponent_team_game_statlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateWithoutOpponent_team_game_statlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamCreateWithoutPlayersInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateWithoutPlayersInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamCreateOrConnectWithoutPlayersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type SeasonAveragesCreateWithoutPlayerInput = {
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUncheckedCreateWithoutPlayerInput = {
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesCreateOrConnectWithoutPlayerInput = {
    where: SeasonAveragesWhereUniqueInput
    create: XOR<SeasonAveragesCreateWithoutPlayerInput, SeasonAveragesUncheckedCreateWithoutPlayerInput>
  }

  export type LastFiveGameAveragesCreateWithoutPlayerInput = {
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUncheckedCreateWithoutPlayerInput = {
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    FieldGoalsMade: Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted: Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: Decimal | DecimalJsLike | number | string
    TwoPointersAttempted: Decimal | DecimalJsLike | number | string
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: Decimal | DecimalJsLike | number | string
    ThreePointersAttempted: Decimal | DecimalJsLike | number | string
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted: Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: Decimal | DecimalJsLike | number | string
    DefensiveRebounds: Decimal | DecimalJsLike | number | string
    Rebounds: Decimal | DecimalJsLike | number | string
    Assists: Decimal | DecimalJsLike | number | string
    Steals: Decimal | DecimalJsLike | number | string
    BlockedShots: Decimal | DecimalJsLike | number | string
    Turnovers: Decimal | DecimalJsLike | number | string
    PersonalFouls: Decimal | DecimalJsLike | number | string
    Points: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesCreateOrConnectWithoutPlayerInput = {
    where: LastFiveGameAveragesWhereUniqueInput
    create: XOR<LastFiveGameAveragesCreateWithoutPlayerInput, LastFiveGameAveragesUncheckedCreateWithoutPlayerInput>
  }

  export type StatlineCreateWithoutPlayerInput = {
    StatID: number
    team: TeamCreateNestedOneWithoutStatlinesInput
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    game: GameCreateNestedOneWithoutStatlinesInput
    opponent_team: TeamCreateNestedOneWithoutOpponent_team_statlinesInput
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedCreateWithoutPlayerInput = {
    StatID: number
    TeamID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateOrConnectWithoutPlayerInput = {
    where: StatlineWhereUniqueInput
    create: XOR<StatlineCreateWithoutPlayerInput, StatlineUncheckedCreateWithoutPlayerInput>
  }

  export type StatlineCreateManyPlayerInputEnvelope = {
    data: Enumerable<StatlineCreateManyPlayerInput>
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutPlayersInput = {
    update: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type TeamUpdateWithoutPlayersInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayersInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type SeasonAveragesUpsertWithoutPlayerInput = {
    update: XOR<SeasonAveragesUpdateWithoutPlayerInput, SeasonAveragesUncheckedUpdateWithoutPlayerInput>
    create: XOR<SeasonAveragesCreateWithoutPlayerInput, SeasonAveragesUncheckedCreateWithoutPlayerInput>
  }

  export type SeasonAveragesUpdateWithoutPlayerInput = {
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SeasonAveragesUncheckedUpdateWithoutPlayerInput = {
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUpsertWithoutPlayerInput = {
    update: XOR<LastFiveGameAveragesUpdateWithoutPlayerInput, LastFiveGameAveragesUncheckedUpdateWithoutPlayerInput>
    create: XOR<LastFiveGameAveragesCreateWithoutPlayerInput, LastFiveGameAveragesUncheckedCreateWithoutPlayerInput>
  }

  export type LastFiveGameAveragesUpdateWithoutPlayerInput = {
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type LastFiveGameAveragesUncheckedUpdateWithoutPlayerInput = {
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsAttempted?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveRebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Rebounds?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Steals?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlockedShots?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Turnovers?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PersonalFouls?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Points?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpsertWithWhereUniqueWithoutPlayerInput = {
    where: StatlineWhereUniqueInput
    update: XOR<StatlineUpdateWithoutPlayerInput, StatlineUncheckedUpdateWithoutPlayerInput>
    create: XOR<StatlineCreateWithoutPlayerInput, StatlineUncheckedCreateWithoutPlayerInput>
  }

  export type StatlineUpdateWithWhereUniqueWithoutPlayerInput = {
    where: StatlineWhereUniqueInput
    data: XOR<StatlineUpdateWithoutPlayerInput, StatlineUncheckedUpdateWithoutPlayerInput>
  }

  export type StatlineUpdateManyWithWhereWithoutPlayerInput = {
    where: StatlineScalarWhereInput
    data: XOR<StatlineUpdateManyMutationInput, StatlineUncheckedUpdateManyWithoutStatlinesInput>
  }

  export type TeamCreateWithoutStatlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamUncheckedCreateWithoutStatlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_statlines?: StatlineUncheckedCreateNestedManyWithoutOpponent_teamInput
  }

  export type TeamCreateOrConnectWithoutStatlinesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutStatlinesInput, TeamUncheckedCreateWithoutStatlinesInput>
  }

  export type PlayerCreateWithoutStatlinesInput = {
    PlayerID: number
    team: TeamCreateNestedOneWithoutPlayersInput
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesCreateNestedOneWithoutPlayerInput
    last_five_averages?: LastFiveGameAveragesCreateNestedOneWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutStatlinesInput = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesUncheckedCreateNestedOneWithoutPlayerInput
    last_five_averages?: LastFiveGameAveragesUncheckedCreateNestedOneWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutStatlinesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutStatlinesInput, PlayerUncheckedCreateWithoutStatlinesInput>
  }

  export type GameCreateWithoutStatlinesInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutStatlinesInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutStatlinesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutStatlinesInput, GameUncheckedCreateWithoutStatlinesInput>
  }

  export type TeamCreateWithoutOpponent_team_statlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameCreateNestedManyWithoutHome_teamInput
    away_games?: GameCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerCreateNestedManyWithoutTeamInput
    statlines?: StatlineCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutOpponent_team_statlinesInput = {
    TeamID: number
    Key: string
    City: string
    Name: string
    stadium: string
    Conference: string
    Division: string
    inner_color: string
    outer_color: string
    WikipediaLogoUrl: string
    Wins: number
    Losses: number
    home_games?: GameUncheckedCreateNestedManyWithoutHome_teamInput
    away_games?: GameUncheckedCreateNestedManyWithoutAway_teamInput
    team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutTeamInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutOpponent_teamInput
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutOpponent_team_statlinesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutOpponent_team_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_statlinesInput>
  }

  export type TeamUpsertWithoutStatlinesInput = {
    update: XOR<TeamUpdateWithoutStatlinesInput, TeamUncheckedUpdateWithoutStatlinesInput>
    create: XOR<TeamCreateWithoutStatlinesInput, TeamUncheckedCreateWithoutStatlinesInput>
  }

  export type TeamUpdateWithoutStatlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUpdateManyWithoutOpponent_teamNestedInput
  }

  export type TeamUncheckedUpdateWithoutStatlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_statlines?: StatlineUncheckedUpdateManyWithoutOpponent_teamNestedInput
  }

  export type PlayerUpsertWithoutStatlinesInput = {
    update: XOR<PlayerUpdateWithoutStatlinesInput, PlayerUncheckedUpdateWithoutStatlinesInput>
    create: XOR<PlayerCreateWithoutStatlinesInput, PlayerUncheckedCreateWithoutStatlinesInput>
  }

  export type PlayerUpdateWithoutStatlinesInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUpdateOneWithoutPlayerNestedInput
    last_five_averages?: LastFiveGameAveragesUpdateOneWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutStatlinesInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    last_five_averages?: LastFiveGameAveragesUncheckedUpdateOneWithoutPlayerNestedInput
  }

  export type GameUpsertWithoutStatlinesInput = {
    update: XOR<GameUpdateWithoutStatlinesInput, GameUncheckedUpdateWithoutStatlinesInput>
    create: XOR<GameCreateWithoutStatlinesInput, GameUncheckedCreateWithoutStatlinesInput>
  }

  export type GameUpdateWithoutStatlinesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutStatlinesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
  }

  export type TeamUpsertWithoutOpponent_team_statlinesInput = {
    update: XOR<TeamUpdateWithoutOpponent_team_statlinesInput, TeamUncheckedUpdateWithoutOpponent_team_statlinesInput>
    create: XOR<TeamCreateWithoutOpponent_team_statlinesInput, TeamUncheckedCreateWithoutOpponent_team_statlinesInput>
  }

  export type TeamUpdateWithoutOpponent_team_statlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutOpponent_team_statlinesInput = {
    TeamID?: IntFieldUpdateOperationsInput | number
    Key?: StringFieldUpdateOperationsInput | string
    City?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    stadium?: StringFieldUpdateOperationsInput | string
    Conference?: StringFieldUpdateOperationsInput | string
    Division?: StringFieldUpdateOperationsInput | string
    inner_color?: StringFieldUpdateOperationsInput | string
    outer_color?: StringFieldUpdateOperationsInput | string
    WikipediaLogoUrl?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    home_games?: GameUncheckedUpdateManyWithoutHome_teamNestedInput
    away_games?: GameUncheckedUpdateManyWithoutAway_teamNestedInput
    team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutTeamNestedInput
    opponent_team_game_statlines?: TeamStatlinesUncheckedUpdateManyWithoutOpponent_teamNestedInput
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type GameCreateWithoutRefereeInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutRefereeInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutRefereeInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutRefereeInput, GameUncheckedCreateWithoutRefereeInput>
  }

  export type GameCreateManyRefereeInputEnvelope = {
    data: Enumerable<GameCreateManyRefereeInput>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutUmpireInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeCreateNestedOneWithoutCrewchief_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutUmpireInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    RefereeID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutUmpireInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutUmpireInput, GameUncheckedCreateWithoutUmpireInput>
  }

  export type GameCreateManyUmpireInputEnvelope = {
    data: Enumerable<GameCreateManyUmpireInput>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutCrewchiefInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    away_team: TeamCreateNestedOneWithoutAway_gamesInput
    home_team: TeamCreateNestedOneWithoutHome_gamesInput
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    umpire?: RefereeCreateNestedOneWithoutUmpire_gamesInput
    referee?: RefereeCreateNestedOneWithoutReferee_gamesInput
    team_statlines?: TeamStatlinesCreateNestedManyWithoutGameInput
    statlines?: StatlineCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutCrewchiefInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    UmpireID?: number | null
    RefereeID?: number | null
    team_statlines?: TeamStatlinesUncheckedCreateNestedManyWithoutGameInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutCrewchiefInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutCrewchiefInput, GameUncheckedCreateWithoutCrewchiefInput>
  }

  export type GameCreateManyCrewchiefInputEnvelope = {
    data: Enumerable<GameCreateManyCrewchiefInput>
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutRefereeInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutRefereeInput, GameUncheckedUpdateWithoutRefereeInput>
    create: XOR<GameCreateWithoutRefereeInput, GameUncheckedCreateWithoutRefereeInput>
  }

  export type GameUpdateWithWhereUniqueWithoutRefereeInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutRefereeInput, GameUncheckedUpdateWithoutRefereeInput>
  }

  export type GameUpdateManyWithWhereWithoutRefereeInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutReferee_gamesInput>
  }

  export type GameUpsertWithWhereUniqueWithoutUmpireInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutUmpireInput, GameUncheckedUpdateWithoutUmpireInput>
    create: XOR<GameCreateWithoutUmpireInput, GameUncheckedCreateWithoutUmpireInput>
  }

  export type GameUpdateWithWhereUniqueWithoutUmpireInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutUmpireInput, GameUncheckedUpdateWithoutUmpireInput>
  }

  export type GameUpdateManyWithWhereWithoutUmpireInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutUmpire_gamesInput>
  }

  export type GameUpsertWithWhereUniqueWithoutCrewchiefInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutCrewchiefInput, GameUncheckedUpdateWithoutCrewchiefInput>
    create: XOR<GameCreateWithoutCrewchiefInput, GameUncheckedCreateWithoutCrewchiefInput>
  }

  export type GameUpdateWithWhereUniqueWithoutCrewchiefInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutCrewchiefInput, GameUncheckedUpdateWithoutCrewchiefInput>
  }

  export type GameUpdateManyWithWhereWithoutCrewchiefInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutCrewchief_gamesInput>
  }

  export type PlayerCreateWithoutSeason_averagesInput = {
    PlayerID: number
    team: TeamCreateNestedOneWithoutPlayersInput
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    last_five_averages?: LastFiveGameAveragesCreateNestedOneWithoutPlayerInput
    statlines?: StatlineCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutSeason_averagesInput = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    last_five_averages?: LastFiveGameAveragesUncheckedCreateNestedOneWithoutPlayerInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutSeason_averagesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutSeason_averagesInput, PlayerUncheckedCreateWithoutSeason_averagesInput>
  }

  export type PlayerUpsertWithoutSeason_averagesInput = {
    update: XOR<PlayerUpdateWithoutSeason_averagesInput, PlayerUncheckedUpdateWithoutSeason_averagesInput>
    create: XOR<PlayerCreateWithoutSeason_averagesInput, PlayerUncheckedCreateWithoutSeason_averagesInput>
  }

  export type PlayerUpdateWithoutSeason_averagesInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    last_five_averages?: LastFiveGameAveragesUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutSeason_averagesInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    last_five_averages?: LastFiveGameAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateWithoutLast_five_averagesInput = {
    PlayerID: number
    team: TeamCreateNestedOneWithoutPlayersInput
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesCreateNestedOneWithoutPlayerInput
    statlines?: StatlineCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutLast_five_averagesInput = {
    PlayerID: number
    TeamID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
    season_averages?: SeasonAveragesUncheckedCreateNestedOneWithoutPlayerInput
    statlines?: StatlineUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutLast_five_averagesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutLast_five_averagesInput, PlayerUncheckedCreateWithoutLast_five_averagesInput>
  }

  export type PlayerUpsertWithoutLast_five_averagesInput = {
    update: XOR<PlayerUpdateWithoutLast_five_averagesInput, PlayerUncheckedUpdateWithoutLast_five_averagesInput>
    create: XOR<PlayerCreateWithoutLast_five_averagesInput, PlayerUncheckedCreateWithoutLast_five_averagesInput>
  }

  export type PlayerUpdateWithoutLast_five_averagesInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutLast_five_averagesInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type GameCreateManyHome_teamInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
  }

  export type GameCreateManyAway_teamInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
    RefereeID?: number | null
  }

  export type TeamStatlinesCreateManyTeamInput = {
    StatID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCreateManyOpponent_teamInput = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    GameID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type PlayerCreateManyTeamInput = {
    PlayerID: number
    Jersey: number
    PositionCategory: string
    Position: string
    FirstName: string
    LastName: string
    s_name?: string
    Height: number
    Weight: number
    BirthDate: string
    BirthCity: string
    BirthState: string
    BirthCountry: string
    HighSchool: string
    College: string
    PhotoUrl: string
    SportRadarPlayerID: string
    RotoworldPlayerID: number
    RotoWirePlayerID: number
    FantasyAlarmPlayerID: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    FanDuelPlayerID: number
    DraftKingsPlayerID: number
    YahooPlayerID: number
    FanDuelName: string
    DraftKingsName: string
    YahooName: string
    DepthChartPosition: string
    DepthChartOrder: number
    UsaTodayPlayerID: number
    UsaTodayHeadshotUrl: string
    UsaTodayHeadshotNoBackgroundUrl: string
    UsaTodayHeadshotUpdated: string
    UsaTodayHeadshotNoBackgroundUpdated: string
    NbaDotComPlayerID: number
  }

  export type StatlineCreateManyTeamInput = {
    StatID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateManyOpponent_teamInput = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type GameUpdateWithoutHome_teamInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutHome_teamInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutHome_gamesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GameUpdateWithoutAway_teamInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutAway_teamInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutAway_gamesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamStatlinesUpdateWithoutTeamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutTeam_statlinesNestedInput
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_game_statlinesNestedInput
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateWithoutTeamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateManyWithoutTeam_game_statlinesInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUpdateWithoutOpponent_teamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutTeam_game_statlinesNestedInput
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutTeam_statlinesNestedInput
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateWithoutOpponent_teamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    GameID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateManyWithoutOpponent_team_game_statlinesInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    GameID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PlayerUpdateWithoutTeamInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUpdateOneWithoutPlayerNestedInput
    last_five_averages?: LastFiveGameAveragesUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
    season_averages?: SeasonAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    last_five_averages?: LastFiveGameAveragesUncheckedUpdateOneWithoutPlayerNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutPlayersInput = {
    PlayerID?: IntFieldUpdateOperationsInput | number
    Jersey?: IntFieldUpdateOperationsInput | number
    PositionCategory?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    FirstName?: StringFieldUpdateOperationsInput | string
    LastName?: StringFieldUpdateOperationsInput | string
    s_name?: StringFieldUpdateOperationsInput | string
    Height?: IntFieldUpdateOperationsInput | number
    Weight?: IntFieldUpdateOperationsInput | number
    BirthDate?: StringFieldUpdateOperationsInput | string
    BirthCity?: StringFieldUpdateOperationsInput | string
    BirthState?: StringFieldUpdateOperationsInput | string
    BirthCountry?: StringFieldUpdateOperationsInput | string
    HighSchool?: StringFieldUpdateOperationsInput | string
    College?: StringFieldUpdateOperationsInput | string
    PhotoUrl?: StringFieldUpdateOperationsInput | string
    SportRadarPlayerID?: StringFieldUpdateOperationsInput | string
    RotoworldPlayerID?: IntFieldUpdateOperationsInput | number
    RotoWirePlayerID?: IntFieldUpdateOperationsInput | number
    FantasyAlarmPlayerID?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    FanDuelPlayerID?: IntFieldUpdateOperationsInput | number
    DraftKingsPlayerID?: IntFieldUpdateOperationsInput | number
    YahooPlayerID?: IntFieldUpdateOperationsInput | number
    FanDuelName?: StringFieldUpdateOperationsInput | string
    DraftKingsName?: StringFieldUpdateOperationsInput | string
    YahooName?: StringFieldUpdateOperationsInput | string
    DepthChartPosition?: StringFieldUpdateOperationsInput | string
    DepthChartOrder?: IntFieldUpdateOperationsInput | number
    UsaTodayPlayerID?: IntFieldUpdateOperationsInput | number
    UsaTodayHeadshotUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUrl?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotUpdated?: StringFieldUpdateOperationsInput | string
    UsaTodayHeadshotNoBackgroundUpdated?: StringFieldUpdateOperationsInput | string
    NbaDotComPlayerID?: IntFieldUpdateOperationsInput | number
  }

  export type StatlineUpdateWithoutTeamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    player?: PlayerUpdateOneRequiredWithoutStatlinesNestedInput
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    game?: GameUpdateOneRequiredWithoutStatlinesNestedInput
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_statlinesNestedInput
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateWithoutTeamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateManyWithoutStatlinesInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpdateWithoutOpponent_teamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutStatlinesNestedInput
    player?: PlayerUpdateOneRequiredWithoutStatlinesNestedInput
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    game?: GameUpdateOneRequiredWithoutStatlinesNestedInput
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateWithoutOpponent_teamInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateManyWithoutOpponent_team_statlinesInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesCreateManyGameInput = {
    StatID: number
    TeamID: number
    Season: number
    Name: string
    Team: string
    Wins: number
    Losses: number
    OpponentID: number
    Opponent: string
    HomeOrAway: string
    IsGameOver: boolean
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateManyGameInput = {
    StatID: number
    TeamID: number
    PlayerID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUpdateWithoutGameInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutTeam_game_statlinesNestedInput
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_game_statlinesNestedInput
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateWithoutGameInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type TeamStatlinesUncheckedUpdateManyWithoutTeam_statlinesInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Team?: StringFieldUpdateOperationsInput | string
    Wins?: IntFieldUpdateOperationsInput | number
    Losses?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    Opponent?: StringFieldUpdateOperationsInput | string
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    IsGameOver?: BoolFieldUpdateOperationsInput | boolean
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpdateWithoutGameInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutStatlinesNestedInput
    player?: PlayerUpdateOneRequiredWithoutStatlinesNestedInput
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_statlinesNestedInput
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateWithoutGameInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    PlayerID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    OpponentID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineCreateManyPlayerInput = {
    StatID: number
    TeamID: number
    Name: string
    Position: string
    Started: number
    InjuryStatus?: string | null
    InjuryBodyPart?: string | null
    InjuryStartDate?: string | null
    InjuryNotes?: string | null
    GameID: number
    OpponentID: number
    HomeOrAway: string
    FantasyPoints: Decimal | DecimalJsLike | number | string
    Minutes: number
    Seconds: number
    FieldGoalsMade: number
    FieldGoalsAttempted: number
    FieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage: Decimal | DecimalJsLike | number | string
    TwoPointersMade: number
    TwoPointersAttempted: number
    TwoPointersPercentage: Decimal | DecimalJsLike | number | string
    ThreePointersMade: number
    ThreePointersAttempted: number
    ThreePointersPercentage: Decimal | DecimalJsLike | number | string
    FreeThrowsMade: number
    FreeThrowsAttempted: number
    FreeThrowsPercentage: Decimal | DecimalJsLike | number | string
    OffensiveRebounds: number
    DefensiveRebounds: number
    Rebounds: number
    OffensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage: Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage: Decimal | DecimalJsLike | number | string
    Assists: number
    Steals: number
    BlockedShots: number
    Turnovers: number
    PersonalFouls: number
    Points: number
    TrueShootingPercentage: Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating: Decimal | DecimalJsLike | number | string
    AssistsPercentage: Decimal | DecimalJsLike | number | string
    StealsPercentage: Decimal | DecimalJsLike | number | string
    BlocksPercentage: Decimal | DecimalJsLike | number | string
    TurnOversPercentage: Decimal | DecimalJsLike | number | string
    UsageRatePercentage: Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel: Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings: Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo: Decimal | DecimalJsLike | number | string
    PlusMinus: number
    DoubleDoubles: number
    TripleDoubles: number
    FantasyPointsFantasyDraft: Decimal | DecimalJsLike | number | string
  }

  export type StatlineUpdateWithoutPlayerInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    team?: TeamUpdateOneRequiredWithoutStatlinesNestedInput
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    game?: GameUpdateOneRequiredWithoutStatlinesNestedInput
    opponent_team?: TeamUpdateOneRequiredWithoutOpponent_team_statlinesNestedInput
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type StatlineUncheckedUpdateWithoutPlayerInput = {
    StatID?: IntFieldUpdateOperationsInput | number
    TeamID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Started?: IntFieldUpdateOperationsInput | number
    InjuryStatus?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryBodyPart?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryStartDate?: NullableStringFieldUpdateOperationsInput | string | null
    InjuryNotes?: NullableStringFieldUpdateOperationsInput | string | null
    GameID?: IntFieldUpdateOperationsInput | number
    OpponentID?: IntFieldUpdateOperationsInput | number
    HomeOrAway?: StringFieldUpdateOperationsInput | string
    FantasyPoints?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Minutes?: IntFieldUpdateOperationsInput | number
    Seconds?: IntFieldUpdateOperationsInput | number
    FieldGoalsMade?: IntFieldUpdateOperationsInput | number
    FieldGoalsAttempted?: IntFieldUpdateOperationsInput | number
    FieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    EffectiveFieldGoalsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TwoPointersMade?: IntFieldUpdateOperationsInput | number
    TwoPointersAttempted?: IntFieldUpdateOperationsInput | number
    TwoPointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ThreePointersMade?: IntFieldUpdateOperationsInput | number
    ThreePointersAttempted?: IntFieldUpdateOperationsInput | number
    ThreePointersPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FreeThrowsMade?: IntFieldUpdateOperationsInput | number
    FreeThrowsAttempted?: IntFieldUpdateOperationsInput | number
    FreeThrowsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    OffensiveRebounds?: IntFieldUpdateOperationsInput | number
    DefensiveRebounds?: IntFieldUpdateOperationsInput | number
    Rebounds?: IntFieldUpdateOperationsInput | number
    OffensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    DefensiveReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TotalReboundsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Assists?: IntFieldUpdateOperationsInput | number
    Steals?: IntFieldUpdateOperationsInput | number
    BlockedShots?: IntFieldUpdateOperationsInput | number
    Turnovers?: IntFieldUpdateOperationsInput | number
    PersonalFouls?: IntFieldUpdateOperationsInput | number
    Points?: IntFieldUpdateOperationsInput | number
    TrueShootingPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlayerEfficiencyRating?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    AssistsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    StealsPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    BlocksPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    TurnOversPercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    UsageRatePercentage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsFanDuel?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsDraftKings?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    FantasyPointsYahoo?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    PlusMinus?: IntFieldUpdateOperationsInput | number
    DoubleDoubles?: IntFieldUpdateOperationsInput | number
    TripleDoubles?: IntFieldUpdateOperationsInput | number
    FantasyPointsFantasyDraft?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type GameCreateManyRefereeInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    UmpireID?: number | null
  }

  export type GameCreateManyUmpireInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: number | null
    RefereeID?: number | null
  }

  export type GameCreateManyCrewchiefInput = {
    GameID: number
    Season: number
    SeasonType: number
    Status: string
    Channel: string
    Day: Date | string
    nba_day?: string
    DateTime: Date | string
    AwayTeamID: number
    HomeTeamID: number
    stadium: string
    city: string
    AwayTeamScore?: number | null
    HomeTeamScore?: number | null
    Quarter?: string | null
    TimeRemainingMinutes?: string | null
    TimeRemainingSeconds?: string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    UmpireID?: number | null
    RefereeID?: number | null
  }

  export type GameUpdateWithoutRefereeInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutRefereeInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutReferee_gamesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GameUpdateWithoutUmpireInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    crewchief?: RefereeUpdateOneWithoutCrewchief_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutUmpireInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutUmpire_gamesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    CrewChiefID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GameUpdateWithoutCrewchiefInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    away_team?: TeamUpdateOneRequiredWithoutAway_gamesNestedInput
    home_team?: TeamUpdateOneRequiredWithoutHome_gamesNestedInput
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    umpire?: RefereeUpdateOneWithoutUmpire_gamesNestedInput
    referee?: RefereeUpdateOneWithoutReferee_gamesNestedInput
    team_statlines?: TeamStatlinesUpdateManyWithoutGameNestedInput
    statlines?: StatlineUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutCrewchiefInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
    team_statlines?: TeamStatlinesUncheckedUpdateManyWithoutGameNestedInput
    statlines?: StatlineUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutCrewchief_gamesInput = {
    GameID?: IntFieldUpdateOperationsInput | number
    Season?: IntFieldUpdateOperationsInput | number
    SeasonType?: IntFieldUpdateOperationsInput | number
    Status?: StringFieldUpdateOperationsInput | string
    Channel?: StringFieldUpdateOperationsInput | string
    Day?: DateTimeFieldUpdateOperationsInput | Date | string
    nba_day?: StringFieldUpdateOperationsInput | string
    DateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    AwayTeamID?: IntFieldUpdateOperationsInput | number
    HomeTeamID?: IntFieldUpdateOperationsInput | number
    stadium?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    AwayTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    HomeTeamScore?: NullableIntFieldUpdateOperationsInput | number | null
    Quarter?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingMinutes?: NullableStringFieldUpdateOperationsInput | string | null
    TimeRemainingSeconds?: NullableStringFieldUpdateOperationsInput | string | null
    Quarters?: NullableJsonNullValueInput | InputJsonValue
    UmpireID?: NullableIntFieldUpdateOperationsInput | number | null
    RefereeID?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}