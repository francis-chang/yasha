
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.8.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.8.0",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.GameScalarFieldEnum = makeEnum({
  GameID: 'GameID',
  Season: 'Season',
  SeasonType: 'SeasonType',
  Status: 'Status',
  Channel: 'Channel',
  Day: 'Day',
  nba_day: 'nba_day',
  DateTime: 'DateTime',
  AwayTeamID: 'AwayTeamID',
  HomeTeamID: 'HomeTeamID',
  stadium: 'stadium',
  city: 'city',
  AwayTeamScore: 'AwayTeamScore',
  HomeTeamScore: 'HomeTeamScore',
  Quarter: 'Quarter',
  TimeRemainingMinutes: 'TimeRemainingMinutes',
  TimeRemainingSeconds: 'TimeRemainingSeconds',
  Quarters: 'Quarters',
  CrewChiefID: 'CrewChiefID',
  UmpireID: 'UmpireID',
  RefereeID: 'RefereeID'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.LastFiveGameAveragesScalarFieldEnum = makeEnum({
  PlayerID: 'PlayerID',
  FantasyPoints: 'FantasyPoints',
  Minutes: 'Minutes',
  FieldGoalsMade: 'FieldGoalsMade',
  FieldGoalsAttempted: 'FieldGoalsAttempted',
  FieldGoalsPercentage: 'FieldGoalsPercentage',
  TwoPointersMade: 'TwoPointersMade',
  TwoPointersAttempted: 'TwoPointersAttempted',
  TwoPointersPercentage: 'TwoPointersPercentage',
  ThreePointersMade: 'ThreePointersMade',
  ThreePointersAttempted: 'ThreePointersAttempted',
  ThreePointersPercentage: 'ThreePointersPercentage',
  FreeThrowsMade: 'FreeThrowsMade',
  FreeThrowsAttempted: 'FreeThrowsAttempted',
  FreeThrowsPercentage: 'FreeThrowsPercentage',
  OffensiveRebounds: 'OffensiveRebounds',
  DefensiveRebounds: 'DefensiveRebounds',
  Rebounds: 'Rebounds',
  Assists: 'Assists',
  Steals: 'Steals',
  BlockedShots: 'BlockedShots',
  Turnovers: 'Turnovers',
  PersonalFouls: 'PersonalFouls',
  Points: 'Points',
  FantasyPointsFanDuel: 'FantasyPointsFanDuel',
  FantasyPointsDraftKings: 'FantasyPointsDraftKings',
  FantasyPointsYahoo: 'FantasyPointsYahoo',
  PlusMinus: 'PlusMinus'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.PlayerScalarFieldEnum = makeEnum({
  PlayerID: 'PlayerID',
  TeamID: 'TeamID',
  Jersey: 'Jersey',
  PositionCategory: 'PositionCategory',
  Position: 'Position',
  FirstName: 'FirstName',
  LastName: 'LastName',
  s_name: 's_name',
  Height: 'Height',
  Weight: 'Weight',
  BirthDate: 'BirthDate',
  BirthCity: 'BirthCity',
  BirthState: 'BirthState',
  BirthCountry: 'BirthCountry',
  HighSchool: 'HighSchool',
  College: 'College',
  PhotoUrl: 'PhotoUrl',
  SportRadarPlayerID: 'SportRadarPlayerID',
  RotoworldPlayerID: 'RotoworldPlayerID',
  RotoWirePlayerID: 'RotoWirePlayerID',
  FantasyAlarmPlayerID: 'FantasyAlarmPlayerID',
  InjuryStatus: 'InjuryStatus',
  InjuryBodyPart: 'InjuryBodyPart',
  InjuryStartDate: 'InjuryStartDate',
  InjuryNotes: 'InjuryNotes',
  FanDuelPlayerID: 'FanDuelPlayerID',
  DraftKingsPlayerID: 'DraftKingsPlayerID',
  YahooPlayerID: 'YahooPlayerID',
  FanDuelName: 'FanDuelName',
  DraftKingsName: 'DraftKingsName',
  YahooName: 'YahooName',
  DepthChartPosition: 'DepthChartPosition',
  DepthChartOrder: 'DepthChartOrder',
  UsaTodayPlayerID: 'UsaTodayPlayerID',
  UsaTodayHeadshotUrl: 'UsaTodayHeadshotUrl',
  UsaTodayHeadshotNoBackgroundUrl: 'UsaTodayHeadshotNoBackgroundUrl',
  UsaTodayHeadshotUpdated: 'UsaTodayHeadshotUpdated',
  UsaTodayHeadshotNoBackgroundUpdated: 'UsaTodayHeadshotNoBackgroundUpdated',
  NbaDotComPlayerID: 'NbaDotComPlayerID'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RefereeScalarFieldEnum = makeEnum({
  RefereeID: 'RefereeID',
  Name: 'Name',
  Number: 'Number'
});

exports.Prisma.SeasonAveragesScalarFieldEnum = makeEnum({
  PlayerID: 'PlayerID',
  FantasyPoints: 'FantasyPoints',
  Minutes: 'Minutes',
  FieldGoalsMade: 'FieldGoalsMade',
  FieldGoalsAttempted: 'FieldGoalsAttempted',
  FieldGoalsPercentage: 'FieldGoalsPercentage',
  TwoPointersMade: 'TwoPointersMade',
  TwoPointersAttempted: 'TwoPointersAttempted',
  TwoPointersPercentage: 'TwoPointersPercentage',
  ThreePointersMade: 'ThreePointersMade',
  ThreePointersAttempted: 'ThreePointersAttempted',
  ThreePointersPercentage: 'ThreePointersPercentage',
  FreeThrowsMade: 'FreeThrowsMade',
  FreeThrowsAttempted: 'FreeThrowsAttempted',
  FreeThrowsPercentage: 'FreeThrowsPercentage',
  OffensiveRebounds: 'OffensiveRebounds',
  DefensiveRebounds: 'DefensiveRebounds',
  Rebounds: 'Rebounds',
  Assists: 'Assists',
  Steals: 'Steals',
  BlockedShots: 'BlockedShots',
  Turnovers: 'Turnovers',
  PersonalFouls: 'PersonalFouls',
  Points: 'Points',
  FantasyPointsFanDuel: 'FantasyPointsFanDuel',
  FantasyPointsDraftKings: 'FantasyPointsDraftKings',
  FantasyPointsYahoo: 'FantasyPointsYahoo',
  PlusMinus: 'PlusMinus'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StatlineScalarFieldEnum = makeEnum({
  StatID: 'StatID',
  TeamID: 'TeamID',
  PlayerID: 'PlayerID',
  Name: 'Name',
  Position: 'Position',
  Started: 'Started',
  InjuryStatus: 'InjuryStatus',
  InjuryBodyPart: 'InjuryBodyPart',
  InjuryStartDate: 'InjuryStartDate',
  InjuryNotes: 'InjuryNotes',
  GameID: 'GameID',
  OpponentID: 'OpponentID',
  HomeOrAway: 'HomeOrAway',
  FantasyPoints: 'FantasyPoints',
  Minutes: 'Minutes',
  Seconds: 'Seconds',
  FieldGoalsMade: 'FieldGoalsMade',
  FieldGoalsAttempted: 'FieldGoalsAttempted',
  FieldGoalsPercentage: 'FieldGoalsPercentage',
  EffectiveFieldGoalsPercentage: 'EffectiveFieldGoalsPercentage',
  TwoPointersMade: 'TwoPointersMade',
  TwoPointersAttempted: 'TwoPointersAttempted',
  TwoPointersPercentage: 'TwoPointersPercentage',
  ThreePointersMade: 'ThreePointersMade',
  ThreePointersAttempted: 'ThreePointersAttempted',
  ThreePointersPercentage: 'ThreePointersPercentage',
  FreeThrowsMade: 'FreeThrowsMade',
  FreeThrowsAttempted: 'FreeThrowsAttempted',
  FreeThrowsPercentage: 'FreeThrowsPercentage',
  OffensiveRebounds: 'OffensiveRebounds',
  DefensiveRebounds: 'DefensiveRebounds',
  Rebounds: 'Rebounds',
  OffensiveReboundsPercentage: 'OffensiveReboundsPercentage',
  DefensiveReboundsPercentage: 'DefensiveReboundsPercentage',
  TotalReboundsPercentage: 'TotalReboundsPercentage',
  Assists: 'Assists',
  Steals: 'Steals',
  BlockedShots: 'BlockedShots',
  Turnovers: 'Turnovers',
  PersonalFouls: 'PersonalFouls',
  Points: 'Points',
  TrueShootingPercentage: 'TrueShootingPercentage',
  PlayerEfficiencyRating: 'PlayerEfficiencyRating',
  AssistsPercentage: 'AssistsPercentage',
  StealsPercentage: 'StealsPercentage',
  BlocksPercentage: 'BlocksPercentage',
  TurnOversPercentage: 'TurnOversPercentage',
  UsageRatePercentage: 'UsageRatePercentage',
  FantasyPointsFanDuel: 'FantasyPointsFanDuel',
  FantasyPointsDraftKings: 'FantasyPointsDraftKings',
  FantasyPointsYahoo: 'FantasyPointsYahoo',
  PlusMinus: 'PlusMinus',
  DoubleDoubles: 'DoubleDoubles',
  TripleDoubles: 'TripleDoubles',
  FantasyPointsFantasyDraft: 'FantasyPointsFantasyDraft'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  TeamID: 'TeamID',
  Key: 'Key',
  City: 'City',
  Name: 'Name',
  stadium: 'stadium',
  Conference: 'Conference',
  Division: 'Division',
  inner_color: 'inner_color',
  outer_color: 'outer_color',
  WikipediaLogoUrl: 'WikipediaLogoUrl',
  Score: 'Score',
  Wins: 'Wins',
  Losses: 'Losses'
});

exports.Prisma.TeamStatlinesScalarFieldEnum = makeEnum({
  StatID: 'StatID',
  TeamID: 'TeamID',
  Season: 'Season',
  Name: 'Name',
  Team: 'Team',
  Wins: 'Wins',
  Losses: 'Losses',
  GameID: 'GameID',
  OpponentID: 'OpponentID',
  Opponent: 'Opponent',
  HomeOrAway: 'HomeOrAway',
  IsGameOver: 'IsGameOver',
  FieldGoalsMade: 'FieldGoalsMade',
  FieldGoalsAttempted: 'FieldGoalsAttempted',
  FieldGoalsPercentage: 'FieldGoalsPercentage',
  EffectiveFieldGoalsPercentage: 'EffectiveFieldGoalsPercentage',
  TwoPointersMade: 'TwoPointersMade',
  TwoPointersAttempted: 'TwoPointersAttempted',
  TwoPointersPercentage: 'TwoPointersPercentage',
  ThreePointersMade: 'ThreePointersMade',
  ThreePointersAttempted: 'ThreePointersAttempted',
  ThreePointersPercentage: 'ThreePointersPercentage',
  FreeThrowsMade: 'FreeThrowsMade',
  FreeThrowsAttempted: 'FreeThrowsAttempted',
  FreeThrowsPercentage: 'FreeThrowsPercentage',
  OffensiveRebounds: 'OffensiveRebounds',
  DefensiveRebounds: 'DefensiveRebounds',
  Rebounds: 'Rebounds',
  Assists: 'Assists',
  Steals: 'Steals',
  BlockedShots: 'BlockedShots',
  Turnovers: 'Turnovers',
  PersonalFouls: 'PersonalFouls',
  Points: 'Points',
  TrueShootingPercentage: 'TrueShootingPercentage',
  FantasyPointsFanDuel: 'FantasyPointsFanDuel',
  FantasyPointsDraftKings: 'FantasyPointsDraftKings',
  FantasyPointsYahoo: 'FantasyPointsYahoo'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = makeEnum({
  Team: 'Team',
  Game: 'Game',
  TeamStatlines: 'TeamStatlines',
  Player: 'Player',
  Statline: 'Statline',
  Referee: 'Referee',
  SeasonAverages: 'SeasonAverages',
  LastFiveGameAverages: 'LastFiveGameAverages'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
